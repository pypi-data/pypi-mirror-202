from typing import Dict, List, Optional

from jijmodeling import SampleSet as SampleSet
from jijzeptlab.compile import CompiledInstance as CompiledInstance
from jijzeptlab.utils.baseclass import Option as Option, Result as Result
from pydantic import BaseModel as BaseModel, Extra as Extra

class DA4SamplerOption(Option):
    time_limit: int = ...
    target_energy: Optional[float] = ...
    num_run: int = ...
    num_group: int = ...
    num_output_solution: int = ...
    gs_level: int = ...
    gs_cutoff: int = ...
    one_hot_level: int = ...
    one_hot_cutoff: int = ...
    internal_penalty: int = ...
    penalty_auto_mode: int = ...
    penalty_coefficient: int = ...
    penalty_inc_rate: int = ...
    max_penalty_coefficient: int = ...
    guidance_config: Optional[Dict[str, bool]] = ...
    fixed_config: Optional[Dict[str, bool]] = ...
    one_way_one_hot_groups: Optional[List[str]] = ...
    two_way_one_hot_groups: Optional[List[str]] = ...
    inequalities_lambda: Optional[Dict[str, int]] = ...

class DA4Model:
    compiled_instance: CompiledInstance
    def __init__(self, compiled_instance) -> None: ...

class DA4Result(Result):
    sample_set: SampleSet
    def to_sample_set(self) -> SampleSet: ...
    def __init__(self, sample_set) -> None: ...

def create_model(compiled_instance: CompiledInstance) -> DA4Model: ...
def sample(
    model: DA4Model,
    token: str,
    url: str = ...,
    multipliers: Optional[Dict[str, float]] = ...,
    option: Optional[DA4SamplerOption] = ...,
) -> DA4Result: ...
