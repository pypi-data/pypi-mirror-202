{"version":3,"file":"lib_index_js.e418362e6d45a39ce426.js","mappings":";;;;;;;;;;;;;;;;;;AAAyE;AAChC;AACwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA,oBAAoB,6EAA2B;AAC/C,oBAAoB,gFAA8B;AAClD,oBAAoB,qEAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oDAAY;AAC/C;AACA;AACA;AACA;AACA,mDAAmD,cAAc;AACjE,yBAAyB;AACzB;AACA,wBAAwB,mDAAW,CAAC,mDAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mDAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;AClHtB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,iDAAiD;AACjD,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,KAAK;AACL;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oFAAoF,QAAQ;AAC5F;AACA","sources":["webpack://jupyter-voice-comments/./lib/index.js","webpack://jupyter-voice-comments/./lib/utils.js"],"sourcesContent":["import { INotebookTracker, NotebookActions } from '@jupyterlab/notebook';\r\nimport { Widget } from '@lumino/widgets';\r\nimport { createModal, dragElement, openaiPrompt } from './utils';\r\n/**\r\n * Initialization data for the jupyter-voice-comments extension.\r\n */\r\nconst plugin = {\r\n    id: 'jupyter-voice-comments:plugin',\r\n    autoStart: true,\r\n    requires: [INotebookTracker],\r\n    activate: (app, notebookTracker) => {\r\n        console.log('JupyterLab extension jupyter-voice-comments is activated!');\r\n        // Web Speech API initialization\r\n        const SpeechRecognition = window.SpeechRecognition ||\r\n            window.webkitSpeechRecognition;\r\n        const recognition = new SpeechRecognition();\r\n        recognition.continuous = true;\r\n        let isRecording = false;\r\n        const toggleRecording = () => {\r\n            const button = document.getElementById('lm-VoiceWidget-button');\r\n            const buttonStyle = button.style;\r\n            const resetStyles = () => {\r\n                buttonStyle.backgroundColor = 'rgb(224, 224, 224)';\r\n                buttonStyle.outline = '2px solid rgb(224, 224, 224)';\r\n            };\r\n            const resetRecording = () => {\r\n                isRecording = false;\r\n                recognition.stop();\r\n                resetStyles();\r\n            };\r\n            if (isRecording) {\r\n                resetRecording();\r\n            }\r\n            else {\r\n                recognition.start();\r\n                isRecording = true;\r\n                buttonStyle.backgroundColor = 'rgb(228, 99, 99)';\r\n                buttonStyle.outline = '2px solid rgb(228, 99, 99)';\r\n            }\r\n        };\r\n        // creates a new command that inserts a comment and fetches a code snippet from openai based on the comment\r\n        app.commands.addCommand('jupyter-voice-comments:insert-comment', {\r\n            label: 'Insert Comment',\r\n            execute: (args) => {\r\n                const { comment } = args;\r\n                const current = notebookTracker.currentWidget;\r\n                if (current) {\r\n                    const notebook = current.content;\r\n                    NotebookActions.insertAbove(notebook);\r\n                    NotebookActions.changeCellType(notebook, 'markdown');\r\n                    NotebookActions.run(notebook);\r\n                    const cell = notebook.activeCell;\r\n                    if (cell) {\r\n                        cell.model.value.text = comment;\r\n                    }\r\n                    /***********************************************\r\n                     * Clean up the fetch request to openai below  *\r\n                     * I plan to make it so that the fetch request *\r\n                     * is made in a separate file                  *\r\n                     **********************************************/\r\n                    const url = 'https://q6ya2o2jm2.execute-api.us-east-2.amazonaws.com/default/jplext-voice-comments-openai';\r\n                    const prompt = openaiPrompt(comment);\r\n                    // async function that fetches a code snippet from openai based on the voice comment and creates a draggable modal with the code snippet\r\n                    const fetchOPENAI = async () => {\r\n                        const response = await fetch(url, {\r\n                            method: 'POST',\r\n                            body: JSON.stringify({ text: prompt })\r\n                        });\r\n                        const data = await response.json();\r\n                        dragElement(createModal(data.result));\r\n                    };\r\n                    fetchOPENAI();\r\n                    /************************************************\r\n                     * Add a loading spinner on the modal that is   *\r\n                     * removed when the fetch request is complete.  *\r\n                     * Create the function in a separate file.      *\r\n                     ************************************************/\r\n                }\r\n                else {\r\n                    console.log('No active notebook');\r\n                }\r\n            }\r\n        });\r\n        recognition.addEventListener('result', (event) => {\r\n            const last = event.results.length - 1;\r\n            const text = event.results[last][0].transcript;\r\n            app.commands.execute('jupyter-voice-comments:insert-comment', {\r\n                comment: text\r\n            });\r\n        });\r\n        /******************************************************\r\n         * Add a widget to the top of the JupyterLab window   *\r\n         * that includes a button to toggle voice recording   *\r\n         * on and off.                                        *\r\n         * I also need to include the code snippet in the     *\r\n         * widget. Also, add more user functionality to close *\r\n         * the widget and modify the code snippet.            *\r\n         ******************************************************/\r\n        const widget = new Widget();\r\n        widget.id = 'lm-VoiceWidget';\r\n        const button = document.createElement('button');\r\n        button.id = 'lm-VoiceWidget-button';\r\n        button.title = 'Toggle voice recording (Alt + V)';\r\n        button.addEventListener('click', toggleRecording);\r\n        document.addEventListener('keydown', (event) => {\r\n            if (event.altKey && event.key === 'v') {\r\n                toggleRecording();\r\n            }\r\n        });\r\n        console.log('PIZZA');\r\n        widget.node.appendChild(button);\r\n        app.shell.add(widget, 'top');\r\n    }\r\n};\r\nexport default plugin;\r\n","// function to create modal\r\nexport const createModal = (modalContent) => {\r\n    const relativeElement = document.getElementsByClassName('jp-Notebook')[0];\r\n    const modalContainer = document.createElement('div');\r\n    modalContainer.id = 'lm-VoiceWidget-modalContainer';\r\n    const modal = document.createElement('pre');\r\n    modal.id = 'lm-VoiceWidget-modal';\r\n    modal.textContent = modalContent !== null ? modalContent : '';\r\n    modal.tabIndex = 0; // Add tabindex to make modal focusable\r\n    modalContainer.appendChild(modal);\r\n    relativeElement.appendChild(modalContainer); // Append modal to activeCell\r\n    modal.focus(); // Focus on modal\r\n    modal.addEventListener('keydown', (event) => {\r\n        if (event.key === 'Escape') {\r\n            modal.remove();\r\n        }\r\n        if (event.ctrlKey && event.key === 'c') {\r\n            event.preventDefault();\r\n            const text = modal.textContent;\r\n            if (text) {\r\n                navigator.clipboard.writeText(text);\r\n            }\r\n        }\r\n    });\r\n    modal.addEventListener('mousedown', (event) => {\r\n        modal.focus(); // Give modal focus when clicked\r\n    });\r\n    dragElement(modalContainer);\r\n    return modalContainer;\r\n};\r\nexport const dragElement = (ele) => {\r\n    let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\r\n    ele.onmousedown = dragMouseDown;\r\n    function dragMouseDown(e) {\r\n        e = e || window.event;\r\n        e.preventDefault();\r\n        // get the mouse cursor position at startup:\r\n        pos3 = e.clientX;\r\n        pos4 = e.clientY;\r\n        document.onmouseup = closeDragElement;\r\n        // call a function whenever the cursor moves:\r\n        document.onmousemove = elementDrag;\r\n    }\r\n    function elementDrag(e) {\r\n        e = e || window.event;\r\n        e.preventDefault();\r\n        // calculate the new cursor position:\r\n        pos1 = pos3 - e.clientX;\r\n        pos2 = pos4 - e.clientY;\r\n        pos3 = e.clientX;\r\n        pos4 = e.clientY;\r\n        // set the element's new position:\r\n        ele.style.top = ele.offsetTop - pos2 + 'px';\r\n        ele.style.left = ele.offsetLeft - pos1 + 'px';\r\n    }\r\n    function closeDragElement() {\r\n        // stop moving when mouse button is released:\r\n        document.onmouseup = null;\r\n        document.onmousemove = null;\r\n    }\r\n};\r\nexport const openaiPrompt = (comment) => {\r\n    const prompt = `Give me a python code snippet based on the following comment: ${comment}. Do not include the comment in the code snippet. The code snippet should be a valid python code snippet. Do not include any examples of running the code in the snippet. Make sure that all new function definitions are on a new line, and follow proper Python formatting conventions. Make sure any helper functions that are needed for the code snippet are also definied in the snippet. This is for a JupyterLab extension that just uses the response from this prompt to display a code snippet modal. Users should be able to copy the code snippet from the modal and run it in their jupyter notebook.`;\r\n    return prompt;\r\n};\r\n"],"names":[],"sourceRoot":""}