Metadata-Version: 2.1
Name: lightning
Version: 1.9.5
Summary: Use Lightning Apps to build everything from production-ready, multi-cloud ML systems to simple research demos.
Home-page: https://github.com/Lightning-AI/lightning
Author: Lightning AI et al.
Author-email: pytorch@lightning.ai
License: Apache-2.0
Download-URL: https://github.com/Lightning-AI/lightning
Project-URL: Bug Tracker, https://github.com/Lightning-AI/lightning/issues
Project-URL: Documentation, https://lightning.ai/lightning-docs
Project-URL: Source Code, https://github.com/Lightning-AI/lightning
Keywords: deep learning,pytorch,AI
Platform: UNKNOWN
Classifier: Environment :: Console
Classifier: Natural Language :: English
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Jinja2 (<5.0)
Requires-Dist: PyYAML (<8.0)
Requires-Dist: PyYAML (<8.0,>=5.4)
Requires-Dist: arrow (<3.0,>=1.2.0)
Requires-Dist: beautifulsoup4 (<6.0,>=4.8.0)
Requires-Dist: click (<10.0)
Requires-Dist: croniter (<1.4.0,>=1.3.0)
Requires-Dist: dateutils (<2.0)
Requires-Dist: deepdiff (<8.0,>=5.7.0)
Requires-Dist: fastapi (<0.89.0)
Requires-Dist: fsspec (<2024.0,>=2022.5.0)
Requires-Dist: fsspec[http] (<2025.0,>2021.06.0)
Requires-Dist: inquirer (<5.0,>=2.10.0)
Requires-Dist: lightning-cloud (>=0.5.27)
Requires-Dist: lightning-utilities (<2.0,>=0.6.0.post0)
Requires-Dist: numpy (<3.0,>=1.17.2)
Requires-Dist: packaging
Requires-Dist: packaging (<25.0,>=17.1)
Requires-Dist: psutil (<7.0)
Requires-Dist: pydantic (<3.0)
Requires-Dist: requests (<4.0)
Requires-Dist: rich (<15.0)
Requires-Dist: starlette (<2.0)
Requires-Dist: starsessions (<2.0,>=1.2.1)
Requires-Dist: torch (<4.0,>=1.10.0)
Requires-Dist: torchmetrics (<2.0,>=0.7.0)
Requires-Dist: tqdm (<6.0,>=4.57.0)
Requires-Dist: traitlets (<7.0,>=5.3.0)
Requires-Dist: typing-extensions (<6.0,>=4.0.0)
Requires-Dist: urllib3 (<3.0)
Requires-Dist: uvicorn (<2.0)
Requires-Dist: websocket-client (<3.0)
Requires-Dist: websockets (<12.0)
Provides-Extra: all
Requires-Dist: aiohttp (<4.0,>=3.8.0) ; extra == 'all'
Requires-Dist: docker (<7.0,>=5.0.0) ; extra == 'all'
Requires-Dist: hydra-core (<2.0,>=1.0.5) ; extra == 'all'
Requires-Dist: jsonargparse[signatures] (<5.0,>=4.18.0) ; extra == 'all'
Requires-Dist: lightning-api-access (>=0.0.3) ; extra == 'all'
Requires-Dist: matplotlib (<4.0,>3.1) ; extra == 'all'
Requires-Dist: omegaconf (<3.0,>=2.0.5) ; extra == 'all'
Requires-Dist: panel (<1.0,>=0.12.7) ; extra == 'all'
Requires-Dist: pytorch-lightning (<3.0,>1.8.0) ; extra == 'all'
Requires-Dist: redis (<5.0,>=4.0.1) ; extra == 'all'
Requires-Dist: rich (!=10.15.0.a,<14.0,>=10.14.0) ; extra == 'all'
Requires-Dist: s3fs (<2023.0,>=2022.5.0) ; extra == 'all'
Requires-Dist: streamlit (<2.0,>=1.13.0) ; extra == 'all'
Requires-Dist: tensorboardX (<3.0,>=2.2) ; extra == 'all'
Provides-Extra: app-cloud
Requires-Dist: docker (<7.0,>=5.0.0) ; extra == 'app-cloud'
Requires-Dist: redis (<5.0,>=4.0.1) ; extra == 'app-cloud'
Requires-Dist: s3fs (<2023.0,>=2022.5.0) ; extra == 'app-cloud'
Provides-Extra: app-components
Requires-Dist: aiohttp (<4.0,>=3.8.0) ; extra == 'app-components'
Requires-Dist: lightning-api-access (>=0.0.3) ; extra == 'app-components'
Requires-Dist: pytorch-lightning (<3.0,>1.8.0) ; extra == 'app-components'
Provides-Extra: app-test
Requires-Dist: codecov (==2.1.12) ; extra == 'app-test'
Requires-Dist: coverage (==6.5.0) ; extra == 'app-test'
Requires-Dist: httpx ; extra == 'app-test'
Requires-Dist: playwright (==1.30.0) ; extra == 'app-test'
Requires-Dist: psutil ; extra == 'app-test'
Requires-Dist: pympler ; extra == 'app-test'
Requires-Dist: pytest-asyncio (==0.20.3) ; extra == 'app-test'
Requires-Dist: pytest-cov (==4.0.0) ; extra == 'app-test'
Requires-Dist: pytest-doctestplus (>=0.9.0) ; extra == 'app-test'
Requires-Dist: pytest-timeout (==2.1.0) ; extra == 'app-test'
Requires-Dist: pytest (==7.2.0) ; extra == 'app-test'
Requires-Dist: requests-mock ; extra == 'app-test'
Requires-Dist: setuptools (<66.0) ; extra == 'app-test'
Requires-Dist: sqlmodel ; extra == 'app-test'
Requires-Dist: trio (<1.0) ; extra == 'app-test'
Provides-Extra: app-ui
Requires-Dist: panel (<1.0,>=0.12.7) ; extra == 'app-ui'
Requires-Dist: streamlit (<2.0,>=1.13.0) ; extra == 'app-ui'
Provides-Extra: cloud
Requires-Dist: docker (<7.0,>=5.0.0) ; extra == 'cloud'
Requires-Dist: redis (<5.0,>=4.0.1) ; extra == 'cloud'
Requires-Dist: s3fs (<2023.0,>=2022.5.0) ; extra == 'cloud'
Provides-Extra: components
Requires-Dist: aiohttp (<4.0,>=3.8.0) ; extra == 'components'
Requires-Dist: lightning-api-access (>=0.0.3) ; extra == 'components'
Requires-Dist: pytorch-lightning (<3.0,>1.8.0) ; extra == 'components'
Provides-Extra: dev
Requires-Dist: aiohttp (<4.0,>=3.8.0) ; extra == 'dev'
Requires-Dist: click (==8.1.3) ; extra == 'dev'
Requires-Dist: cloudpickle (<3.0,>=1.3) ; extra == 'dev'
Requires-Dist: codecov (==2.1.12) ; extra == 'dev'
Requires-Dist: coverage (==6.5.0) ; extra == 'dev'
Requires-Dist: docker (<7.0,>=5.0.0) ; extra == 'dev'
Requires-Dist: fastapi (<1.0) ; extra == 'dev'
Requires-Dist: httpx ; extra == 'dev'
Requires-Dist: hydra-core (<2.0,>=1.0.5) ; extra == 'dev'
Requires-Dist: jsonargparse[signatures] (<5.0,>=4.18.0) ; extra == 'dev'
Requires-Dist: lightning-api-access (>=0.0.3) ; extra == 'dev'
Requires-Dist: matplotlib (<4.0,>3.1) ; extra == 'dev'
Requires-Dist: omegaconf (<3.0,>=2.0.5) ; extra == 'dev'
Requires-Dist: onnx (<2.0) ; extra == 'dev'
Requires-Dist: onnxruntime (<2.0) ; extra == 'dev'
Requires-Dist: pandas (<2.0,>1.0) ; extra == 'dev'
Requires-Dist: panel (<1.0,>=0.12.7) ; extra == 'dev'
Requires-Dist: playwright (==1.30.0) ; extra == 'dev'
Requires-Dist: pre-commit (==2.20.0) ; extra == 'dev'
Requires-Dist: protobuf (<=3.20.1) ; extra == 'dev'
Requires-Dist: psutil ; extra == 'dev'
Requires-Dist: psutil (<6.0) ; extra == 'dev'
Requires-Dist: pympler ; extra == 'dev'
Requires-Dist: pytest-asyncio (==0.20.3) ; extra == 'dev'
Requires-Dist: pytest-cov (==4.0.0) ; extra == 'dev'
Requires-Dist: pytest-doctestplus (>=0.9.0) ; extra == 'dev'
Requires-Dist: pytest-forked (==1.4.0) ; extra == 'dev'
Requires-Dist: pytest-rerunfailures (==10.3) ; extra == 'dev'
Requires-Dist: pytest-timeout (==2.1.0) ; extra == 'dev'
Requires-Dist: pytest (==7.2.0) ; extra == 'dev'
Requires-Dist: pytorch-lightning (<3.0,>1.8.0) ; extra == 'dev'
Requires-Dist: redis (<5.0,>=4.0.1) ; extra == 'dev'
Requires-Dist: requests-mock ; extra == 'dev'
Requires-Dist: rich (!=10.15.0.a,<14.0,>=10.14.0) ; extra == 'dev'
Requires-Dist: s3fs (<2023.0,>=2022.5.0) ; extra == 'dev'
Requires-Dist: scikit-learn (<2.0,>0.22.1) ; extra == 'dev'
Requires-Dist: setuptools (<66.0) ; extra == 'dev'
Requires-Dist: sqlmodel ; extra == 'dev'
Requires-Dist: streamlit (<2.0,>=1.13.0) ; extra == 'dev'
Requires-Dist: tensorboard (<3.0,>=2.9.1) ; extra == 'dev'
Requires-Dist: tensorboardX (<3.0,>=2.2) ; extra == 'dev'
Requires-Dist: trio (<1.0) ; extra == 'dev'
Requires-Dist: uvicorn (<1.0) ; extra == 'dev'
Provides-Extra: examples
Requires-Dist: gym[classic_control] (<1.0,>=0.17.0) ; extra == 'examples'
Requires-Dist: ipython[all] (<9.0) ; extra == 'examples'
Requires-Dist: torchmetrics (<1.0,>=0.10.0) ; extra == 'examples'
Requires-Dist: torchvision (<1.0,>=0.10.0) ; extra == 'examples'
Requires-Dist: torchvision (<1.0,>=0.11.1) ; extra == 'examples'
Provides-Extra: extra
Requires-Dist: aiohttp (<4.0,>=3.8.0) ; extra == 'extra'
Requires-Dist: docker (<7.0,>=5.0.0) ; extra == 'extra'
Requires-Dist: hydra-core (<2.0,>=1.0.5) ; extra == 'extra'
Requires-Dist: jsonargparse[signatures] (<5.0,>=4.18.0) ; extra == 'extra'
Requires-Dist: lightning-api-access (>=0.0.3) ; extra == 'extra'
Requires-Dist: matplotlib (<4.0,>3.1) ; extra == 'extra'
Requires-Dist: omegaconf (<3.0,>=2.0.5) ; extra == 'extra'
Requires-Dist: panel (<1.0,>=0.12.7) ; extra == 'extra'
Requires-Dist: pytorch-lightning (<3.0,>1.8.0) ; extra == 'extra'
Requires-Dist: redis (<5.0,>=4.0.1) ; extra == 'extra'
Requires-Dist: rich (!=10.15.0.a,<14.0,>=10.14.0) ; extra == 'extra'
Requires-Dist: s3fs (<2023.0,>=2022.5.0) ; extra == 'extra'
Requires-Dist: streamlit (<2.0,>=1.13.0) ; extra == 'extra'
Requires-Dist: tensorboardX (<3.0,>=2.2) ; extra == 'extra'
Provides-Extra: fabric-examples
Requires-Dist: torchmetrics (<1.0,>=0.10.0) ; extra == 'fabric-examples'
Requires-Dist: torchvision (<1.0,>=0.10.0) ; extra == 'fabric-examples'
Provides-Extra: fabric-strategies
Requires-Dist: deepspeed (<1.0,>=0.6.0) ; (python_version > "3.7" and platform_system != "Windows") and extra == 'fabric-strategies'
Provides-Extra: fabric-test
Requires-Dist: click (==8.1.3) ; extra == 'fabric-test'
Requires-Dist: codecov (==2.1.12) ; extra == 'fabric-test'
Requires-Dist: coverage (==6.5.0) ; extra == 'fabric-test'
Requires-Dist: pre-commit (==2.20.0) ; extra == 'fabric-test'
Requires-Dist: pytest-cov (==4.0.0) ; extra == 'fabric-test'
Requires-Dist: pytest (==7.2.0) ; extra == 'fabric-test'
Requires-Dist: tensorboardX (<3.0,>=2.2) ; extra == 'fabric-test'
Provides-Extra: pytorch-examples
Requires-Dist: gym[classic_control] (<1.0,>=0.17.0) ; extra == 'pytorch-examples'
Requires-Dist: ipython[all] (<9.0) ; extra == 'pytorch-examples'
Requires-Dist: torchmetrics (<1.0,>=0.10.0) ; extra == 'pytorch-examples'
Requires-Dist: torchvision (<1.0,>=0.11.1) ; extra == 'pytorch-examples'
Provides-Extra: pytorch-extra
Requires-Dist: hydra-core (<2.0,>=1.0.5) ; extra == 'pytorch-extra'
Requires-Dist: jsonargparse[signatures] (<5.0,>=4.18.0) ; extra == 'pytorch-extra'
Requires-Dist: matplotlib (<4.0,>3.1) ; extra == 'pytorch-extra'
Requires-Dist: omegaconf (<3.0,>=2.0.5) ; extra == 'pytorch-extra'
Requires-Dist: rich (!=10.15.0.a,<14.0,>=10.14.0) ; extra == 'pytorch-extra'
Requires-Dist: tensorboardX (<3.0,>=2.2) ; extra == 'pytorch-extra'
Provides-Extra: pytorch-strategies
Requires-Dist: colossalai (<1.0,>=0.2.0) ; extra == 'pytorch-strategies'
Requires-Dist: deepspeed (<1.0,>=0.6.0) ; extra == 'pytorch-strategies'
Requires-Dist: fairscale (<1.0,>=0.4.5) ; extra == 'pytorch-strategies'
Requires-Dist: horovod (!=0.24.0,<1.0,>=0.21.2) ; extra == 'pytorch-strategies'
Requires-Dist: hivemind (==1.1.5) ; (sys_platform == "linux") and extra == 'pytorch-strategies'
Provides-Extra: pytorch-test
Requires-Dist: cloudpickle (<3.0,>=1.3) ; extra == 'pytorch-test'
Requires-Dist: codecov (==2.1.12) ; extra == 'pytorch-test'
Requires-Dist: coverage (==6.5.0) ; extra == 'pytorch-test'
Requires-Dist: fastapi (<1.0) ; extra == 'pytorch-test'
Requires-Dist: onnx (<2.0) ; extra == 'pytorch-test'
Requires-Dist: onnxruntime (<2.0) ; extra == 'pytorch-test'
Requires-Dist: pandas (<2.0,>1.0) ; extra == 'pytorch-test'
Requires-Dist: pre-commit (==2.20.0) ; extra == 'pytorch-test'
Requires-Dist: protobuf (<=3.20.1) ; extra == 'pytorch-test'
Requires-Dist: psutil (<6.0) ; extra == 'pytorch-test'
Requires-Dist: pytest-cov (==4.0.0) ; extra == 'pytorch-test'
Requires-Dist: pytest-forked (==1.4.0) ; extra == 'pytorch-test'
Requires-Dist: pytest-rerunfailures (==10.3) ; extra == 'pytorch-test'
Requires-Dist: pytest (==7.2.0) ; extra == 'pytorch-test'
Requires-Dist: scikit-learn (<2.0,>0.22.1) ; extra == 'pytorch-test'
Requires-Dist: tensorboard (<3.0,>=2.9.1) ; extra == 'pytorch-test'
Requires-Dist: uvicorn (<1.0) ; extra == 'pytorch-test'
Provides-Extra: strategies
Requires-Dist: colossalai (<1.0,>=0.2.0) ; extra == 'strategies'
Requires-Dist: deepspeed (<1.0,>=0.6.0) ; extra == 'strategies'
Requires-Dist: fairscale (<1.0,>=0.4.5) ; extra == 'strategies'
Requires-Dist: horovod (!=0.24.0,<1.0,>=0.21.2) ; extra == 'strategies'
Requires-Dist: deepspeed (<1.0,>=0.6.0) ; (python_version > "3.7" and platform_system != "Windows") and extra == 'strategies'
Requires-Dist: hivemind (==1.1.5) ; (sys_platform == "linux") and extra == 'strategies'
Provides-Extra: test
Requires-Dist: click (==8.1.3) ; extra == 'test'
Requires-Dist: cloudpickle (<3.0,>=1.3) ; extra == 'test'
Requires-Dist: codecov (==2.1.12) ; extra == 'test'
Requires-Dist: coverage (==6.5.0) ; extra == 'test'
Requires-Dist: fastapi (<1.0) ; extra == 'test'
Requires-Dist: httpx ; extra == 'test'
Requires-Dist: onnx (<2.0) ; extra == 'test'
Requires-Dist: onnxruntime (<2.0) ; extra == 'test'
Requires-Dist: pandas (<2.0,>1.0) ; extra == 'test'
Requires-Dist: playwright (==1.30.0) ; extra == 'test'
Requires-Dist: pre-commit (==2.20.0) ; extra == 'test'
Requires-Dist: protobuf (<=3.20.1) ; extra == 'test'
Requires-Dist: psutil ; extra == 'test'
Requires-Dist: psutil (<6.0) ; extra == 'test'
Requires-Dist: pympler ; extra == 'test'
Requires-Dist: pytest-asyncio (==0.20.3) ; extra == 'test'
Requires-Dist: pytest-cov (==4.0.0) ; extra == 'test'
Requires-Dist: pytest-doctestplus (>=0.9.0) ; extra == 'test'
Requires-Dist: pytest-forked (==1.4.0) ; extra == 'test'
Requires-Dist: pytest-rerunfailures (==10.3) ; extra == 'test'
Requires-Dist: pytest-timeout (==2.1.0) ; extra == 'test'
Requires-Dist: pytest (==7.2.0) ; extra == 'test'
Requires-Dist: requests-mock ; extra == 'test'
Requires-Dist: scikit-learn (<2.0,>0.22.1) ; extra == 'test'
Requires-Dist: setuptools (<66.0) ; extra == 'test'
Requires-Dist: sqlmodel ; extra == 'test'
Requires-Dist: tensorboard (<3.0,>=2.9.1) ; extra == 'test'
Requires-Dist: tensorboardX (<3.0,>=2.2) ; extra == 'test'
Requires-Dist: trio (<1.0) ; extra == 'test'
Requires-Dist: uvicorn (<1.0) ; extra == 'test'
Provides-Extra: ui
Requires-Dist: panel (<1.0,>=0.12.7) ; extra == 'ui'
Requires-Dist: streamlit (<2.0,>=1.13.0) ; extra == 'ui'

<div align="center">

**NEWS: PyTorch Lightning has been renamed Lightning!**

<img src="https://github.com/likethecognac/images/blob/main/Icon_Color_WhiteBolt.png" width="85px">

**The Deep Learning framework to train, deploy, and ship AI products Lightning fast.**

______________________________________________________________________

<p align="center">
  <a href="https://www.lightning.ai/">Lightning Gallery</a> •
  <a href="#key-features">Key Features</a> •
  <a href="#how-to-use">How To Use</a> •
  <a href="https://lightning.ai/docs/pytorch/LTS/">Docs</a> •
  <a href="#examples">Examples</a> •
  <a href="#community">Community</a> •
  <a href="https://lightning.ai/docs/pytorch/LTS/generated/CONTRIBUTING.html">Contribute</a> •
  <a href="#license">License</a>
</p>

<!-- DO NOT ADD CONDA DOWNLOADS... README CHANGES MUST BE APPROVED BY EDEN OR WILL -->

[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytorch-lightning)](https://pypi.org/project/pytorch-lightning/)
[![PyPI Status](https://badge.fury.io/py/pytorch-lightning.svg)](https://badge.fury.io/py/pytorch-lightning)
[![PyPI Status](https://pepy.tech/badge/pytorch-lightning)](https://pepy.tech/project/pytorch-lightning)
[![Conda](https://img.shields.io/conda/v/conda-forge/pytorch-lightning?label=conda&color=success)](https://anaconda.org/conda-forge/pytorch-lightning)
[![DockerHub](https://img.shields.io/docker/pulls/pytorchlightning/pytorch_lightning.svg)](https://hub.docker.com/r/pytorchlightning/pytorch_lightning)
[![codecov](https://codecov.io/gh/Lightning-AI/lightning/release/1.9.5/graph/badge.svg?token=SmzX8mnKlA)](https://codecov.io/gh/Lightning-AI/lightning)

[![ReadTheDocs](https://readthedocs.org/projects/pytorch-lightning/badge/?version=1.9.5)](https://pytorch-lightning.readthedocs.io/en/1.9.5)
[![Discord](https://img.shields.io/discord/1077906959069626439?style=plastic)](https://discord.gg/VptPCZkGNa)
[![license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/Lightning-AI/lightning/blob/master/LICENSE)

<!--
[![CodeFactor](https://www.codefactor.io/repository/github/Lightning-AI/lightning/badge)](https://www.codefactor.io/repository/github/Lightning-AI/lightning)
-->

</div>

###### \*Codecov is > 90%+ but build delays may show less

______________________________________________________________________

## PyTorch Lightning is just organized PyTorch

Lightning disentangles PyTorch code to decouple the science from the engineering.
![PT to PL](docs/source-pytorch/_static/images/general/pl_quick_start_full_compressed.gif)

## Build AI products with Lightning Apps

Once you're done building models, publish a paper demo or build a full production end-to-end ML system with Lightning Apps. Lightning Apps remove the cloud infrastructure boilerplate so you can focus on solving the research or business problems. Lightning Apps can run on the Lightning Cloud, your own cluster or a private cloud.

[Browse available Lightning apps here](https://lightning.ai/)

<div align="center">
    <img src="https://pl-flash-data.s3.amazonaws.com/assets_lightning/docs/images/logos/lightning-apps-teaser.png" width="80%">
</div>

### [Learn more about Lightning Apps](src/lightning_app/README.md)

______________________________________________________________________

## Lightning Design Philosophy

Lightning structures PyTorch code with these principles:

<div align="center">
  <img src="https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/philosophies.jpg" max-height="250px">
</div>

Lightning forces the following structure to your code which makes it reusable and shareable:

- Research code (the LightningModule).
- Engineering code (you delete, and is handled by the Trainer).
- Non-essential research code (logging, etc... this goes in Callbacks).
- Data (use PyTorch DataLoaders or organize them into a LightningDataModule).

Once you do this, you can train on multiple-GPUs, TPUs, CPUs and even in 16-bit precision without changing your code!

[Get started in just 15 minutes](https://lightning.ai/docs/pytorch/LTS/starter/introduction.html)

______________________________________________________________________

## Continuous Integration

Lightning is rigorously tested across multiple CPUs, GPUs, TPUs, IPUs, and HPUs and against major Python and PyTorch versions.

<details>
  <summary>Current build statuses</summary>

<center>

|   System / PyTorch ver.    |                                                                                                               1.10                                                                                                                |                                                                                                       1.12                                                                                                       |
| :------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |
|  Linux py3.7 \[GPUs\*\*\]  |                                                                                                                 -                                                                                                                 |                                                                                                        -                                                                                                         |
| Linux py3.7 \[TPUs\*\*\*\] |                                                                                                                 -                                                                                                                 |                                                                                                        -                                                                                                         |
|    Linux py3.8 \[IPUs\]    |                                                                                                                 -                                                                                                                 |                                                                                                        -                                                                                                         |
|    Linux py3.8 \[HPUs\]    | [![Build Status](https://dev.azure.com/Lightning-AI/lightning/_apis/build/status/pytorch-lightning%20%28HPUs%29?branchName=refs%2Ftags%2F1.9.5)](https://dev.azure.com/Lightning-AI/lightning/_build/latest?definitionId=26&branchName=master) |                                                                                                        -                                                                                                         |
|      Linux py3.{7,9}       |                                                                                                                 -                                                                                                                 | [![Test](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg?tag=1.9.5)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml) |
|       OSX py3.{7,9}        |                                                                                                                 -                                                                                                                 | [![Test](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg?tag=1.9.5)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml) |
|     Windows py3.{7,9}      |                                                                                                                 -                                                                                                                 | [![Test](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg?tag=1.9.5)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml) |

- _\*\* tests run on two NVIDIA P100_
- _\*\*\* tests run on Google GKE TPUv2/3. TPU py3.7 means we support Colab and Kaggle env._

</center>
</details>

______________________________________________________________________

## How To Use

### Step 0: Install

Simple installation from PyPI

```bash
pip install pytorch-lightning
```

<!--  -->

### Step 1: Add these imports

```python
import os
import torch
from torch import nn
import torch.nn.functional as F
from torchvision.datasets import MNIST
from torch.utils.data import DataLoader, random_split
from torchvision import transforms
import pytorch_lightning as pl
```

### Step 2: Define a LightningModule (nn.Module subclass)

A LightningModule defines a full *system* (ie: a GAN, autoencoder, BERT or a simple Image Classifier).

```python
class LitAutoEncoder(pl.LightningModule):
    def __init__(self):
        super().__init__()
        self.encoder = nn.Sequential(nn.Linear(28 * 28, 128), nn.ReLU(), nn.Linear(128, 3))
        self.decoder = nn.Sequential(nn.Linear(3, 128), nn.ReLU(), nn.Linear(128, 28 * 28))

    def forward(self, x):
        # in lightning, forward defines the prediction/inference actions
        embedding = self.encoder(x)
        return embedding

    def training_step(self, batch, batch_idx):
        # training_step defines the train loop. It is independent of forward
        x, y = batch
        x = x.view(x.size(0), -1)
        z = self.encoder(x)
        x_hat = self.decoder(z)
        loss = F.mse_loss(x_hat, x)
        self.log("train_loss", loss)
        return loss

    def configure_optimizers(self):
        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)
        return optimizer
```

**Note: Training_step defines the training loop. Forward defines how the LightningModule behaves during inference/prediction.**

### Step 3: Train!

```python
dataset = MNIST(os.getcwd(), download=True, transform=transforms.ToTensor())
train, val = random_split(dataset, [55000, 5000])

autoencoder = LitAutoEncoder()
trainer = pl.Trainer()
trainer.fit(autoencoder, DataLoader(train), DataLoader(val))
```

## Advanced features

Lightning has over [40+ advanced features](https://lightning.ai/docs/pytorch/LTS/common/trainer.html#trainer-flags) designed for professional AI research at scale.

Here are some examples:

<div align="center">
  <img src="https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/features_2.jpg" max-height="600px">
</div>

<details>
  <summary>Highlighted feature code snippets</summary>

```python
# 8 GPUs
# no code changes needed
trainer = Trainer(max_epochs=1, accelerator="gpu", devices=8)

# 256 GPUs
trainer = Trainer(max_epochs=1, accelerator="gpu", devices=8, num_nodes=32)
```

<summary>Train on TPUs without code changes</summary>

```python
# no code changes needed
trainer = Trainer(accelerator="tpu", devices=8)
```

<summary>16-bit precision</summary>

```python
# no code changes needed
trainer = Trainer(precision=16)
```

<summary>Experiment managers</summary>

```python
from pytorch_lightning import loggers

# tensorboard
trainer = Trainer(logger=TensorBoardLogger("logs/"))

# weights and biases
trainer = Trainer(logger=loggers.WandbLogger())

# comet
trainer = Trainer(logger=loggers.CometLogger())

# mlflow
trainer = Trainer(logger=loggers.MLFlowLogger())

# neptune
trainer = Trainer(logger=loggers.NeptuneLogger())

# ... and dozens more
```

<summary>EarlyStopping</summary>

```python
es = EarlyStopping(monitor="val_loss")
trainer = Trainer(callbacks=[es])
```

<summary>Checkpointing</summary>

```python
checkpointing = ModelCheckpoint(monitor="val_loss")
trainer = Trainer(callbacks=[checkpointing])
```

<summary>Export to torchscript (JIT) (production use)</summary>

```python
# torchscript
autoencoder = LitAutoEncoder()
torch.jit.save(autoencoder.to_torchscript(), "model.pt")
```

<summary>Export to ONNX (production use)</summary>

```python
autoencoder = LitAutoEncoder()
input_sample = torch.randn((1, 64))
with tempfile.NamedTemporaryFile(suffix=".onnx", delete=False) as tmpfile:
    autoencoder.to_onnx(tmpfile.name, input_sample, export_params=True)
```

</details>

### Pro-level control of training loops (advanced users)

For complex/professional level work, you have optional full control of the training loop and optimizers.

```python
class LitAutoEncoder(pl.LightningModule):
    def __init__(self):
        super().__init__()
        self.automatic_optimization = False

    def training_step(self, batch, batch_idx):
        # access your optimizers with use_pl_optimizer=False. Default is True
        opt_a, opt_b = self.optimizers(use_pl_optimizer=True)

        loss_a = ...
        self.manual_backward(loss_a, opt_a)
        opt_a.step()
        opt_a.zero_grad()

        loss_b = ...
        self.manual_backward(loss_b, opt_b, retain_graph=True)
        self.manual_backward(loss_b, opt_b)
        opt_b.step()
        opt_b.zero_grad()
```

______________________________________________________________________

## Advantages over unstructured PyTorch

- Models become hardware agnostic
- Code is clear to read because engineering code is abstracted away
- Easier to reproduce
- Make fewer mistakes because lightning handles the tricky engineering
- Keeps all the flexibility (LightningModules are still PyTorch modules), but removes a ton of boilerplate
- Lightning has dozens of integrations with popular machine learning tools.
- [Tested rigorously with every new PR](https://github.com/Lightning-AI/lightning/tree/master/tests). We test every combination of PyTorch and Python supported versions, every OS, multi GPUs and even TPUs.
- Minimal running speed overhead (about 300 ms per epoch compared with pure PyTorch).

______________________________________________________________________

## Examples

###### Self-supervised Learning

- [CPC transforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#cpc-transforms)
- [Moco v2 tranforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#moco-v2-transforms)
- [SimCLR transforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#simclr-transforms)

###### Convolutional Architectures

- [GPT-2](https://lightning-bolts.readthedocs.io/en/stable/models/convolutional.html#gpt-2)
- [UNet](https://lightning-bolts.readthedocs.io/en/stable/models/convolutional.html#unet)

###### Reinforcement Learning

- [DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#dqn-loss)
- [Double DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#double-dqn-loss)
- [Per DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#per-dqn-loss)

###### GANs

- [Basic GAN](https://lightning-bolts.readthedocs.io/en/stable/models/gans.html#basic-gan)
- [DCGAN](https://lightning-bolts.readthedocs.io/en/stable/models/gans.html#dcgan)

###### Classic ML

- [Logistic Regression](https://lightning-bolts.readthedocs.io/en/stable/models/classic_ml.html#logistic-regression)
- [Linear Regression](https://lightning-bolts.readthedocs.io/en/stable/models/classic_ml.html#linear-regression)

______________________________________________________________________

## Community

The lightning community is maintained by

- [10+ core contributors](https://lightning.ai/docs/pytorch/LTS/governance.html) who are all a mix of professional engineers, Research Scientists, and Ph.D. students from top AI labs.
- 590+ active community contributors.

Want to help us build Lightning and reduce boilerplate for thousands of researchers? [Learn how to make your first contribution here](https://lightning.ai/docs/pytorch/LTS/generated/CONTRIBUTING.html)

Lightning is also part of the [PyTorch ecosystem](https://pytorch.org/ecosystem/) which requires projects to have solid testing, documentation and support.

### Asking for help

If you have any questions please:

1. [Read the docs](https://lightning.ai/docs/pytorch/latest).
1. [Search through existing Discussions](https://github.com/Lightning-AI/lightning/discussions), or [add a new question](https://github.com/Lightning-AI/lightning/discussions/new)
1. [Join our slack](https://www.pytorchlightning.ai/community).


