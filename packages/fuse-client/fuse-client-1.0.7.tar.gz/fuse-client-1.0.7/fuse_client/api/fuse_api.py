"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fuse_client.api_client import ApiClient, Endpoint as _Endpoint
from fuse_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fuse_client.model.create_asset_report_request import CreateAssetReportRequest
from fuse_client.model.create_asset_report_response import CreateAssetReportResponse
from fuse_client.model.create_link_token_request import CreateLinkTokenRequest
from fuse_client.model.create_link_token_response import CreateLinkTokenResponse
from fuse_client.model.create_session_request import CreateSessionRequest
from fuse_client.model.create_session_response import CreateSessionResponse
from fuse_client.model.delete_financial_connection_response import DeleteFinancialConnectionResponse
from fuse_client.model.exchange_financial_connections_public_token_request import ExchangeFinancialConnectionsPublicTokenRequest
from fuse_client.model.exchange_financial_connections_public_token_response import ExchangeFinancialConnectionsPublicTokenResponse
from fuse_client.model.get_asset_report_request import GetAssetReportRequest
from fuse_client.model.get_asset_report_response import GetAssetReportResponse
from fuse_client.model.get_entity_response import GetEntityResponse
from fuse_client.model.get_financial_connection_response import GetFinancialConnectionResponse
from fuse_client.model.get_financial_connections_account_details_request import GetFinancialConnectionsAccountDetailsRequest
from fuse_client.model.get_financial_connections_account_details_response import GetFinancialConnectionsAccountDetailsResponse
from fuse_client.model.get_financial_connections_accounts_request import GetFinancialConnectionsAccountsRequest
from fuse_client.model.get_financial_connections_accounts_response import GetFinancialConnectionsAccountsResponse
from fuse_client.model.get_financial_connections_balance_request import GetFinancialConnectionsBalanceRequest
from fuse_client.model.get_financial_connections_balance_response import GetFinancialConnectionsBalanceResponse
from fuse_client.model.get_financial_connections_owners_request import GetFinancialConnectionsOwnersRequest
from fuse_client.model.get_financial_connections_owners_response import GetFinancialConnectionsOwnersResponse
from fuse_client.model.get_financial_connections_transactions_request import GetFinancialConnectionsTransactionsRequest
from fuse_client.model.get_financial_connections_transactions_response import GetFinancialConnectionsTransactionsResponse
from fuse_client.model.get_financial_institution_response import GetFinancialInstitutionResponse
from fuse_client.model.get_investment_holdings_request import GetInvestmentHoldingsRequest
from fuse_client.model.get_investment_holdings_response import GetInvestmentHoldingsResponse
from fuse_client.model.get_investment_transactions_request import GetInvestmentTransactionsRequest
from fuse_client.model.get_investment_transactions_response import GetInvestmentTransactionsResponse
from fuse_client.model.get_liabilities_request import GetLiabilitiesRequest
from fuse_client.model.get_liabilities_response import GetLiabilitiesResponse
from fuse_client.model.migrate_financial_connections_token_request import MigrateFinancialConnectionsTokenRequest
from fuse_client.model.migrate_financial_connections_token_response import MigrateFinancialConnectionsTokenResponse
from fuse_client.model.refresh_asset_report_request import RefreshAssetReportRequest
from fuse_client.model.sync_financial_connections_data_response import SyncFinancialConnectionsDataResponse


class FuseApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_asset_report_endpoint = _Endpoint(
            settings={
                'response_type': (CreateAssetReportResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/asset_report/create',
                'operation_id': 'create_asset_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_asset_report_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_asset_report_request':
                        (CreateAssetReportRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_asset_report_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_link_token_endpoint = _Endpoint(
            settings={
                'response_type': (CreateLinkTokenResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/link/token',
                'operation_id': 'create_link_token',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_link_token_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_link_token_request':
                        (CreateLinkTokenRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_link_token_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_session_endpoint = _Endpoint(
            settings={
                'response_type': (CreateSessionResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/session',
                'operation_id': 'create_session',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_session_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_session_request':
                        (CreateSessionRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_session_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_financial_connection_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteFinancialConnectionResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/{financial_connection_id_to_delete}',
                'operation_id': 'delete_financial_connection',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'financial_connection_id_to_delete',
                ],
                'required': [
                    'financial_connection_id_to_delete',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'financial_connection_id_to_delete':
                        (str,),
                },
                'attribute_map': {
                    'financial_connection_id_to_delete': 'financial_connection_id_to_delete',
                },
                'location_map': {
                    'financial_connection_id_to_delete': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.exchange_financial_connections_public_token_endpoint = _Endpoint(
            settings={
                'response_type': (ExchangeFinancialConnectionsPublicTokenResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/public_token/exchange',
                'operation_id': 'exchange_financial_connections_public_token',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'exchange_financial_connections_public_token_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exchange_financial_connections_public_token_request':
                        (ExchangeFinancialConnectionsPublicTokenRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'exchange_financial_connections_public_token_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_asset_report_endpoint = _Endpoint(
            settings={
                'response_type': (GetAssetReportResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/asset_report',
                'operation_id': 'get_asset_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_asset_report_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_asset_report_request':
                        (GetAssetReportRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_asset_report_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_entity_endpoint = _Endpoint(
            settings={
                'response_type': (GetEntityResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/entities/{entity_id}',
                'operation_id': 'get_entity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                ],
                'required': [
                    'entity_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                },
                'attribute_map': {
                    'entity_id': 'entity_id',
                },
                'location_map': {
                    'entity_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_financial_connection_endpoint = _Endpoint(
            settings={
                'response_type': (GetFinancialConnectionResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/{financial_connection_id}',
                'operation_id': 'get_financial_connection',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'financial_connection_id',
                ],
                'required': [
                    'financial_connection_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'financial_connection_id':
                        (str,),
                },
                'attribute_map': {
                    'financial_connection_id': 'financial_connection_id',
                },
                'location_map': {
                    'financial_connection_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_financial_connections_account_details_endpoint = _Endpoint(
            settings={
                'response_type': (GetFinancialConnectionsAccountDetailsResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/accounts/details',
                'operation_id': 'get_financial_connections_account_details',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_financial_connections_account_details_request',
                ],
                'required': [
                    'get_financial_connections_account_details_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_financial_connections_account_details_request':
                        (GetFinancialConnectionsAccountDetailsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_financial_connections_account_details_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_financial_connections_accounts_endpoint = _Endpoint(
            settings={
                'response_type': (GetFinancialConnectionsAccountsResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/accounts',
                'operation_id': 'get_financial_connections_accounts',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_financial_connections_accounts_request',
                ],
                'required': [
                    'get_financial_connections_accounts_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_financial_connections_accounts_request':
                        (GetFinancialConnectionsAccountsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_financial_connections_accounts_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_financial_connections_balances_endpoint = _Endpoint(
            settings={
                'response_type': (GetFinancialConnectionsBalanceResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/balances',
                'operation_id': 'get_financial_connections_balances',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_financial_connections_balance_request',
                ],
                'required': [
                    'get_financial_connections_balance_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_financial_connections_balance_request':
                        (GetFinancialConnectionsBalanceRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_financial_connections_balance_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_financial_connections_owners_endpoint = _Endpoint(
            settings={
                'response_type': (GetFinancialConnectionsOwnersResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/owners',
                'operation_id': 'get_financial_connections_owners',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_financial_connections_owners_request',
                ],
                'required': [
                    'get_financial_connections_owners_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_financial_connections_owners_request':
                        (GetFinancialConnectionsOwnersRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_financial_connections_owners_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_financial_connections_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (GetFinancialConnectionsTransactionsResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/transactions',
                'operation_id': 'get_financial_connections_transactions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_financial_connections_transactions_request',
                ],
                'required': [
                    'get_financial_connections_transactions_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_financial_connections_transactions_request':
                        (GetFinancialConnectionsTransactionsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_financial_connections_transactions_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_financial_institution_endpoint = _Endpoint(
            settings={
                'response_type': (GetFinancialInstitutionResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/institutions/{institution_id}',
                'operation_id': 'get_financial_institution',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'institution_id',
                ],
                'required': [
                    'institution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'institution_id':
                        (str,),
                },
                'attribute_map': {
                    'institution_id': 'institution_id',
                },
                'location_map': {
                    'institution_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_investment_holdings_endpoint = _Endpoint(
            settings={
                'response_type': (GetInvestmentHoldingsResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/investments/holdings',
                'operation_id': 'get_investment_holdings',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_investment_holdings_request',
                ],
                'required': [
                    'get_investment_holdings_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_investment_holdings_request':
                        (GetInvestmentHoldingsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_investment_holdings_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_investment_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (GetInvestmentTransactionsResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/investments/transactions',
                'operation_id': 'get_investment_transactions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_investment_transactions_request',
                ],
                'required': [
                    'get_investment_transactions_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_investment_transactions_request':
                        (GetInvestmentTransactionsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_investment_transactions_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.migrate_financial_connection_endpoint = _Endpoint(
            settings={
                'response_type': (MigrateFinancialConnectionsTokenResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/migrate',
                'operation_id': 'migrate_financial_connection',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'migrate_financial_connections_token_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'migrate_financial_connections_token_request':
                        (MigrateFinancialConnectionsTokenRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'migrate_financial_connections_token_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.refresh_asset_report_endpoint = _Endpoint(
            settings={
                'response_type': (CreateAssetReportResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/asset_report/refresh',
                'operation_id': 'refresh_asset_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'refresh_asset_report_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'refresh_asset_report_request':
                        (RefreshAssetReportRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'refresh_asset_report_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sync_financial_connections_data_endpoint = _Endpoint(
            settings={
                'response_type': (SyncFinancialConnectionsDataResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/sync',
                'operation_id': 'sync_financial_connections_data',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.v1_financial_connections_liabilities_post_endpoint = _Endpoint(
            settings={
                'response_type': (GetLiabilitiesResponse,),
                'auth': [
                    'fuseApiKey',
                    'fuseClientId'
                ],
                'endpoint_path': '/v1/financial_connections/liabilities',
                'operation_id': 'v1_financial_connections_liabilities_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_liabilities_request',
                ],
                'required': [
                    'get_liabilities_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_liabilities_request':
                        (GetLiabilitiesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_liabilities_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_asset_report(
        self,
        **kwargs
    ):
        """create_asset_report  # noqa: E501

        Use this endpoint to generate an Asset Report for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_asset_report(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            create_asset_report_request (CreateAssetReportRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateAssetReportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.create_asset_report_endpoint.call_with_http_info(**kwargs)

    def create_link_token(
        self,
        **kwargs
    ):
        """create_link_token  # noqa: E501

        Create a link token to start the process of a user connecting to a specific financial institution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_link_token(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            create_link_token_request (CreateLinkTokenRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateLinkTokenResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.create_link_token_endpoint.call_with_http_info(**kwargs)

    def create_session(
        self,
        **kwargs
    ):
        """create_session  # noqa: E501

        Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_session(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            create_session_request (CreateSessionRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateSessionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.create_session_endpoint.call_with_http_info(**kwargs)

    def delete_financial_connection(
        self,
        financial_connection_id_to_delete,
        **kwargs
    ):
        """Delete a financial connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_financial_connection(financial_connection_id_to_delete, async_req=True)
        >>> result = thread.get()

        Args:
            financial_connection_id_to_delete (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteFinancialConnectionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['financial_connection_id_to_delete'] = \
            financial_connection_id_to_delete
        return self.delete_financial_connection_endpoint.call_with_http_info(**kwargs)

    def exchange_financial_connections_public_token(
        self,
        **kwargs
    ):
        """exchange_financial_connections_public_token  # noqa: E501

        API to exchange a public token for an access token and financial connection id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.exchange_financial_connections_public_token(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            exchange_financial_connections_public_token_request (ExchangeFinancialConnectionsPublicTokenRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ExchangeFinancialConnectionsPublicTokenResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.exchange_financial_connections_public_token_endpoint.call_with_http_info(**kwargs)

    def get_asset_report(
        self,
        **kwargs
    ):
        """get_asset_report  # noqa: E501

        Retrieves the Asset Report in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_report(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            get_asset_report_request (GetAssetReportRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetAssetReportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_asset_report_endpoint.call_with_http_info(**kwargs)

    def get_entity(
        self,
        entity_id,
        **kwargs
    ):
        """Get entity  # noqa: E501

        An entity is automatically created after a successful connection. The id of the entity is what is set when calling the 'create session' endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_entity(entity_id, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetEntityResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['entity_id'] = \
            entity_id
        return self.get_entity_endpoint.call_with_http_info(**kwargs)

    def get_financial_connection(
        self,
        financial_connection_id,
        **kwargs
    ):
        """Get financial connection details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_financial_connection(financial_connection_id, async_req=True)
        >>> result = thread.get()

        Args:
            financial_connection_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetFinancialConnectionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['financial_connection_id'] = \
            financial_connection_id
        return self.get_financial_connection_endpoint.call_with_http_info(**kwargs)

    def get_financial_connections_account_details(
        self,
        get_financial_connections_account_details_request,
        **kwargs
    ):
        """Get account details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_financial_connections_account_details(get_financial_connections_account_details_request, async_req=True)
        >>> result = thread.get()

        Args:
            get_financial_connections_account_details_request (GetFinancialConnectionsAccountDetailsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetFinancialConnectionsAccountDetailsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_financial_connections_account_details_request'] = \
            get_financial_connections_account_details_request
        return self.get_financial_connections_account_details_endpoint.call_with_http_info(**kwargs)

    def get_financial_connections_accounts(
        self,
        get_financial_connections_accounts_request,
        **kwargs
    ):
        """Get accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_financial_connections_accounts(get_financial_connections_accounts_request, async_req=True)
        >>> result = thread.get()

        Args:
            get_financial_connections_accounts_request (GetFinancialConnectionsAccountsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetFinancialConnectionsAccountsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_financial_connections_accounts_request'] = \
            get_financial_connections_accounts_request
        return self.get_financial_connections_accounts_endpoint.call_with_http_info(**kwargs)

    def get_financial_connections_balances(
        self,
        get_financial_connections_balance_request,
        **kwargs
    ):
        """Get balances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_financial_connections_balances(get_financial_connections_balance_request, async_req=True)
        >>> result = thread.get()

        Args:
            get_financial_connections_balance_request (GetFinancialConnectionsBalanceRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetFinancialConnectionsBalanceResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_financial_connections_balance_request'] = \
            get_financial_connections_balance_request
        return self.get_financial_connections_balances_endpoint.call_with_http_info(**kwargs)

    def get_financial_connections_owners(
        self,
        get_financial_connections_owners_request,
        **kwargs
    ):
        """Get account owners  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_financial_connections_owners(get_financial_connections_owners_request, async_req=True)
        >>> result = thread.get()

        Args:
            get_financial_connections_owners_request (GetFinancialConnectionsOwnersRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetFinancialConnectionsOwnersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_financial_connections_owners_request'] = \
            get_financial_connections_owners_request
        return self.get_financial_connections_owners_endpoint.call_with_http_info(**kwargs)

    def get_financial_connections_transactions(
        self,
        get_financial_connections_transactions_request,
        **kwargs
    ):
        """Get transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_financial_connections_transactions(get_financial_connections_transactions_request, async_req=True)
        >>> result = thread.get()

        Args:
            get_financial_connections_transactions_request (GetFinancialConnectionsTransactionsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetFinancialConnectionsTransactionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_financial_connections_transactions_request'] = \
            get_financial_connections_transactions_request
        return self.get_financial_connections_transactions_endpoint.call_with_http_info(**kwargs)

    def get_financial_institution(
        self,
        institution_id,
        **kwargs
    ):
        """Get a financial institution  # noqa: E501

        Receive metadata for a financial institution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_financial_institution(institution_id, async_req=True)
        >>> result = thread.get()

        Args:
            institution_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetFinancialInstitutionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['institution_id'] = \
            institution_id
        return self.get_financial_institution_endpoint.call_with_http_info(**kwargs)

    def get_investment_holdings(
        self,
        get_investment_holdings_request,
        **kwargs
    ):
        """Get investment holdings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_investment_holdings(get_investment_holdings_request, async_req=True)
        >>> result = thread.get()

        Args:
            get_investment_holdings_request (GetInvestmentHoldingsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetInvestmentHoldingsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_investment_holdings_request'] = \
            get_investment_holdings_request
        return self.get_investment_holdings_endpoint.call_with_http_info(**kwargs)

    def get_investment_transactions(
        self,
        get_investment_transactions_request,
        **kwargs
    ):
        """Get investment transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_investment_transactions(get_investment_transactions_request, async_req=True)
        >>> result = thread.get()

        Args:
            get_investment_transactions_request (GetInvestmentTransactionsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetInvestmentTransactionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_investment_transactions_request'] = \
            get_investment_transactions_request
        return self.get_investment_transactions_endpoint.call_with_http_info(**kwargs)

    def migrate_financial_connection(
        self,
        **kwargs
    ):
        """Migrate financial connection  # noqa: E501

        This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection's data, access token, ID, and request ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.migrate_financial_connection(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            migrate_financial_connections_token_request (MigrateFinancialConnectionsTokenRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            MigrateFinancialConnectionsTokenResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.migrate_financial_connection_endpoint.call_with_http_info(**kwargs)

    def refresh_asset_report(
        self,
        **kwargs
    ):
        """refresh_asset_report  # noqa: E501

        Refreshes the Asset Report in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.refresh_asset_report(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            refresh_asset_report_request (RefreshAssetReportRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateAssetReportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.refresh_asset_report_endpoint.call_with_http_info(**kwargs)

    def sync_financial_connections_data(
        self,
        body,
        **kwargs
    ):
        """Sync financial connections data  # noqa: E501

        Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sync_financial_connections_data(body, async_req=True)
        >>> result = thread.get()

        Args:
            body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SyncFinancialConnectionsDataResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body'] = \
            body
        return self.sync_financial_connections_data_endpoint.call_with_http_info(**kwargs)

    def v1_financial_connections_liabilities_post(
        self,
        get_liabilities_request,
        **kwargs
    ):
        """Get liabilities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_financial_connections_liabilities_post(get_liabilities_request, async_req=True)
        >>> result = thread.get()

        Args:
            get_liabilities_request (GetLiabilitiesRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetLiabilitiesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_liabilities_request'] = \
            get_liabilities_request
        return self.v1_financial_connections_liabilities_post_endpoint.call_with_http_info(**kwargs)

