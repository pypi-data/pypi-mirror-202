{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Table of Contents Requirements Installation Configuration Usage Commands Contributing License Requirements To use the Nextcloud Talk Bot, you will need: A Nextcloud instance with the Talk app installed A bot user with apppassword setup Python 3.7 or higher","title":"Home"},{"location":"#table-of-contents","text":"Requirements Installation Configuration Usage Commands Contributing License","title":"Table of Contents"},{"location":"#requirements","text":"To use the Nextcloud Talk Bot, you will need: A Nextcloud instance with the Talk app installed A bot user with apppassword setup Python 3.7 or higher","title":"Requirements"},{"location":"FirstRunSetup/","text":"Nextcloud Talk Bot: First Run Setup Overview The FirstRunSetup class is designed to handle the first run setup process for a Nextcloud application. This class will prompt the user for credentials, verify them with the Nextcloud API, and store the necessary information in a local file. Usage To run the FirstRunSetup, simply execute the script first_run_setup.py. The user will be guided through the setup process, and the necessary data will be stored in a file called .nextclouddata. Methods get_credentials() Executes the full setup process, verifies the credentials, and writes the data to the .nextclouddata file. check_if_data_file_already_exists() Checks if the .nextclouddata file exists. If it does, the user is prompted to confirm whether they want to continue and overwrite the file or abort the setup process. encrypt_password() This method encrypts the given password using Fernet symmetric encryption. It stores the encrypted password in a file named .password and the encryption key in a file named .decode.","title":"First Run Setup"},{"location":"FirstRunSetup/#nextcloud-talk-bot-first-run-setup","text":"","title":"Nextcloud Talk Bot: First Run Setup"},{"location":"FirstRunSetup/#overview","text":"The FirstRunSetup class is designed to handle the first run setup process for a Nextcloud application. This class will prompt the user for credentials, verify them with the Nextcloud API, and store the necessary information in a local file.","title":"Overview"},{"location":"FirstRunSetup/#usage","text":"To run the FirstRunSetup, simply execute the script first_run_setup.py. The user will be guided through the setup process, and the necessary data will be stored in a file called .nextclouddata.","title":"Usage"},{"location":"FirstRunSetup/#methods","text":"get_credentials() Executes the full setup process, verifies the credentials, and writes the data to the .nextclouddata file. check_if_data_file_already_exists() Checks if the .nextclouddata file exists. If it does, the user is prompted to confirm whether they want to continue and overwrite the file or abort the setup process. encrypt_password() This method encrypts the given password using Fernet symmetric encryption. It stores the encrypted password in a file named .password and the encryption key in a file named .decode.","title":"Methods"},{"location":"NextcloudFileOperations/","text":"Nextcloud Talk Bot: File Operations NextcloudFileOperations is designed to interact with a Nextcloud server, providing functionality to list, upload, and delete files in a user's Nextcloud folder. Initialization: To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. nc_remote_folder: (Optional) The path of the remote folder on the Nextcloud server. local_folder: (Optional) The path of the local folder on the user's machine. remote_file: (Optional) The name of the remote file in the Nextcloud folder. Methods: list_files_in_nextcloud_folder() Purpose: Lists all files in a Nextcloud folder Returns: A list containing names of the files in the folder. send_local_file_to_nextcloud_folder() Purpose: Uploads local files to a specified Nextcloud folder. This method iterates through all the files in the local folder, uploads each file to the specified Nextcloud folder, and deletes the local file upon successful upload. delete_remote_file_in_nextcloud() Purpose: Deletes a remote file in the specified Nextcloud folder. This method sends a DELETE request to the Nextcloud server to remove the remote file located in the user's specified folder.","title":"NextcloudFileOperations"},{"location":"NextcloudFileOperations/#nextcloud-talk-bot-file-operations","text":"NextcloudFileOperations is designed to interact with a Nextcloud server, providing functionality to list, upload, and delete files in a user's Nextcloud folder.","title":"Nextcloud Talk Bot: File Operations"},{"location":"NextcloudFileOperations/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. nc_remote_folder: (Optional) The path of the remote folder on the Nextcloud server. local_folder: (Optional) The path of the local folder on the user's machine. remote_file: (Optional) The name of the remote file in the Nextcloud folder.","title":"Initialization:"},{"location":"NextcloudFileOperations/#methods","text":"list_files_in_nextcloud_folder() Purpose: Lists all files in a Nextcloud folder Returns: A list containing names of the files in the folder. send_local_file_to_nextcloud_folder() Purpose: Uploads local files to a specified Nextcloud folder. This method iterates through all the files in the local folder, uploads each file to the specified Nextcloud folder, and deletes the local file upon successful upload. delete_remote_file_in_nextcloud() Purpose: Deletes a remote file in the specified Nextcloud folder. This method sends a DELETE request to the Nextcloud server to remove the remote file located in the user's specified folder.","title":"Methods:"},{"location":"NextcloudTalkExtractor/","text":"Nextcloud Talk Bot: Extractor The NextcloudTalkExtractor class is a utility for interacting with the Nextcloud Talk API and extracting data. It provides methods for fetching conversations, participants, and messages for an authenticated user. Initialization: To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. room_id (optional): The room token for the Nextcloud chat group. message_limit (optional): The default maximum number of messages to retrieve. Methods: get_conversations_ids() Purpose: Fetch the list of conversations for the authenticated user. Returns: A dictionary containing the list of conversation tokens and names. get_participants(room_id, message_limit=None) Purpose: Fetch the list of participants in a specific conversation. Parameters: - room_id: The token of the conversation for which to retrieve participants. Returns: A list containing the participant display names. get_messages(room_id, message_limit=1) Purpose: Fetch the messages in a specific conversation, with an optional limit. Parameters: - room_id: The token of the conversation for which to retrieve messages. - message_limit: The maximum number of messages to retrieve (default: 100). Returns: A list containing the messages as strings. Example Usage: from nextcloud_talk_extractor import NextcloudTalkExtractor base_url = \"https://my.nextcloud.com\" username = \"my_username\" password = \"my_password\" extractor = NextcloudTalkExtractor(base_url, username, password) # Get the list of conversations conversations = extractor.get_conversations_ids() print(conversations) # Get the participants of a specific conversation room_id = \"conversation_token\" participants = extractor.get_participants(room_id) print(participants) # Get the messages of a specific conversation messages = extractor.get_messages(room_id, message_limit=100) print(messages)","title":"NextcloudTalkExtractor"},{"location":"NextcloudTalkExtractor/#nextcloud-talk-bot-extractor","text":"The NextcloudTalkExtractor class is a utility for interacting with the Nextcloud Talk API and extracting data. It provides methods for fetching conversations, participants, and messages for an authenticated user.","title":"Nextcloud Talk Bot: Extractor"},{"location":"NextcloudTalkExtractor/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. room_id (optional): The room token for the Nextcloud chat group. message_limit (optional): The default maximum number of messages to retrieve.","title":"Initialization:"},{"location":"NextcloudTalkExtractor/#methods","text":"get_conversations_ids() Purpose: Fetch the list of conversations for the authenticated user. Returns: A dictionary containing the list of conversation tokens and names. get_participants(room_id, message_limit=None) Purpose: Fetch the list of participants in a specific conversation. Parameters: - room_id: The token of the conversation for which to retrieve participants. Returns: A list containing the participant display names. get_messages(room_id, message_limit=1) Purpose: Fetch the messages in a specific conversation, with an optional limit. Parameters: - room_id: The token of the conversation for which to retrieve messages. - message_limit: The maximum number of messages to retrieve (default: 100). Returns: A list containing the messages as strings.","title":"Methods:"},{"location":"NextcloudTalkExtractor/#example-usage","text":"from nextcloud_talk_extractor import NextcloudTalkExtractor base_url = \"https://my.nextcloud.com\" username = \"my_username\" password = \"my_password\" extractor = NextcloudTalkExtractor(base_url, username, password) # Get the list of conversations conversations = extractor.get_conversations_ids() print(conversations) # Get the participants of a specific conversation room_id = \"conversation_token\" participants = extractor.get_participants(room_id) print(participants) # Get the messages of a specific conversation messages = extractor.get_messages(room_id, message_limit=100) print(messages)","title":"Example Usage:"},{"location":"NextcloudUser/","text":"Nextcloud Talk Bot: Extractor The NextcloudUser class represents a Nextcloud user and provides functionality to fetch user data and test user login by interacting with the Nextcloud API. Initialization: To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. Methods: _send_request(self, endpoint) This method sends a request to the Nextcloud API and returns the response. Arguments: endpoint (str): The API endpoint to send the request to. Returns: dict: A dictionary containing the response data if the request is successful, raises an exception otherwise. test_user_login(self) This method tests user login by attempting to retrieve user data from Nextcloud using the provided credentials. Returns: dict: A dictionary containing the user's data if the login is successful, an error message otherwise. get_preferred_language(self) This method gets the user's preferred language from the Nextcloud server. Returns: str: The preferred language if the request is successful, raises an exception otherwise. get_quota(self) This method gets the user's quota information from the Nextcloud server. Returns: dict: A dictionary containing the user's quota information if the request is successful, raises an exception otherwise. Example Here's an example of how to use the NextcloudUser class: python from nextcloud_user import NextcloudUser base_url = \"https://your-nextcloud-instance.com\" user = \"your-username\" password = \"your-password\" nc_user = NextcloudUser(base_url, user, password) login_response = nc_user.test_user_login() if \"ocs\" in login_response and \"data\" in login_response[\"ocs\"]: print(\"Login successful!\") preferred_language = nc_user.get_preferred_language() print(f\"Preferred language: {preferred_language}\") quota = nc_user.get_quota() print(f\"Quota: {quota}\") else: print(\"Login failed!\") This code snippet demonstrates how to create an instance of the NextcloudUser class, test user login, get the user's preferred language, and fetch their quota information.","title":"NextcloudUser"},{"location":"NextcloudUser/#nextcloud-talk-bot-extractor","text":"The NextcloudUser class represents a Nextcloud user and provides functionality to fetch user data and test user login by interacting with the Nextcloud API.","title":"Nextcloud Talk Bot: Extractor"},{"location":"NextcloudUser/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account.","title":"Initialization:"},{"location":"NextcloudUser/#methods","text":"_send_request(self, endpoint) This method sends a request to the Nextcloud API and returns the response. Arguments: endpoint (str): The API endpoint to send the request to. Returns: dict: A dictionary containing the response data if the request is successful, raises an exception otherwise. test_user_login(self) This method tests user login by attempting to retrieve user data from Nextcloud using the provided credentials. Returns: dict: A dictionary containing the user's data if the login is successful, an error message otherwise. get_preferred_language(self) This method gets the user's preferred language from the Nextcloud server. Returns: str: The preferred language if the request is successful, raises an exception otherwise. get_quota(self) This method gets the user's quota information from the Nextcloud server. Returns: dict: A dictionary containing the user's quota information if the request is successful, raises an exception otherwise.","title":"Methods:"},{"location":"NextcloudUser/#example","text":"Here's an example of how to use the NextcloudUser class: python from nextcloud_user import NextcloudUser base_url = \"https://your-nextcloud-instance.com\" user = \"your-username\" password = \"your-password\" nc_user = NextcloudUser(base_url, user, password) login_response = nc_user.test_user_login() if \"ocs\" in login_response and \"data\" in login_response[\"ocs\"]: print(\"Login successful!\") preferred_language = nc_user.get_preferred_language() print(f\"Preferred language: {preferred_language}\") quota = nc_user.get_quota() print(f\"Quota: {quota}\") else: print(\"Login failed!\") This code snippet demonstrates how to create an instance of the NextcloudUser class, test user login, get the user's preferred language, and fetch their quota information.","title":"Example"}]}