# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eapypGXjyv0r19_mTpxqaFjI4cIFK-vS

## <font color=#5DADE2>Dataframe Formatting</font>
Some functions are defined to format the dataframes, in order to improve their readability and to facilitate their comprehension

### <font color=#85C1E9>Text formatting</font>

Paints <font color=red>FALSE</font> values in <font color=red>red</font> and <font color=green>TRUE</font> values in <font color=green>green</font> text:
"""

def color_true_false(value):
    if type(value) != type(''):
      if value == 1:
        color = 'green'
      else:
        color = 'red' 
      return 'color: {}'.format(color)

"""Paints values that are equal to 1 with <font color=green>green</font> text:"""

def color_val(value):
  if type(value) != type(''):
    if value == 1:
      color = 'green'
      return 'color: {}'.format(color)

"""Paints value that are equal to 1.0 with <font color=#FDFEFE>white</font> text:"""

def color_white(value):
  if type(value) != type(''):
    if value == 1.0:
      color = '#FDFEFE'
      return 'color: {}'.format(color)

"""### <font color=#85C1E9>Row formatting</font>

Shades the rows of the table with a <font color=lightblue>light blue</font> color scale for each *attribute_name* group that was defined during the preprocessing phase:
"""

def highlight_blue(value):
  if type(value) != type(''):
    if value.attribute_name == 'Pregnancies':
        return ['background-color: 	#f5f9fc'] * len(value)
    if value.attribute_name == 'Glucose':
        return ['background-color: 	#ebf3fa'] * len(value)
    if value.attribute_name == 'BloodPressure':
        return ['background-color: 	#e2edf8'] * len(value)
    if value.attribute_name == 'SkinThickness':
        return ['background-color:  #d8e7f5'] * len(value)
    if value.attribute_name == 'Insulin':
        return ['background-color: 	#cfe2f3'] * len(value)
    if value.attribute_name == 'BMI':
        return ['background-color: 	#c5dcf1'] * len(value)
    if value.attribute_name == 'DiabetesPedigreeFunction':
        return ['background-color: 	#bbd6ee'] * len(value)
    if value.attribute_name == 'Age':
        return ['background-color: 	#b2d0ec'] * len(value)
    if value.attribute_name == 'AgeCategory':
        return ['background-color: 	#a8caea'] * len(value)

"""Apply two different <font color=#e2edf8>light</font> <font color=#a8caea>blue</font> background colors to two rows in a small table (used in sensitive attribute table):"""

def small_highlight_blue(value):
  if type(value) != type(''):
    if value.attribute_value == '1':
      return ['background-color: 	#a8caea'] * len(value)
    if value.attribute_value == '0':
      return ['background-color: 	#e2edf8'] * len(value)

"""Shades the rows of the table with a <font color=gray>gray</font> color scale for each *attribute_name* group that was defined during the preprocessing phase:"""

def highlight_gray(value):
  if type(value) != type(''):
    if value.attribute_name == 'Pregnancies':
        return ['background-color: 	#CCCCCC'] * len(value)
    if value.attribute_name == 'Glucose':
        return ['background-color: 	#BFBFBF'] * len(value)
    if value.attribute_name == 'BloodPressure':
        return ['background-color: 	#B3B3B3'] * len(value)
    if value.attribute_name == 'SkinThickness':
        return ['background-color: 	#A6A6A6'] * len(value)
    if value.attribute_name == 'Insulin':
        return ['background-color: 	#999999'] * len(value)
    if value.attribute_name == 'BMI':
        return ['background-color:  #A6A6A6'] * len(value)
    if value.attribute_name == 'DiabetesPedigreeFunction':
        return ['background-color: 	#B3B3B3'] * len(value)
    if value.attribute_name == 'Age':
        return ['background-color: 	#BFBFBF'] * len(value)
    if value.attribute_name == 'AgeCategory':
        return ['background-color: 	#CCCCCC'] * len(value)

"""Apply two different <font color=gray>gray</font> background colors to two rows in a small table (used in sensitive attribute table):"""

def small_highlight_gray(value):
  if type(value) is pd.Series:
      return ['background-color: 	#BFBFBF'] * len(value)
  else:
      if type(value) != type(''):
        if value.attribute_value == '1':
          return ['background-color: 	#A6A6A6'] * len(value)
        if value.attribute_value == '0':
          return ['background-color: 	#BFBFBF'] * len(value)

"""Apply a <font color=green>green</font> background to cells containing a *1.0* value:"""

def highlight_100(value):
  if type(value) != type(''):
    if value == 1.0:
      return 'background-color:	 #16A085'

"""---
Apply a background gradient to each column of the table ***tab*** belonging to the ***sel_col*** list (using `axis=0`, so along the rows), and format their values to two decimal also applying percentage:
"""

def table_gradient(tab,tab_style,sel_col):
  if sel_col:
    tab_style.format({col: "{:.2%}" for col in tab.columns if col in sel_col})
    tab_style.background_gradient(axis=0, subset = sel_col)

"""Apply a background gradient to each column of the small table ***tab*** belonging to the ***sel_col*** list (using `axis=None`, so along both axes), and format their values to two decimal also applying percentage (used in sensitive attribute table):"""

def small_table_gradient(tab,tab_style,sel_col):
    if sel_col:   
      tab_style.format({col: "{:.2%}" for col in tab.columns if col in sel_col})
      tab_style.background_gradient(axis=None, subset = sel_col)

"""### <font color=#85C1E9>Table formatting</font>

Formats text and background for each row of the dataframe:


1.   Set <font color=black>black</font> text as default
2.   Set <font color=navy>navy</font> text to values belonging to the *attribute_value* column
3.   Set a sequence of <font color=lightblue>light blue</font> shades as background for each defined group  (`axis=1` = column-wise)
4.   Add a gradient to the columns belonging to *sel_col* list
5.   Set a <font color=green>green</font> background to the cells containing 100.00%
6.   Set <font color=#FDFEFE>white</font> text to the cells containing 100.00%
"""

def format_blue_table(tab,sel_col):
    tab_style = tab.style
    tab_style.set_properties(**{'color': 'black'})
    tab_style.set_properties(**{'color': 'navy'}, subset = ['attribute_value'])
    tab_style.apply(highlight_blue, axis = 1)
    table_gradient(tab,tab_style,sel_col)
    tab_style.applymap(highlight_100, subset = sel_col)
    tab_style.applymap(color_white, subset = sel_col)
    return tab_style

"""Formats text and background for each row of the dataframe (used for sensitive attribute only tables):


1.   Set <font color=black>black</font> text as default
2.   Set <font color=navy>navy</font> text to values belonging to the *attribute_value* column
3.   Set a sequence of <font color=lightblue>light blue</font> shades as background for each defined group (`axis=1` = column-wise)
4.   Add a gradient to the columns belonging to *sel_col* list
5.   Set a <font color=green>green</font> background to the cells containing 100.00%
6.   Set <font color=#FDFEFE>white</font> text to the cells containing 100.00%
"""

def format_small_blue_table(tab,sel_col):
    tab_style = tab.style
    tab_style.set_properties(**{'color': 'black'})
    tab_style.set_properties(**{'color': 'navy'}, subset = ['attribute_value'])
    tab_style.apply(small_highlight_blue, axis = 1)
    small_table_gradient(tab,tab_style,sel_col)
    tab_style.applymap(highlight_100, subset = sel_col)
    tab_style.applymap(color_white)
    return tab_style

"""Formats text and background for each row of the dataframe:


1.   Set <font color=black>black</font> text for the values belonging to the *attribute_name* column
2.   Set <font color=navy>navy</font> text to values belonging to the *attribute_value* column
3.   Set a sequence of <font color=gray>gray</font> shades as background for each defined group (`axis=1` = column-wise)
4.   Set red and green colored text of the cells containing respectively False and True
5.   Apply a <font color=red>gradient</font> to the columns belonging to the *sel_col* list
6.   Set <font color=green>green</font> colored text of the cells containing '1'

"""

def format_gray_table(tab,sel_col):
    tab_style = tab.style
    tab_style.set_properties(**{'color': 'black'}, subset = ['attribute_name'])
    if 'attribute_value' in tab.columns:
      tab_style.set_properties(**{'color': 'navy'}, subset = ['attribute_value'])
    tab_style.apply(highlight_gray, axis = 1)
    tab_style.applymap(color_true_false)
    tab_style.text_gradient(axis=0, cmap='gist_heat', subset = sel_col, low=0, high=0.5)
    tab_style.applymap(color_val)
    return tab_style

"""Formats text and background for each row of the dataframe (used for sensitive attribute only tables):


1.   Set <font color=black>black</font> text for the values belonging to the *attribute_name* column
2.   Set <font color=navy>navy</font> text to values belonging to the *attribute_value* column
3.   Set a sequence of <font color=gray>gray</font> shades as background for each defined group (`axis=1` = column-wise)
4.   Set red and green colored text of the cells containing respectively False and True
5.   Apply a <font color=red>gradient</font> to the columns belonging to the *sel_col* list
6.   Set <font color=green>green</font> colored text of the cells containing '1'

"""

def format_small_gray_table(tab,sel_col):
    tab_style = tab.style
    tab_style.set_properties(**{'color': 'black'}, subset = ['attribute_name'])
    if 'attribute_value' in tab.columns:
      tab_style.set_properties(**{'color': 'navy'}, subset = ['attribute_value'])
    tab_style.apply(small_highlight_gray, axis = 1)
    tab_style.applymap(color_true_false)
    tab_style.text_gradient(axis=1, cmap='gist_heat', subset = sel_col, low=0, high=0.5)
    tab_style.applymap(color_val)
    return tab_style