# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppConfigArgs', 'AppConfig']

@pulumi.input_type
class AppConfigArgs:
    def __init__(__self__, *,
                 deploy_target: pulumi.Input['AppConfigDeployTargetArgs'],
                 org_repo: pulumi.Input[str],
                 pipeline_id: pulumi.Input[str],
                 automatic_review_apps: Optional[pulumi.Input[bool]] = None,
                 base_name: Optional[pulumi.Input[str]] = None,
                 destroy_stale_apps: Optional[pulumi.Input[bool]] = None,
                 stale_days: Optional[pulumi.Input[int]] = None,
                 wait_for_ci: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a AppConfig resource.
        """
        pulumi.set(__self__, "deploy_target", deploy_target)
        pulumi.set(__self__, "org_repo", org_repo)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        if automatic_review_apps is not None:
            pulumi.set(__self__, "automatic_review_apps", automatic_review_apps)
        if base_name is not None:
            pulumi.set(__self__, "base_name", base_name)
        if destroy_stale_apps is not None:
            pulumi.set(__self__, "destroy_stale_apps", destroy_stale_apps)
        if stale_days is not None:
            pulumi.set(__self__, "stale_days", stale_days)
        if wait_for_ci is not None:
            pulumi.set(__self__, "wait_for_ci", wait_for_ci)

    @property
    @pulumi.getter(name="deployTarget")
    def deploy_target(self) -> pulumi.Input['AppConfigDeployTargetArgs']:
        return pulumi.get(self, "deploy_target")

    @deploy_target.setter
    def deploy_target(self, value: pulumi.Input['AppConfigDeployTargetArgs']):
        pulumi.set(self, "deploy_target", value)

    @property
    @pulumi.getter(name="orgRepo")
    def org_repo(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_repo")

    @org_repo.setter
    def org_repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_repo", value)

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pipeline_id", value)

    @property
    @pulumi.getter(name="automaticReviewApps")
    def automatic_review_apps(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "automatic_review_apps")

    @automatic_review_apps.setter
    def automatic_review_apps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_review_apps", value)

    @property
    @pulumi.getter(name="baseName")
    def base_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_name")

    @base_name.setter
    def base_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_name", value)

    @property
    @pulumi.getter(name="destroyStaleApps")
    def destroy_stale_apps(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "destroy_stale_apps")

    @destroy_stale_apps.setter
    def destroy_stale_apps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "destroy_stale_apps", value)

    @property
    @pulumi.getter(name="staleDays")
    def stale_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stale_days")

    @stale_days.setter
    def stale_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stale_days", value)

    @property
    @pulumi.getter(name="waitForCi")
    def wait_for_ci(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "wait_for_ci")

    @wait_for_ci.setter
    def wait_for_ci(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_ci", value)


@pulumi.input_type
class _AppConfigState:
    def __init__(__self__, *,
                 automatic_review_apps: Optional[pulumi.Input[bool]] = None,
                 base_name: Optional[pulumi.Input[str]] = None,
                 deploy_target: Optional[pulumi.Input['AppConfigDeployTargetArgs']] = None,
                 destroy_stale_apps: Optional[pulumi.Input[bool]] = None,
                 org_repo: Optional[pulumi.Input[str]] = None,
                 pipeline_id: Optional[pulumi.Input[str]] = None,
                 repo_id: Optional[pulumi.Input[int]] = None,
                 stale_days: Optional[pulumi.Input[int]] = None,
                 wait_for_ci: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering AppConfig resources.
        """
        if automatic_review_apps is not None:
            pulumi.set(__self__, "automatic_review_apps", automatic_review_apps)
        if base_name is not None:
            pulumi.set(__self__, "base_name", base_name)
        if deploy_target is not None:
            pulumi.set(__self__, "deploy_target", deploy_target)
        if destroy_stale_apps is not None:
            pulumi.set(__self__, "destroy_stale_apps", destroy_stale_apps)
        if org_repo is not None:
            pulumi.set(__self__, "org_repo", org_repo)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if repo_id is not None:
            pulumi.set(__self__, "repo_id", repo_id)
        if stale_days is not None:
            pulumi.set(__self__, "stale_days", stale_days)
        if wait_for_ci is not None:
            pulumi.set(__self__, "wait_for_ci", wait_for_ci)

    @property
    @pulumi.getter(name="automaticReviewApps")
    def automatic_review_apps(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "automatic_review_apps")

    @automatic_review_apps.setter
    def automatic_review_apps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_review_apps", value)

    @property
    @pulumi.getter(name="baseName")
    def base_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_name")

    @base_name.setter
    def base_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_name", value)

    @property
    @pulumi.getter(name="deployTarget")
    def deploy_target(self) -> Optional[pulumi.Input['AppConfigDeployTargetArgs']]:
        return pulumi.get(self, "deploy_target")

    @deploy_target.setter
    def deploy_target(self, value: Optional[pulumi.Input['AppConfigDeployTargetArgs']]):
        pulumi.set(self, "deploy_target", value)

    @property
    @pulumi.getter(name="destroyStaleApps")
    def destroy_stale_apps(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "destroy_stale_apps")

    @destroy_stale_apps.setter
    def destroy_stale_apps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "destroy_stale_apps", value)

    @property
    @pulumi.getter(name="orgRepo")
    def org_repo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_repo")

    @org_repo.setter
    def org_repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_repo", value)

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_id", value)

    @property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "repo_id")

    @repo_id.setter
    def repo_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repo_id", value)

    @property
    @pulumi.getter(name="staleDays")
    def stale_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stale_days")

    @stale_days.setter
    def stale_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stale_days", value)

    @property
    @pulumi.getter(name="waitForCi")
    def wait_for_ci(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "wait_for_ci")

    @wait_for_ci.setter
    def wait_for_ci(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_ci", value)


class AppConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automatic_review_apps: Optional[pulumi.Input[bool]] = None,
                 base_name: Optional[pulumi.Input[str]] = None,
                 deploy_target: Optional[pulumi.Input[pulumi.InputType['AppConfigDeployTargetArgs']]] = None,
                 destroy_stale_apps: Optional[pulumi.Input[bool]] = None,
                 org_repo: Optional[pulumi.Input[str]] = None,
                 pipeline_id: Optional[pulumi.Input[str]] = None,
                 stale_days: Optional[pulumi.Input[int]] = None,
                 wait_for_ci: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a AppConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automatic_review_apps: Optional[pulumi.Input[bool]] = None,
                 base_name: Optional[pulumi.Input[str]] = None,
                 deploy_target: Optional[pulumi.Input[pulumi.InputType['AppConfigDeployTargetArgs']]] = None,
                 destroy_stale_apps: Optional[pulumi.Input[bool]] = None,
                 org_repo: Optional[pulumi.Input[str]] = None,
                 pipeline_id: Optional[pulumi.Input[str]] = None,
                 stale_days: Optional[pulumi.Input[int]] = None,
                 wait_for_ci: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppConfigArgs.__new__(AppConfigArgs)

            __props__.__dict__["automatic_review_apps"] = automatic_review_apps
            __props__.__dict__["base_name"] = base_name
            if deploy_target is None and not opts.urn:
                raise TypeError("Missing required property 'deploy_target'")
            __props__.__dict__["deploy_target"] = deploy_target
            __props__.__dict__["destroy_stale_apps"] = destroy_stale_apps
            if org_repo is None and not opts.urn:
                raise TypeError("Missing required property 'org_repo'")
            __props__.__dict__["org_repo"] = org_repo
            if pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_id'")
            __props__.__dict__["pipeline_id"] = pipeline_id
            __props__.__dict__["stale_days"] = stale_days
            __props__.__dict__["wait_for_ci"] = wait_for_ci
            __props__.__dict__["repo_id"] = None
        super(AppConfig, __self__).__init__(
            'heroku:review/appConfig:AppConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            automatic_review_apps: Optional[pulumi.Input[bool]] = None,
            base_name: Optional[pulumi.Input[str]] = None,
            deploy_target: Optional[pulumi.Input[pulumi.InputType['AppConfigDeployTargetArgs']]] = None,
            destroy_stale_apps: Optional[pulumi.Input[bool]] = None,
            org_repo: Optional[pulumi.Input[str]] = None,
            pipeline_id: Optional[pulumi.Input[str]] = None,
            repo_id: Optional[pulumi.Input[int]] = None,
            stale_days: Optional[pulumi.Input[int]] = None,
            wait_for_ci: Optional[pulumi.Input[bool]] = None) -> 'AppConfig':
        """
        Get an existing AppConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppConfigState.__new__(_AppConfigState)

        __props__.__dict__["automatic_review_apps"] = automatic_review_apps
        __props__.__dict__["base_name"] = base_name
        __props__.__dict__["deploy_target"] = deploy_target
        __props__.__dict__["destroy_stale_apps"] = destroy_stale_apps
        __props__.__dict__["org_repo"] = org_repo
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["repo_id"] = repo_id
        __props__.__dict__["stale_days"] = stale_days
        __props__.__dict__["wait_for_ci"] = wait_for_ci
        return AppConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="automaticReviewApps")
    def automatic_review_apps(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "automatic_review_apps")

    @property
    @pulumi.getter(name="baseName")
    def base_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "base_name")

    @property
    @pulumi.getter(name="deployTarget")
    def deploy_target(self) -> pulumi.Output['outputs.AppConfigDeployTarget']:
        return pulumi.get(self, "deploy_target")

    @property
    @pulumi.getter(name="destroyStaleApps")
    def destroy_stale_apps(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "destroy_stale_apps")

    @property
    @pulumi.getter(name="orgRepo")
    def org_repo(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_repo")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "repo_id")

    @property
    @pulumi.getter(name="staleDays")
    def stale_days(self) -> pulumi.Output[int]:
        return pulumi.get(self, "stale_days")

    @property
    @pulumi.getter(name="waitForCi")
    def wait_for_ci(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "wait_for_ci")

