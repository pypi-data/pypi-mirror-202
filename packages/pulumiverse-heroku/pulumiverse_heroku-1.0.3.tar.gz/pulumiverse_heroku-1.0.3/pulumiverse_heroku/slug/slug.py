# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SlugArgs', 'Slug']

@pulumi.input_type
class SlugArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 process_types: pulumi.Input[Mapping[str, Any]],
                 buildpack_provided_description: Optional[pulumi.Input[str]] = None,
                 checksum: Optional[pulumi.Input[str]] = None,
                 commit: Optional[pulumi.Input[str]] = None,
                 commit_description: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 file_url: Optional[pulumi.Input[str]] = None,
                 stack: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Slug resource.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "process_types", process_types)
        if buildpack_provided_description is not None:
            pulumi.set(__self__, "buildpack_provided_description", buildpack_provided_description)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if commit is not None:
            pulumi.set(__self__, "commit", commit)
        if commit_description is not None:
            pulumi.set(__self__, "commit_description", commit_description)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if file_url is not None:
            pulumi.set(__self__, "file_url", file_url)
        if stack is not None:
            pulumi.set(__self__, "stack", stack)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="processTypes")
    def process_types(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "process_types")

    @process_types.setter
    def process_types(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "process_types", value)

    @property
    @pulumi.getter(name="buildpackProvidedDescription")
    def buildpack_provided_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buildpack_provided_description")

    @buildpack_provided_description.setter
    def buildpack_provided_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buildpack_provided_description", value)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter
    def commit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "commit")

    @commit.setter
    def commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit", value)

    @property
    @pulumi.getter(name="commitDescription")
    def commit_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "commit_description")

    @commit_description.setter
    def commit_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_description", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="fileUrl")
    def file_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_url")

    @file_url.setter
    def file_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_url", value)

    @property
    @pulumi.getter
    def stack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stack")

    @stack.setter
    def stack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack", value)


@pulumi.input_type
class _SlugState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 blobs: Optional[pulumi.Input[Sequence[pulumi.Input['SlugBlobArgs']]]] = None,
                 buildpack_provided_description: Optional[pulumi.Input[str]] = None,
                 checksum: Optional[pulumi.Input[str]] = None,
                 commit: Optional[pulumi.Input[str]] = None,
                 commit_description: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 file_url: Optional[pulumi.Input[str]] = None,
                 process_types: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 stack: Optional[pulumi.Input[str]] = None,
                 stack_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Slug resources.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if blobs is not None:
            pulumi.set(__self__, "blobs", blobs)
        if buildpack_provided_description is not None:
            pulumi.set(__self__, "buildpack_provided_description", buildpack_provided_description)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if commit is not None:
            pulumi.set(__self__, "commit", commit)
        if commit_description is not None:
            pulumi.set(__self__, "commit_description", commit_description)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if file_url is not None:
            pulumi.set(__self__, "file_url", file_url)
        if process_types is not None:
            pulumi.set(__self__, "process_types", process_types)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if stack is not None:
            pulumi.set(__self__, "stack", stack)
        if stack_id is not None:
            pulumi.set(__self__, "stack_id", stack_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def blobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SlugBlobArgs']]]]:
        return pulumi.get(self, "blobs")

    @blobs.setter
    def blobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SlugBlobArgs']]]]):
        pulumi.set(self, "blobs", value)

    @property
    @pulumi.getter(name="buildpackProvidedDescription")
    def buildpack_provided_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buildpack_provided_description")

    @buildpack_provided_description.setter
    def buildpack_provided_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buildpack_provided_description", value)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter
    def commit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "commit")

    @commit.setter
    def commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit", value)

    @property
    @pulumi.getter(name="commitDescription")
    def commit_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "commit_description")

    @commit_description.setter
    def commit_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_description", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="fileUrl")
    def file_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_url")

    @file_url.setter
    def file_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_url", value)

    @property
    @pulumi.getter(name="processTypes")
    def process_types(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "process_types")

    @process_types.setter
    def process_types(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "process_types", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def stack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stack")

    @stack.setter
    def stack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack_id", value)


class Slug(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 buildpack_provided_description: Optional[pulumi.Input[str]] = None,
                 checksum: Optional[pulumi.Input[str]] = None,
                 commit: Optional[pulumi.Input[str]] = None,
                 commit_description: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 file_url: Optional[pulumi.Input[str]] = None,
                 process_types: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 stack: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Slug resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SlugArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Slug resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SlugArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SlugArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 buildpack_provided_description: Optional[pulumi.Input[str]] = None,
                 checksum: Optional[pulumi.Input[str]] = None,
                 commit: Optional[pulumi.Input[str]] = None,
                 commit_description: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 file_url: Optional[pulumi.Input[str]] = None,
                 process_types: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 stack: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SlugArgs.__new__(SlugArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            __props__.__dict__["buildpack_provided_description"] = buildpack_provided_description
            __props__.__dict__["checksum"] = checksum
            __props__.__dict__["commit"] = commit
            __props__.__dict__["commit_description"] = commit_description
            __props__.__dict__["file_path"] = file_path
            __props__.__dict__["file_url"] = file_url
            if process_types is None and not opts.urn:
                raise TypeError("Missing required property 'process_types'")
            __props__.__dict__["process_types"] = process_types
            __props__.__dict__["stack"] = stack
            __props__.__dict__["blobs"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["stack_id"] = None
        super(Slug, __self__).__init__(
            'heroku:slug/slug:Slug',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            blobs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SlugBlobArgs']]]]] = None,
            buildpack_provided_description: Optional[pulumi.Input[str]] = None,
            checksum: Optional[pulumi.Input[str]] = None,
            commit: Optional[pulumi.Input[str]] = None,
            commit_description: Optional[pulumi.Input[str]] = None,
            file_path: Optional[pulumi.Input[str]] = None,
            file_url: Optional[pulumi.Input[str]] = None,
            process_types: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            size: Optional[pulumi.Input[int]] = None,
            stack: Optional[pulumi.Input[str]] = None,
            stack_id: Optional[pulumi.Input[str]] = None) -> 'Slug':
        """
        Get an existing Slug resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SlugState.__new__(_SlugState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["blobs"] = blobs
        __props__.__dict__["buildpack_provided_description"] = buildpack_provided_description
        __props__.__dict__["checksum"] = checksum
        __props__.__dict__["commit"] = commit
        __props__.__dict__["commit_description"] = commit_description
        __props__.__dict__["file_path"] = file_path
        __props__.__dict__["file_url"] = file_url
        __props__.__dict__["process_types"] = process_types
        __props__.__dict__["size"] = size
        __props__.__dict__["stack"] = stack
        __props__.__dict__["stack_id"] = stack_id
        return Slug(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def blobs(self) -> pulumi.Output[Sequence['outputs.SlugBlob']]:
        return pulumi.get(self, "blobs")

    @property
    @pulumi.getter(name="buildpackProvidedDescription")
    def buildpack_provided_description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "buildpack_provided_description")

    @property
    @pulumi.getter
    def checksum(self) -> pulumi.Output[str]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def commit(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "commit")

    @property
    @pulumi.getter(name="commitDescription")
    def commit_description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "commit_description")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter(name="fileUrl")
    def file_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "file_url")

    @property
    @pulumi.getter(name="processTypes")
    def process_types(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "process_types")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def stack(self) -> pulumi.Output[str]:
        return pulumi.get(self, "stack")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "stack_id")

