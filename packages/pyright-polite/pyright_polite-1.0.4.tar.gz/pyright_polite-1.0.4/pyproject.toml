# SPDX-FileCopyrightText: Copyright Â© 2023 Jamie Nguyen <j@jamielinux.com>
# SPDX-License-Identifier: MIT

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyright-polite"
description = "An intelligent cross-platform wrapper for pyright that makes it less noisy."
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
keywords = ["pyright", "quiet"]
authors = [
  { name = "Jamie Nguyen", email = "j@jamielinux.com" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Intended Audience :: Developers",
  "Environment :: Console",
]
dependencies = [
  "colorama ~= 0.4.6",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/jamielinux/pyright-polite"
Issues = "https://github.com/jamielinux/pyright-polite/issues"
Source = "https://github.com/jamielinux/pyright-polite"

[project.scripts]
pyright-polite = "pyright_polite.main:main"

# pytest & coverage
[tool.pytest.ini_options]
addopts = [
  "--import-mode=importlib",
  "--strict-markers",
  "--strict-config",
  "-ra",
]
markers = [
  "asyncio",
  "disable_autouse",
]
asyncio_mode = "auto"
[tool.coverage.run]
branch = true
command_line = "-m pytest"
omit = [
  "tests/*"
]
source = ["."]
[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
[tool.coverage.paths]
source = [
  ".",
  "/Users/runner/work/pyright-polite/pyright-polite",
  'D:\a\pyright-polite\pyright-polite',
]

# scriv
[tool.scriv]
fragment_directory = ".changelog.d"
format = "md"
version = "literal: src/pyright-polite/__about__.py: __version__"

# checkers, formatters & linters
[tool.ruff]
target-version = "py37"
line-length = 100
pydocstyle.convention = "google"
select = [
  "A", "ARG", "B", "BLE", "C", "C4", "C90", "COM", "D", "DTZ", "E", "EXE", "F", "FBT",
  "G", "I", "INP", "ISC", "N", "PIE", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "S",
  "SIM", "SLF", "T10", "T20", "TCH", "TRY", "W", "YTT"
]
ignore = [ "COM812", "TRY003" ]
exclude = [ "tests/test_integration/" ]
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/conftest.py" = ["PT004"]
"tests/*" = ["D", "E501", "FBT", "INP001", "RUF001", "RUF002", "RUF003", "S", "SIM117"]
[tool.ruff.mccabe]
max-complexity = 10

[tool.black]
line-length = 100
target_version = ["py37", "py38", "py39", "py310", "py311"]

[tool.pyright]
include = ["."]
