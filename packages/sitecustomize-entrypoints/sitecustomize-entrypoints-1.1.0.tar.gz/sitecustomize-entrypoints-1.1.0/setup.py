# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['sitecustomize',
 'sitecustomize._vendor',
 'sitecustomize._vendor.importlib_metadata']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'sitecustomize-entrypoints',
    'version': '1.1.0',
    'description': 'Sitecustomize-module that executes all correctly registered ``sitecustomize``-entypoints.',
    'long_description': '[![Testing](https://img.shields.io/github/actions/workflow/status/Darsstar/sitecustomize-entrypoints/testing.yaml?branch=main&longCache=true&style=flat-square&label=tests&logo=GitHub%20Actions&logoColor=fff")](https://github.com/Darsstar/sitecustomize-entrypoints/actions/workflows/testing.yaml)\n[![Linting](https://img.shields.io/github/actions/workflow/status/Darsstar/sitecustomize-entrypoints/linting.yaml?branch=main&longCache=true&style=flat-square&label=Linting&logo=GitHub%20Actions&logoColor=fff")](https://github.com/Darsstar/sitecustomize-entrypoints/actions/workflows/linting.yaml)\n[![Read the Docs](https://readthedocs.org/projects/sitecustomize-entrypoints/badge/?version=latest)](https://sitecustomize-entrypoints.readthedocs.io/en/latest/)\n[![PyPi Package](https://img.shields.io/pypi/v/sitecustomize-entrypoints?color=%2334D058&label=pypi%20package)](https://pypi.org/project/sitecustomize-entrypoints/)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/Darsstar/sitecustomize-entrypoints/blob/main/license.md)\n\n# sitecustomize-entrypoints\n\n## Overview\n\n`sitecustomize-entrypoints` is a library that installs a python-module called `sitecustomize`,\nand allows you to define and register any callable as a `sitecustomize`-entrypoint in your project\'s `setup.py` or `pyproject.toml`.\n\nThese callables will be then executed automatically whenever `sitecustomize` is imported during python-startup.\nThis provides a simple & modular way to patch or extend the functionality of any python-code installed in your environment without modifying its source code.\n\n`sitecustomize` is a special python-module that can be used to customize the python environment at startup.\nWhen the python-interpreter starts, it looks for a `sitecustomize.py`-file in the site-packages directory or any other directory specified in the `PYTHONPATH`.\nThe `sitecustomize.py`-file is executed before any other Python code, allowing you to make customizations that will be applied to the entire python environment.\nFor more information, check the official [site.py](https://docs.python.org/3/library/site.html)-documentation.\n\n\n\n## Installation\n\nYou can install `sitecustomize-entrypoints` using pip:\n\n```bash\n> bin/pip install sitecustomize-entrypoints\n```\n\nOr add it to your poetry-based project:\n\n```bash\n> poetry add sitecustomize-entrypoints\n```\n\n\n## Usage\n\nTo use `sitecustomize-entrypoints`, you need to define and register one or more entrypoints\nin your project\'s `setup.py` or `pyproject.toml` file. Here\'s an example:\n\n```toml\n[tool.poetry.plugins."sitecustomize"]\n"my-action" = "my_project.action:my_action"\n```\n\nIn this example, we\'re registering an entrypoint called `my-action` in the `sitecustomize`-group.\nThis entrypoint points to the `my_action`-function in the `my_project.actions`-module.\n\nOnce you\'ve registered your entrypoints, they will be executed **automatically**\nwhen the `sitecustomize`-module is imported.\n\n\n```python\n\nimport sitecustomize\n```\n\n\n## Ordering\n\n**Entrypoints are sorted by name.**\n\nThe ordering in which the entrypoints are defined in your `setup.py` or `pyproject.toml`\nare unfortunately not the order in which they are registered internally.\n\nThe entrypoints are first ordered alphanumerically by name.\n\nSo defined entrypoints are re-ordered from\n```toml\n[tool.poetry.plugins."sitecustomize"]\nfoo = "my_project.action:action_foo"\nbar = "my_project.action:action_bar"\n```\n\ninto\n\n```toml\n[tool.poetry.plugins."sitecustomize"]\nbar = "my_project.action:action_bar"\nfoo = "my_project.action:action_foo"\n```\n\nThis can cause issues when there are dependencies between your entrypoints.\n\nTIP: You can use integer-prefixes to the name to enforce the ordering in which you define your entrypoints.:\n\n```toml\n[tool.poetry.plugins."sitecustomize"]\n10-foo = "my_project.action:action_foo"\n20-bar = "my_project.action:action_bar"\n```\n\n\n## Cancel entrypoints registered by third-party packages\n\nImagine a third-party package has registered an entrypoint as follows:\n\n```toml\n[tool.poetry.plugins."sitecustomize"]\ntheir-action = "external_module:their_action"\n```\n\nBut it does not match the ordering you\'d like.\n\nYou can cancel the execution of this plugin, by registering an entrypoint with the same name in your own `setup.py` or `pyproject.toml` file,\nand pointing to the no-action `sitecustomize.cancel`-function.\n\n```toml\n[tool.poetry.plugins."sitecustomize"]\n their-action = "sitecustomize:cancel"\n```\n\nBy registering an entrypoint with the **same name** it overrides the previous registered action.\nSubsequently you can re-register this entrypoint by a different name to change the order of execution.\n\n\n## Overriding and re-ordering entrypoints\nYou can override and re-order registered entrypoints by defining your own entrypoints with the same name in your setup.py or pyproject.toml file.\nWhen `sitecustomize` executes registered entrypoints, it uses a FIFO-approach (first in, first out):\nOnly the last registered entrypoint with a given name is executed. Any prior entrypoints with the same name are filtered out (overriden by the last).\n\nTo re-order entrypoints, you can use the `cancel`-function provided by `sitecustomize-entrypoints`.\nThe `cancel`-function allows you to cancel out a previously registered entrypoint, so you can re-register it in a different order.\n\nHere\'s an example to enforce a specific order of execution:\n\n\n```toml\n[tool.poetry.plugins."sitecustomize"]\n"their-action = external_module:their_action"\n```\n\n```toml\n[tool.poetry.plugins."sitecustomize"]\n"their-action = sitecustomize:cancel"\n"10-my-action = my_project.action:my_action"\n"20-their-action = external_module:their_action"\n```\n\nIn this example, we\'re re-ordering an entrypoint registered by a third-party module to be executed after our own.\nFirst we re-register it with the same name to override and cancel its action, and subsequently we re-register it under a different name to ensure\nit get executed after our own entrypoints, even if all entrypoints are sorted alphabetically\n\n\n\n## Display all registered entrypoint in order of execution\nThe `sitecustomize.print_entrypoints`-function provided by `sitecustomize-entrypoints` allows you to display a list of all registered entrypoints.\nBy default, it will display all registered entrypoints in the `sitecustomize`-group in order of execution.\nYou can optionally pass a different entrypoint group name as an argument.\nIf you pass `filtered=True` as an argument, the function will also filter out any duplicate entrypoints and display only the last instance of each entrypoint. Here\'s an example usage:\n\n\n```python\n\nimport sitecustomize\n\n# Display all registered entrypoints in the sitecustomize group\nsitecustomize.print_entrypoints()\n\n# More explicit equivalent\nsitecustomize.print_entrypoints(group_name="sitecustomize")\n\n# Display only the first instance of each registered entrypoint in the sitecustomize group\nsitecustomize.print_entrypoints(filtered=True)\n```',
    'author': 'Dos Moonen',
    'author_email': 'd.moonen@nki.nl',
    'maintainer': 'Dos Moonen',
    'maintainer_email': 'd.moonen@nki.nl',
    'url': 'https://github.com/Darsstar/sitecustomize-entrypoints',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.7.2',
}


setup(**setup_kwargs)
