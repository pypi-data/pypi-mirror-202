"""
VALID CUSTOM FIELD TYPES FOR ENDPOINTS
======================================
"""

from typing import Literal, Iterable, Union, get_args


CustomField = Literal[
    "challenge_join_succeeded_ecvr",
    "Account Created CPE",
    "Product Viewed ECVR",
    "os",
    "Region (singular made)",
    "account_created",
    "FPMX EMEA Channel",
    "Account Authenticated CPE",
    "Data Source",
    "emea_secondary_kpi",
    "nike_training_club",
    "external_revenue",
    "onboarding_completed",
    "Singular - Revised Campaign Name",
    "neustar_file_export",
    "Workout Viewed ECVR",
    "Banner Name",
    "WC Campaign Identifier",
    "Kaden",
    "Notify Me",
    "completions",
    "kr_inno_tc",
    "emea_kpi",
    "logan",
    "order_placed_revenue",
    "workout_started",
    "order_completed_s2s_revenue_cpe",
    "Product Searched",
    "Challenge Join Succeeded CPE",
    "SESSION",
    "Order Completed - S2S (Count)",
    "Livestream Viewed ECVR",
    "emea_campaign_type",
    "Raw Revenue",
    "guided_run_started",
    "Platform",
    "adn_subadnetwork",
    "order_placed",
    "digital_turbine",
    "comnikesneakrsdebug",
    "Livestream Viewed CPE",
    "Liftoff",
    "Banners",
    "Account Authenticated ECVR",
    "Order Placed ECVR",
    "Workout Started CPE",
    "checkout_started_revenue",
    "channel",
    "media_math",
    "Order Completed",
    "InMobi DSP",
    "App",
    "guided_run_viewed_ecvr",
    "snkrs_app",
    "roi_original_cost",
    "Guided Run Started ECVR",
    "mai_breakdown",
    "KR_Innocean",
    "retained_users",
    "line_ads_platform",
    "order_completed_s2s_revenue",
    "Sub Ad Network",
    "Agency",
    "site_public_id",
    "roi_custom",
    "order_completed_ecvr",
    "Product Viewed",
    "NA - KPI",
    "account_created_cpe",
    "account_created_ecvr",
    "Order Placed",
    "Connector ID",
    "legacy_app",
    "CPI Configuration",
    "livestream_viewed_ecvr",
    "jp_identifier",
    "nike_run_club",
    "emea_shortened_campaign_name",
    "banners",
    "comnikeonenikecommerce_inhouse_snkrs",
    "liftoff",
    "product_clicked",
    " Channel (Retail)",
    "singular_revised_campaign_name",
    "product_list_viewed",
    "Program Started",
    "Cart Viewed ECVR",
    "Revenue",
    "Adikteev",
    "App Opens",
    "remerge",
    "order_placed_ecvr",
    "admon_source",
    "order_completed_custom",
    "adikteev",
    "order_completed",
    "product_viewed_ecvr",
    "teads",
    "KR_INNO_dotcom",
    "app_lovin",
    "Quickstart Run Started CPE",
    "Order Placed CPE",
    "Logan",
    "Thread CTA Clicked",
    "thread_viewed",
    "got_em_viewed",
    "Source (Consolidated)",
    "JP Identifier",
    "naver performance display ad",
    "order_completed_revenue",
    "demo_tracker_platform",
    "Custom order per click",
    "Country",
    "NA - SKAN",
    "nike_debug",
    "app",
    "Order Placed Count",
    "program_started",
    "ROI (Original Cost)",
    "Thread Viewed ECVR",
    "Order Completed CPE",
    "Product Added CPE",
    "Unique Order Completed Count",
    "fpmx_emea_channel",
    "thread_viewed_cpe",
    "registration",
    "product_viewed_cpe",
    "share",
    "wc_campaign_identifier",
    "kakao",
    "Product Added",
    "source_consolidated",
    "ad_marketplace",
    "Revenue (Custom)",
    "Product Clicked",
    "Product Viewed CPE",
    "moloco",
    "data_source",
    "guided_run_started_ecvr",
    "program_viewed",
    "MOLOCO",
    "session_ecvr",
    "CP Code",
    "emea_agency",
    "Onboarding Completed",
    "session_cpe",
    "Checkout Started Count",
    "singular_kpi",
    "Workout Viewed CPE",
    "source",
    "MAI Breakdown",
    "Singular - Campaign Type",
    "notify_me_selected",
    "notify_me_cpe",
    "Program Viewed",
    "emea_emea_only",
    "Notify Me Selected",
    "Order Completed Revenue",
    "EMEA Secondary KPI",
    "Got Em Viewed",
    "Guided Run Viewed",
    "emea_cdm_forreal",
    "emea_forreal",
    "product_added_cpe",
    "EXTERNAL_REVENUE",
    "product_searched",
    "agencies",
    "Google Registrations",
    "OS",
    "Retained Users",
    "Account Authenticated",
    "Zucks Affiliate",
    "arpu",
    "criteo",
    "paid_vs_non_paid",
    "workout_viewed_ecvr",
    "EMEA - Agency",
    "FBRevenue",
    "Program Started CPE",
    "order_placed_cpe",
    "KR_UM",
    "adMarketplace",
    "TikTok Ads",
    "Registration",
    "Test Event - Pure Play Metrics",
    "Nike Debug",
    "SmartNews",
    "KR_INNO_TC",
    "Tracker OS",
    "Purchase ECVR",
    "na_shortened_campaign_name",
    "account_authenticated_ecvr",
    "workout_viewed_cpe",
    "Legacy App",
    "Kakao",
    "Completions",
    "nike_app",
    "Tracker Platform",
    "Nike Run Club",
    "ROI (Custom)",
    "Guided Run Started",
    "Product List Viewed",
    "guided_run_viewed_cpe",
    "partner_fees",
    "awin",
    "Cart Viewed CPE",
    "smart_news",
    "cart_viewed",
    "unique_order_completed_count",
    "SESSION ECVR",
    "NA - Email",
    "Workout Viewed",
    "kr_echo",
    "cart_viewed_cpe",
    "purchase_cpe",
    "order_completed_count",
    "ARPU",
    "purchase_ecvr",
    "raw_revenue",
    "kr_inno_dotcom",
    "Criteo",
    "Nike Training Club",
    "zucks_adnetwork",
    "banner_name",
    "guided_run_viewed",
    "EMEA FORREAL",
    "session",
    "Cart Viewed",
    "Checkout Complete Revenue",
    "program_started_cpe",
    "creative_type",
    "retention_rate",
    "Zucks Adnetwork",
    "channel_retail",
    "REMERGE",
    "cp_code",
    "Jun Group",
    "Channel",
    "Order Completed - S2S (Revenue) CPE",
    "Purchase CPE",
    "Quickstart Run Started ECVR",
    "product_added",
    "Agencies",
    "Checkout Complete Count",
    "Neustar File Export",
    "Guided Run Viewed ECVR",
    "order_completed_s2s_revenue_ecvr",
    "cpi_configuration",
    "order_placed_count",
    "Favorite",
    "Paid vs. Non-Paid",
    "region_singular_made",
    "order_completed_cpe",
    "quickstart_run_started_cpe",
    "has_campaign_changes",
    "agency",
    "custom_order_per_click",
    "SESSION CPE",
    "CJ affiliate ",
    "Digital Turbine",
    "Account Created ECVR",
    "Partner Fees ",
    "Order Placed Revenue",
    "EMEA - Campaign Type",
    "roi",
    "Livestream Viewed",
    "Nike App",
    "checkout_complete_count",
    "singular_campaign_type",
    "notify_me",
    "Product Added ECVR",
    "EMEA - EMEA-only",
    "organization_name_field",
    "Rocketlab",
    "Notify Me ECVR",
    "Thread Viewed",
    "Notify Me CPE",
    "quickstart_run_started_ecvr",
    "Challenge Join Succeeded",
    "program_started_ecvr",
    "Ad Monetization Source",
    "Workout Started ECVR",
    "na_email",
    "cj_affiliate",
    "livestream_viewed_cpe",
    "na_kpi",
    "NbG iOS Test",
    "demo_tracker_os",
    "checkout_complete_revenue",
    "Reddit",
    "SNKRS App",
    "app_opens",
    "EMEA - Shortened Campaign Name",
    "Line Ads Platform",
    "NA - Shortened Campaign Name",
    "Retention Rate",
    "challenge_join_succeeded",
    "workout_started_ecvr",
    "Guided Run Viewed CPE",
    "in_mobi_dsp",
    "NA - Channel",
    "guided_run_started_cpe",
    "Program Started ECVR",
    "Share",
    "fbrevenue",
    "thread_cta_clicked",
    "favorite",
    "workout_viewed",
    "jun_group",
    "MediaMath",
    "Jordan Reporting",
    "kaden",
    "tik_tok_ads",
    "na_channel",
    "product_viewed",
    "com.nike.onenikecommerce-inhouse / SNKRS",
    "nb_g_i_os_test",
    "EMEA - KPI",
    "Order Completed Count",
    "Awin",
    "custom_revenue",
    "App ID",
    "livestream_viewed",
    "workout_started_cpe",
    "rocketlab",
    "reddit",
    "Guided Run Started CPE",
    "EMEA CDM FORREAL",
    "checkout_started_count",
    "order_completed_s2s_count",
    "zucks_affiliate",
    "com.nike.sneakrs.debug",
    "na_skan",
    "test_event_pure_play_metrics",
    "Order Completed - S2S (Revenue) ECVR",
    "ROI",
    "notify_me_ecvr",
    "Purchase",
    "Challenge Join Succeeded ECVR",
    "revenue",
    "account_authenticated",
    "TEADS",
    "naver_performance_display_ad",
    "quickstart_run_started",
    "Order Completed ECVR",
    "original_revenue",
    "Customer",
    "Has Campaign Changes",
    "AppLovin",
    "kr_um",
    "Order Completed - S2S (Revenue)",
    "kr_innocean",
    "platform",
    "retention",
    "purchase",
    "jordan_reporting",
    "Quickstart Run Started",
    "Original Revenue",
    "product_added_ecvr",
    "Workout Started",
    "Source",
    "useradnetwork",
    "Checkout Started Revenue",
    "country_field",
    "google_registrations",
    "Thread Viewed CPE",
    "Retargeting",
    "KR_Echo",
    "challenge_join_succeeded_cpe",
    "cart_viewed_ecvr",
    "Account Created",
    "Singular - KPI",
    "thread_viewed_ecvr",
    "Normalized Creative Type",
    "account_authenticated_cpe",
]

CustomFieldArgs = Union[Iterable[CustomField], str]

CUSTOM_FIELD = list(get_args(CustomField))

def is_custom_field(name: Union[str, CustomField]) -> bool:
    """
    Check if `name` is a valid custom `CustomField` from Singular.
    """
    return name in CUSTOM_FIELD


CustomFieldDisplay = Literal[
    "Test Event - Pure Play Metrics",
    "Account Created CPE",
    "Challenge Join Succeeded",
    "Nike Debug",
    "SmartNews",
    "KR_INNO_TC",
    "Product Viewed ECVR",
    "Region (singular made)",
    "Tracker OS",
    "FPMX EMEA Channel",
    "Account Authenticated CPE",
    "Data Source",
    "Purchase ECVR",
    "Ad Monetization Source",
    "Workout Started ECVR",
    "Legacy App",
    "KR_INNO_dotcom",
    "NbG iOS Test",
    "Quickstart Run Started CPE",
    "Kakao",
    "Order Placed CPE",
    "Completions",
    "Singular - Revised Campaign Name",
    "Workout Viewed ECVR",
    "Tracker Platform",
    "Nike Run Club",
    "ROI (Custom)",
    "Logan",
    "Thread CTA Clicked",
    "Banner Name",
    "Guided Run Started",
    "Reddit",
    "WC Campaign Identifier",
    "SNKRS App",
    "Source (Consolidated)",
    "Product List Viewed",
    "JP Identifier",
    "Kaden",
    "Notify Me",
    "EMEA - Shortened Campaign Name",
    "naver performance display ad",
    "Line Ads Platform",
    "Cart Viewed CPE",
    "NA - Shortened Campaign Name",
    "Retention Rate",
    "Custom order per click",
    "Country",
    "SESSION ECVR",
    "NA - Email",
    "NA - SKAN",
    "Workout Viewed",
    "Guided Run Viewed CPE",
    "ARPU",
    "NA - Channel",
    "Product Searched",
    "Program Started ECVR",
    "Share",
    "Challenge Join Succeeded CPE",
    "Order Placed Count",
    "MediaMath",
    "Jordan Reporting",
    "ROI (Original Cost)",
    "SESSION",
    "Criteo",
    "Nike Training Club",
    "Thread Viewed ECVR",
    "Order Completed CPE",
    "Order Completed - S2S (Count)",
    "Product Added CPE",
    "Unique Order Completed Count",
    "Livestream Viewed ECVR",
    "EMEA FORREAL",
    "com.nike.onenikecommerce-inhouse / SNKRS",
    "Cart Viewed",
    "Raw Revenue",
    "Product Added",
    "Platform",
    "Revenue (Custom)",
    "Checkout Complete Revenue",
    "EMEA - KPI",
    "Product Clicked",
    "Product Viewed CPE",
    "Order Completed Count",
    "Awin",
    "App ID",
    "MOLOCO",
    "Zucks Adnetwork",
    "CP Code",
    "Guided Run Started CPE",
    "EMEA CDM FORREAL",
    "Livestream Viewed CPE",
    "Liftoff",
    "Onboarding Completed",
    "REMERGE",
    "Jun Group",
    "Channel",
    "Checkout Started Count",
    "Banners",
    "Order Completed - S2S (Revenue) CPE",
    "Purchase CPE",
    "Account Authenticated ECVR",
    "Quickstart Run Started ECVR",
    "com.nike.sneakrs.debug",
    "Workout Viewed CPE",
    "Order Placed ECVR",
    "Order Completed - S2S (Revenue) ECVR",
    "Agencies",
    "MAI Breakdown",
    "Checkout Complete Count",
    "Neustar File Export",
    "Guided Run Viewed ECVR",
    "ROI",
    "Workout Started CPE",
    "Singular - Campaign Type",
    "Purchase",
    "Order Completed",
    "Challenge Join Succeeded ECVR",
    "InMobi DSP",
    "Program Viewed",
    "TEADS",
    "Favorite",
    "App",
    "Paid vs. Non-Paid",
    "Guided Run Started ECVR",
    "Notify Me Selected",
    "Order Completed Revenue",
    "Order Completed ECVR",
    "EMEA Secondary KPI",
    "KR_Innocean",
    "Got Em Viewed",
    "Customer",
    "Guided Run Viewed",
    "Has Campaign Changes",
    "Agency",
    "AppLovin",
    "Order Completed - S2S (Revenue)",
    "Sub Ad Network",
    "SESSION CPE",
    "CJ affiliate ",
    "Product Viewed",
    "NA - KPI",
    "Digital Turbine",
    "Account Created ECVR",
    "Partner Fees ",
    "EXTERNAL_REVENUE",
    "Original Revenue",
    "Quickstart Run Started",
    "Workout Started",
    "Google Registrations",
    "Order Placed Revenue",
    "EMEA - Campaign Type",
    "OS",
    "Retained Users",
    "Source",
    "Order Placed",
    "Account Authenticated",
    "Connector ID",
    "Zucks Affiliate",
    "Checkout Started Revenue",
    "CPI Configuration",
    "Livestream Viewed",
    "Nike App",
    "EMEA - Agency",
    "Thread Viewed CPE",
    "Retargeting",
    "FBRevenue",
    "KR_Echo",
    "Program Started CPE",
    " Channel (Retail)",
    "KR_UM",
    "Product Added ECVR",
    "EMEA - EMEA-only",
    "Program Started",
    "adMarketplace",
    "Account Created",
    "Cart Viewed ECVR",
    "Singular - KPI",
    "Rocketlab",
    "Notify Me ECVR",
    "Revenue",
    "TikTok Ads",
    "Normalized Creative Type",
    "Registration",
    "Thread Viewed",
    "Notify Me CPE",
    "Adikteev",
    "App Opens",
]

CustomFieldDisplayArgs = Union[Iterable[CustomFieldDisplay], str]

CUSTOM_FIELD_DISPLAY = list(get_args(CustomFieldDisplay))

def is_custom_field_display(name: Union[str, CustomFieldDisplay]) -> bool:
    """
    Check if `name` is a valid custom `CustomFieldDisplay` from Singular.
    """
    return name in CUSTOM_FIELD_DISPLAY


CustomFieldColumn = Literal[
    "quickstart_run_started_ecvr",
    "challenge_join_succeeded_ecvr",
    "order_placed_ecvr",
    "os",
    "admon_source",
    "account_created",
    "program_started_ecvr",
    "order_completed_custom",
    "adikteev",
    "order_completed",
    "na_email",
    "cj_affiliate",
    "account_authenticated_ecvr",
    "emea_secondary_kpi",
    "na_shortened_campaign_name",
    "nike_training_club",
    "product_viewed_ecvr",
    "external_revenue",
    "livestream_viewed_cpe",
    "workout_viewed_cpe",
    "teads",
    "na_kpi",
    "app_lovin",
    "onboarding_completed",
    "nike_app",
    "neustar_file_export",
    "demo_tracker_os",
    "checkout_complete_revenue",
    "thread_viewed",
    "got_em_viewed",
    "guided_run_viewed_cpe",
    "partner_fees",
    "app_opens",
    "awin",
    "order_completed_revenue",
    "smart_news",
    "demo_tracker_platform",
    "cart_viewed",
    "completions",
    "unique_order_completed_count",
    "kr_inno_tc",
    "challenge_join_succeeded",
    "workout_started_ecvr",
    "emea_kpi",
    "logan",
    "order_placed_revenue",
    "kr_echo",
    "cart_viewed_cpe",
    "nike_debug",
    "in_mobi_dsp",
    "purchase_cpe",
    "order_completed_s2s_revenue_cpe",
    "order_completed_count",
    "workout_started",
    "purchase_ecvr",
    "guided_run_started_cpe",
    "fbrevenue",
    "thread_cta_clicked",
    "app",
    "favorite",
    "raw_revenue",
    "jun_group",
    "workout_viewed",
    "kr_inno_dotcom",
    "program_started",
    "zucks_adnetwork",
    "kaden",
    "banner_name",
    "guided_run_viewed",
    "tik_tok_ads",
    "emea_campaign_type",
    "fpmx_emea_channel",
    "na_channel",
    "product_viewed",
    "thread_viewed_cpe",
    "session",
    "registration",
    "product_viewed_cpe",
    "share",
    "wc_campaign_identifier",
    "kakao",
    "guided_run_started",
    "source_consolidated",
    "ad_marketplace",
    "nb_g_i_os_test",
    "moloco",
    "program_started_cpe",
    "adn_subadnetwork",
    "data_source",
    "guided_run_started_ecvr",
    "order_placed",
    "custom_revenue",
    "program_viewed",
    "creative_type",
    "retention_rate",
    "session_ecvr",
    "livestream_viewed",
    "workout_started_cpe",
    "digital_turbine",
    "reddit",
    "rocketlab",
    "comnikesneakrsdebug",
    "checkout_started_count",
    "emea_agency",
    "channel_retail",
    "order_completed_s2s_count",
    "cp_code",
    "session_cpe",
    "zucks_affiliate",
    "product_added",
    "singular_kpi",
    "na_skan",
    "test_event_pure_play_metrics",
    "source",
    "order_completed_s2s_revenue_ecvr",
    "cpi_configuration",
    "checkout_started_revenue",
    "channel",
    "order_placed_count",
    "media_math",
    "notify_me_selected",
    "notify_me_ecvr",
    "notify_me_cpe",
    "emea_emea_only",
    "account_authenticated",
    "revenue",
    "guided_run_viewed_ecvr",
    "naver_performance_display_ad",
    "snkrs_app",
    "roi_original_cost",
    "quickstart_run_started",
    "region_singular_made",
    "mai_breakdown",
    "original_revenue",
    "order_completed_cpe",
    "retained_users",
    "line_ads_platform",
    "quickstart_run_started_cpe",
    "has_campaign_changes",
    "order_completed_s2s_revenue",
    "kr_um",
    "site_public_id",
    "roi_custom",
    "agency",
    "kr_innocean",
    "emea_cdm_forreal",
    "custom_order_per_click",
    "platform",
    "retention",
    "order_completed_ecvr",
    "account_created_cpe",
    "emea_forreal",
    "purchase",
    "jordan_reporting",
    "product_added_cpe",
    "account_created_ecvr",
    "agencies",
    "product_added_ecvr",
    "product_searched",
    "useradnetwork",
    "arpu",
    "criteo",
    "legacy_app",
    "paid_vs_non_paid",
    "roi",
    "livestream_viewed_ecvr",
    "country_field",
    "google_registrations",
    "checkout_complete_count",
    "workout_viewed_ecvr",
    "jp_identifier",
    "singular_campaign_type",
    "notify_me",
    "nike_run_club",
    "emea_shortened_campaign_name",
    "banners",
    "comnikeonenikecommerce_inhouse_snkrs",
    "liftoff",
    "product_clicked",
    "singular_revised_campaign_name",
    "order_placed_cpe",
    "challenge_join_succeeded_cpe",
    "cart_viewed_ecvr",
    "product_list_viewed",
    "organization_name_field",
    "thread_viewed_ecvr",
    "account_authenticated_cpe",
    "remerge",
]

CustomFieldColumnArgs = Union[Iterable[CustomFieldColumn], str]

CUSTOM_FIELD_COLUMN = list(get_args(CustomFieldColumn))

def is_custom_field_column(name: Union[str, CustomFieldColumn]) -> bool:
    """
    Check if `name` is a valid custom `CustomFieldColumn` from Singular.
    """
    return name in CUSTOM_FIELD_COLUMN


Filter = Literal[
    "KR_INNO_TC",
    "os",
    "Region (singular made)",
    "Tracker OS",
    "admon_source",
    "FPMX EMEA Channel",
    "Data Source",
    "Ad Monetization Source",
    "na_email",
    "na_shortened_campaign_name",
    "emea_secondary_kpi",
    "Legacy App",
    "na_kpi",
    "KR_INNO_dotcom",
    "Singular - Revised Campaign Name",
    "neustar_file_export",
    "Tracker Platform",
    "demo_tracker_os",
    "Banner Name",
    "WC Campaign Identifier",
    "Source (Consolidated)",
    "JP Identifier",
    "partner_fees",
    "EMEA - Shortened Campaign Name",
    "demo_tracker_platform",
    "NA - Shortened Campaign Name",
    "kr_inno_tc",
    "Country",
    "NA - Email",
    "emea_kpi",
    "NA - SKAN",
    "kr_echo",
    "NA - Channel",
    "app",
    "kr_inno_dotcom",
    "Jordan Reporting",
    "banner_name",
    "emea_campaign_type",
    "EMEA FORREAL",
    "fpmx_emea_channel",
    "na_channel",
    "wc_campaign_identifier",
    "source_consolidated",
    "Platform",
    "EMEA - KPI",
    "adn_subadnetwork",
    "data_source",
    "creative_type",
    "App ID",
    "EMEA CDM FORREAL",
    "emea_agency",
    "channel_retail",
    "Channel",
    "Banners",
    "singular_kpi",
    "na_skan",
    "source",
    "Agencies",
    "MAI Breakdown",
    "Neustar File Export",
    "cpi_configuration",
    "channel",
    "Singular - Campaign Type",
    "emea_emea_only",
    "App",
    "Paid vs. Non-Paid",
    "region_singular_made",
    "mai_breakdown",
    "EMEA Secondary KPI",
    "KR_Innocean",
    "has_campaign_changes",
    "Customer",
    "Has Campaign Changes",
    "Sub Ad Network",
    "Agency",
    "kr_um",
    "site_public_id",
    "agency",
    "kr_innocean",
    "emea_cdm_forreal",
    "platform",
    "retention",
    "NA - KPI",
    "emea_forreal",
    "jordan_reporting",
    "Partner Fees ",
    "agencies",
    "EMEA - Campaign Type",
    "OS",
    "Source",
    "useradnetwork",
    "Connector ID",
    "legacy_app",
    "paid_vs_non_paid",
    "CPI Configuration",
    "country_field",
    "jp_identifier",
    "EMEA - Agency",
    "singular_campaign_type",
    "Retargeting",
    "emea_shortened_campaign_name",
    "KR_Echo",
    "banners",
    " Channel (Retail)",
    "singular_revised_campaign_name",
    "KR_UM",
    "EMEA - EMEA-only",
    "organization_name_field",
    "Singular - KPI",
    "Normalized Creative Type",
]

FilterArgs = Union[Iterable[Filter], str]

FILTER = list(get_args(Filter))

def is_filter(name: Union[str, Filter]) -> bool:
    """
    Check if `name` is a valid custom `Filter` from Singular.
    """
    return name in FILTER


FilterDisplay = Literal[
    "Channel",
    "Banners",
    "NA - Email",
    "NA - KPI",
    "NA - SKAN",
    "KR_INNO_TC",
    "Region (singular made)",
    "NA - Channel",
    "Tracker OS",
    "Partner Fees ",
    "FPMX EMEA Channel",
    "Data Source",
    "Agencies",
    "Ad Monetization Source",
    "EMEA - Campaign Type",
    "Jordan Reporting",
    "MAI Breakdown",
    "Neustar File Export",
    "OS",
    "Source",
    "Singular - Campaign Type",
    "Legacy App",
    "Connector ID",
    "CPI Configuration",
    "KR_INNO_dotcom",
    "EMEA FORREAL",
    "EMEA - Agency",
    "Singular - Revised Campaign Name",
    "Retargeting",
    "Platform",
    "Tracker Platform",
    "KR_Echo",
    "App",
    " Channel (Retail)",
    "EMEA - KPI",
    "Banner Name",
    "KR_UM",
    "WC Campaign Identifier",
    "EMEA - EMEA-only",
    "Paid vs. Non-Paid",
    "Source (Consolidated)",
    "Sub Ad Network",
    "JP Identifier",
    "App ID",
    "EMEA - Shortened Campaign Name",
    "Singular - KPI",
    "EMEA Secondary KPI",
    "KR_Innocean",
    "NA - Shortened Campaign Name",
    "Normalized Creative Type",
    "Customer",
    "Has Campaign Changes",
    "EMEA CDM FORREAL",
    "Agency",
    "Country",
]

FilterDisplayArgs = Union[Iterable[FilterDisplay], str]

FILTER_DISPLAY = list(get_args(FilterDisplay))

def is_filter_display(name: Union[str, FilterDisplay]) -> bool:
    """
    Check if `name` is a valid custom `FilterDisplay` from Singular.
    """
    return name in FILTER_DISPLAY


FilterColumn = Literal[
    "kr_innocean",
    "emea_cdm_forreal",
    "platform",
    "emea_kpi",
    "retention",
    "kr_echo",
    "emea_forreal",
    "singular_kpi",
    "na_skan",
    "jordan_reporting",
    "os",
    "admon_source",
    "source",
    "app",
    "agencies",
    "kr_inno_dotcom",
    "cpi_configuration",
    "na_email",
    "na_shortened_campaign_name",
    "emea_secondary_kpi",
    "channel",
    "banner_name",
    "useradnetwork",
    "legacy_app",
    "paid_vs_non_paid",
    "na_kpi",
    "emea_campaign_type",
    "country_field",
    "fpmx_emea_channel",
    "na_channel",
    "jp_identifier",
    "singular_campaign_type",
    "neustar_file_export",
    "wc_campaign_identifier",
    "emea_emea_only",
    "source_consolidated",
    "demo_tracker_os",
    "emea_shortened_campaign_name",
    "banners",
    "singular_revised_campaign_name",
    "adn_subadnetwork",
    "data_source",
    "kr_um",
    "region_singular_made",
    "creative_type",
    "partner_fees",
    "organization_name_field",
    "mai_breakdown",
    "demo_tracker_platform",
    "has_campaign_changes",
    "emea_agency",
    "site_public_id",
    "kr_inno_tc",
    "channel_retail",
    "agency",
]

FilterColumnArgs = Union[Iterable[FilterColumn], str]

FILTER_COLUMN = list(get_args(FilterColumn))

def is_filter_column(name: Union[str, FilterColumn]) -> bool:
    """
    Check if `name` is a valid custom `FilterColumn` from Singular.
    """
    return name in FILTER_COLUMN


FILTER_MAPPING = {
    "channel_retail": " Channel (Retail)",
    "admon_source": "Ad Monetization Source",
    "agencies": "Agencies",
    "agency": "Agency",
    "app": "App",
    "site_public_id": "App ID",
    "banner_name": "Banner Name",
    "banners": "Banners",
    "cpi_configuration": "CPI Configuration",
    "channel": "Channel",
    "useradnetwork": "Connector ID",
    "country_field": "Country",
    "organization_name_field": "Customer",
    "data_source": "Data Source",
    "emea_agency": "EMEA - Agency",
    "emea_campaign_type": "EMEA - Campaign Type",
    "emea_emea_only": "EMEA - EMEA-only",
    "emea_kpi": "EMEA - KPI",
    "emea_shortened_campaign_name": "EMEA - Shortened Campaign Name",
    "emea_cdm_forreal": "EMEA CDM FORREAL",
    "emea_forreal": "EMEA FORREAL",
    "emea_secondary_kpi": "EMEA Secondary KPI",
    "fpmx_emea_channel": "FPMX EMEA Channel",
    "has_campaign_changes": "Has Campaign Changes",
    "jp_identifier": "JP Identifier",
    "jordan_reporting": "Jordan Reporting",
    "kr_echo": "KR_Echo",
    "kr_inno_tc": "KR_INNO_TC",
    "kr_inno_dotcom": "KR_INNO_dotcom",
    "kr_innocean": "KR_Innocean",
    "kr_um": "KR_UM",
    "legacy_app": "Legacy App",
    "mai_breakdown": "MAI Breakdown",
    "na_channel": "NA - Channel",
    "na_email": "NA - Email",
    "na_kpi": "NA - KPI",
    "na_skan": "NA - SKAN",
    "na_shortened_campaign_name": "NA - Shortened Campaign Name",
    "neustar_file_export": "Neustar File Export",
    "creative_type": "Normalized Creative Type",
    "os": "OS",
    "paid_vs_non_paid": "Paid vs. Non-Paid",
    "partner_fees": "Partner Fees ",
    "platform": "Platform",
    "region_singular_made": "Region (singular made)",
    "retention": "Retargeting",
    "singular_campaign_type": "Singular - Campaign Type",
    "singular_kpi": "Singular - KPI",
    "singular_revised_campaign_name": "Singular - Revised Campaign Name",
    "source": "Source",
    "source_consolidated": "Source (Consolidated)",
    "adn_subadnetwork": "Sub Ad Network",
    "demo_tracker_os": "Tracker OS",
    "demo_tracker_platform": "Tracker Platform",
    "wc_campaign_identifier": "WC Campaign Identifier",
}

CustomDimension = Literal[
    "cp_code",
    "emea_cdm_forreal",
    "kr_innocean",
    "Channel",
    "Banners",
    "NA - Email",
    "emea_kpi",
    "NA - SKAN",
    "NA - KPI",
    "kr_echo",
    "emea_forreal",
    "KR_INNO_TC",
    "singular_kpi",
    "na_skan",
    "jordan_reporting",
    "Region (singular made)",
    "NA - Channel",
    "FPMX EMEA Channel",
    "agencies",
    "Agencies",
    "kr_inno_dotcom",
    "EMEA - Campaign Type",
    "Jordan Reporting",
    "MAI Breakdown",
    "Neustar File Export",
    "na_email",
    "na_shortened_campaign_name",
    "emea_secondary_kpi",
    "channel",
    "emea_agency",
    "Singular - Campaign Type",
    "paid_vs_non_paid",
    "na_kpi",
    "KR_INNO_dotcom",
    "EMEA FORREAL",
    "emea_campaign_type",
    "fpmx_emea_channel",
    "na_channel",
    "jp_identifier",
    "EMEA - Agency",
    "singular_campaign_type",
    "Singular - Revised Campaign Name",
    "neustar_file_export",
    "wc_campaign_identifier",
    "emea_emea_only",
    "source_consolidated",
    "emea_shortened_campaign_name",
    "KR_Echo",
    "banners",
    " Channel (Retail)",
    "EMEA - KPI",
    "singular_revised_campaign_name",
    "KR_UM",
    "WC Campaign Identifier",
    "EMEA - EMEA-only",
    "Paid vs. Non-Paid",
    "Source (Consolidated)",
    "region_singular_made",
    "JP Identifier",
    "EMEA - Shortened Campaign Name",
    "Singular - KPI",
    "EMEA Secondary KPI",
    "mai_breakdown",
    "KR_Innocean",
    "NA - Shortened Campaign Name",
    "CP Code",
    "EMEA CDM FORREAL",
    "kr_um",
    "kr_inno_tc",
    "channel_retail",
]

CustomDimensionArgs = Union[Iterable[CustomDimension], str]

CUSTOM_DIMENSION = list(get_args(CustomDimension))

def is_custom_dimension(name: Union[str, CustomDimension]) -> bool:
    """
    Check if `name` is a valid custom `CustomDimension` from Singular.
    """
    return name in CUSTOM_DIMENSION


CustomDimensionDisplay = Literal[
    "Channel",
    "Banners",
    "NA - Email",
    "NA - KPI",
    "NA - SKAN",
    "KR_INNO_TC",
    "Region (singular made)",
    "NA - Channel",
    "FPMX EMEA Channel",
    "Agencies",
    "EMEA - Campaign Type",
    "Jordan Reporting",
    "MAI Breakdown",
    "Neustar File Export",
    "Singular - Campaign Type",
    "KR_INNO_dotcom",
    "EMEA FORREAL",
    "EMEA - Agency",
    "Singular - Revised Campaign Name",
    "KR_Echo",
    " Channel (Retail)",
    "EMEA - KPI",
    "KR_UM",
    "WC Campaign Identifier",
    "EMEA - EMEA-only",
    "Paid vs. Non-Paid",
    "Source (Consolidated)",
    "JP Identifier",
    "EMEA - Shortened Campaign Name",
    "Singular - KPI",
    "EMEA Secondary KPI",
    "KR_Innocean",
    "NA - Shortened Campaign Name",
    "CP Code",
    "EMEA CDM FORREAL",
]

CustomDimensionDisplayArgs = Union[Iterable[CustomDimensionDisplay], str]

CUSTOM_DIMENSION_DISPLAY = list(get_args(CustomDimensionDisplay))

def is_custom_dimension_display(name: Union[str, CustomDimensionDisplay]) -> bool:
    """
    Check if `name` is a valid custom `CustomDimensionDisplay` from Singular.
    """
    return name in CUSTOM_DIMENSION_DISPLAY


CustomDimensionColumn = Literal[
    "cp_code",
    "emea_cdm_forreal",
    "kr_innocean",
    "emea_kpi",
    "kr_echo",
    "emea_forreal",
    "singular_kpi",
    "na_skan",
    "jordan_reporting",
    "agencies",
    "kr_inno_dotcom",
    "na_email",
    "na_shortened_campaign_name",
    "emea_secondary_kpi",
    "channel",
    "paid_vs_non_paid",
    "na_kpi",
    "emea_campaign_type",
    "fpmx_emea_channel",
    "na_channel",
    "jp_identifier",
    "singular_campaign_type",
    "neustar_file_export",
    "wc_campaign_identifier",
    "emea_emea_only",
    "source_consolidated",
    "emea_shortened_campaign_name",
    "banners",
    "singular_revised_campaign_name",
    "region_singular_made",
    "mai_breakdown",
    "emea_agency",
    "kr_um",
    "kr_inno_tc",
    "channel_retail",
]

CustomDimensionColumnArgs = Union[Iterable[CustomDimensionColumn], str]

CUSTOM_DIMENSION_COLUMN = list(get_args(CustomDimensionColumn))

def is_custom_dimension_column(name: Union[str, CustomDimensionColumn]) -> bool:
    """
    Check if `name` is a valid custom `CustomDimensionColumn` from Singular.
    """
    return name in CUSTOM_DIMENSION_COLUMN


CUSTOM_DIMENSION_MAPPING = {
    "channel_retail": " Channel (Retail)",
    "agencies": "Agencies",
    "banners": "Banners",
    "cp_code": "CP Code",
    "channel": "Channel",
    "emea_agency": "EMEA - Agency",
    "emea_campaign_type": "EMEA - Campaign Type",
    "emea_emea_only": "EMEA - EMEA-only",
    "emea_kpi": "EMEA - KPI",
    "emea_shortened_campaign_name": "EMEA - Shortened Campaign Name",
    "emea_cdm_forreal": "EMEA CDM FORREAL",
    "emea_forreal": "EMEA FORREAL",
    "emea_secondary_kpi": "EMEA Secondary KPI",
    "fpmx_emea_channel": "FPMX EMEA Channel",
    "jp_identifier": "JP Identifier",
    "jordan_reporting": "Jordan Reporting",
    "kr_echo": "KR_Echo",
    "kr_inno_tc": "KR_INNO_TC",
    "kr_inno_dotcom": "KR_INNO_dotcom",
    "kr_innocean": "KR_Innocean",
    "kr_um": "KR_UM",
    "mai_breakdown": "MAI Breakdown",
    "na_channel": "NA - Channel",
    "na_email": "NA - Email",
    "na_kpi": "NA - KPI",
    "na_skan": "NA - SKAN",
    "na_shortened_campaign_name": "NA - Shortened Campaign Name",
    "neustar_file_export": "Neustar File Export",
    "paid_vs_non_paid": "Paid vs. Non-Paid",
    "region_singular_made": "Region (singular made)",
    "singular_campaign_type": "Singular - Campaign Type",
    "singular_kpi": "Singular - KPI",
    "singular_revised_campaign_name": "Singular - Revised Campaign Name",
    "source_consolidated": "Source (Consolidated)",
    "wc_campaign_identifier": "WC Campaign Identifier",
}

CohortMetric = Literal[
    "quickstart_run_started_ecvr",
    "Test Event - Pure Play Metrics",
    "challenge_join_succeeded_ecvr",
    "Challenge Join Succeeded",
    "Account Created CPE",
    "order_placed_ecvr",
    "Product Viewed ECVR",
    "account_created",
    "Account Authenticated CPE",
    "program_started_ecvr",
    "order_completed_custom",
    "Purchase ECVR",
    "Workout Started ECVR",
    "product_viewed_ecvr",
    "account_authenticated_ecvr",
    "workout_viewed_cpe",
    "livestream_viewed_cpe",
    "Quickstart Run Started CPE",
    "Order Placed CPE",
    "onboarding_completed",
    "Completions",
    "Workout Viewed ECVR",
    "ROI (Custom)",
    "Thread CTA Clicked",
    "checkout_complete_revenue",
    "thread_viewed",
    "Guided Run Started",
    "got_em_viewed",
    "Product List Viewed",
    "guided_run_viewed_cpe",
    "Notify Me",
    "app_opens",
    "order_completed_revenue",
    "Cart Viewed CPE",
    "Retention Rate",
    "cart_viewed",
    "completions",
    "unique_order_completed_count",
    "Custom order per click",
    "challenge_join_succeeded",
    "SESSION ECVR",
    "workout_started_ecvr",
    "order_placed_revenue",
    "Workout Viewed",
    "cart_viewed_cpe",
    "Guided Run Viewed CPE",
    "purchase_cpe",
    "workout_started",
    "order_completed_s2s_revenue_cpe",
    "order_completed_count",
    "ARPU",
    "purchase_ecvr",
    "guided_run_started_cpe",
    "Product Searched",
    "Program Started ECVR",
    "Share",
    "Challenge Join Succeeded CPE",
    "fbrevenue",
    "thread_cta_clicked",
    "favorite",
    "Order Placed Count",
    "raw_revenue",
    "workout_viewed",
    "program_started",
    "ROI (Original Cost)",
    "guided_run_viewed",
    "Thread Viewed ECVR",
    "Order Completed CPE",
    "Order Completed - S2S (Count)",
    "Product Added CPE",
    "Unique Order Completed Count",
    "Livestream Viewed ECVR",
    "product_viewed",
    "thread_viewed_cpe",
    "registration",
    "Cart Viewed",
    "product_viewed_cpe",
    "share",
    "Raw Revenue",
    "Product Added",
    "guided_run_started",
    "Revenue (Custom)",
    "Checkout Complete Revenue",
    "Product Clicked",
    "Product Viewed CPE",
    "program_started_cpe",
    "Order Completed Count",
    "guided_run_started_ecvr",
    "custom_revenue",
    "program_viewed",
    "retention_rate",
    "session_ecvr",
    "workout_started_cpe",
    "Guided Run Started CPE",
    "checkout_started_count",
    "Livestream Viewed CPE",
    "order_completed_s2s_count",
    "Onboarding Completed",
    "session_cpe",
    "Checkout Started Count",
    "Order Completed - S2S (Revenue) CPE",
    "Purchase CPE",
    "Account Authenticated ECVR",
    "Quickstart Run Started ECVR",
    "product_added",
    "Workout Viewed CPE",
    "test_event_pure_play_metrics",
    "Order Placed ECVR",
    "Order Completed - S2S (Revenue) ECVR",
    "Checkout Complete Count",
    "order_completed_s2s_revenue_ecvr",
    "Guided Run Viewed ECVR",
    "ROI",
    "Workout Started CPE",
    "checkout_started_revenue",
    "order_placed_count",
    "notify_me_selected",
    "notify_me_ecvr",
    "Purchase",
    "notify_me_cpe",
    "Challenge Join Succeeded ECVR",
    "Program Viewed",
    "revenue",
    "account_authenticated",
    "Favorite",
    "guided_run_viewed_ecvr",
    "roi_original_cost",
    "quickstart_run_started",
    "Guided Run Started ECVR",
    "Notify Me Selected",
    "Order Completed Revenue",
    "Order Completed ECVR",
    "original_revenue",
    "order_completed_cpe",
    "retained_users",
    "quickstart_run_started_cpe",
    "Got Em Viewed",
    "order_completed_s2s_revenue",
    "Guided Run Viewed",
    "roi_custom",
    "Order Completed - S2S (Revenue)",
    "custom_order_per_click",
    "SESSION CPE",
    "order_completed_ecvr",
    "Product Viewed",
    "account_created_cpe",
    "purchase",
    "Account Created ECVR",
    "product_added_cpe",
    "Quickstart Run Started",
    "Original Revenue",
    "account_created_ecvr",
    "product_added_ecvr",
    "product_searched",
    "Workout Started",
    "Google Registrations",
    "Order Placed Revenue",
    "Retained Users",
    "Account Authenticated",
    "arpu",
    "roi",
    "Checkout Started Revenue",
    "livestream_viewed_ecvr",
    "google_registrations",
    "checkout_complete_count",
    "workout_viewed_ecvr",
    "notify_me",
    "Thread Viewed CPE",
    "FBRevenue",
    "Program Started CPE",
    "product_clicked",
    "order_placed_cpe",
    "challenge_join_succeeded_cpe",
    "cart_viewed_ecvr",
    "Product Added ECVR",
    "Program Started",
    "product_list_viewed",
    "Account Created",
    "Cart Viewed ECVR",
    "thread_viewed_ecvr",
    "Notify Me ECVR",
    "Revenue",
    "Registration",
    "Thread Viewed",
    "Notify Me CPE",
    "account_authenticated_cpe",
    "App Opens",
]

CohortMetricArgs = Union[Iterable[CohortMetric], str]

COHORT_METRIC = list(get_args(CohortMetric))

def is_cohort_metric(name: Union[str, CohortMetric]) -> bool:
    """
    Check if `name` is a valid custom `CohortMetric` from Singular.
    """
    return name in COHORT_METRIC


CohortMetricDisplay = Literal[
    "Test Event - Pure Play Metrics",
    "Account Created CPE",
    "Challenge Join Succeeded",
    "Product Viewed ECVR",
    "Account Authenticated CPE",
    "Purchase ECVR",
    "Workout Started ECVR",
    "Quickstart Run Started CPE",
    "Order Placed CPE",
    "Completions",
    "Workout Viewed ECVR",
    "ROI (Custom)",
    "Thread CTA Clicked",
    "Guided Run Started",
    "Product List Viewed",
    "Notify Me",
    "Cart Viewed CPE",
    "Retention Rate",
    "Custom order per click",
    "SESSION ECVR",
    "Workout Viewed",
    "Guided Run Viewed CPE",
    "ARPU",
    "Product Searched",
    "Program Started ECVR",
    "Share",
    "Challenge Join Succeeded CPE",
    "Order Placed Count",
    "ROI (Original Cost)",
    "Thread Viewed ECVR",
    "Order Completed CPE",
    "Order Completed - S2S (Count)",
    "Product Added CPE",
    "Unique Order Completed Count",
    "Livestream Viewed ECVR",
    "Cart Viewed",
    "Raw Revenue",
    "Product Added",
    "Revenue (Custom)",
    "Checkout Complete Revenue",
    "Product Clicked",
    "Product Viewed CPE",
    "Order Completed Count",
    "Guided Run Started CPE",
    "Livestream Viewed CPE",
    "Onboarding Completed",
    "Checkout Started Count",
    "Order Completed - S2S (Revenue) CPE",
    "Purchase CPE",
    "Account Authenticated ECVR",
    "Quickstart Run Started ECVR",
    "Workout Viewed CPE",
    "Order Placed ECVR",
    "Order Completed - S2S (Revenue) ECVR",
    "Checkout Complete Count",
    "Guided Run Viewed ECVR",
    "ROI",
    "Workout Started CPE",
    "Purchase",
    "Challenge Join Succeeded ECVR",
    "Program Viewed",
    "Favorite",
    "Guided Run Started ECVR",
    "Notify Me Selected",
    "Order Completed Revenue",
    "Order Completed ECVR",
    "Got Em Viewed",
    "Guided Run Viewed",
    "Order Completed - S2S (Revenue)",
    "SESSION CPE",
    "Product Viewed",
    "Account Created ECVR",
    "Quickstart Run Started",
    "Original Revenue",
    "Workout Started",
    "Google Registrations",
    "Order Placed Revenue",
    "Retained Users",
    "Account Authenticated",
    "Checkout Started Revenue",
    "Thread Viewed CPE",
    "FBRevenue",
    "Program Started CPE",
    "Product Added ECVR",
    "Program Started",
    "Account Created",
    "Cart Viewed ECVR",
    "Notify Me ECVR",
    "Revenue",
    "Registration",
    "Thread Viewed",
    "Notify Me CPE",
    "App Opens",
]

CohortMetricDisplayArgs = Union[Iterable[CohortMetricDisplay], str]

COHORT_METRIC_DISPLAY = list(get_args(CohortMetricDisplay))

def is_cohort_metric_display(name: Union[str, CohortMetricDisplay]) -> bool:
    """
    Check if `name` is a valid custom `CohortMetricDisplay` from Singular.
    """
    return name in COHORT_METRIC_DISPLAY


CohortMetricColumn = Literal[
    "quickstart_run_started_ecvr",
    "challenge_join_succeeded_ecvr",
    "order_placed_ecvr",
    "account_created",
    "program_started_ecvr",
    "order_completed_custom",
    "product_viewed_ecvr",
    "account_authenticated_ecvr",
    "workout_viewed_cpe",
    "livestream_viewed_cpe",
    "onboarding_completed",
    "checkout_complete_revenue",
    "thread_viewed",
    "got_em_viewed",
    "guided_run_viewed_cpe",
    "app_opens",
    "order_completed_revenue",
    "cart_viewed",
    "completions",
    "unique_order_completed_count",
    "challenge_join_succeeded",
    "workout_started_ecvr",
    "order_placed_revenue",
    "cart_viewed_cpe",
    "purchase_cpe",
    "workout_started",
    "order_completed_s2s_revenue_cpe",
    "order_completed_count",
    "purchase_ecvr",
    "guided_run_started_cpe",
    "fbrevenue",
    "thread_cta_clicked",
    "favorite",
    "raw_revenue",
    "workout_viewed",
    "program_started",
    "guided_run_viewed",
    "product_viewed",
    "thread_viewed_cpe",
    "registration",
    "product_viewed_cpe",
    "share",
    "guided_run_started",
    "program_started_cpe",
    "guided_run_started_ecvr",
    "custom_revenue",
    "program_viewed",
    "retention_rate",
    "session_ecvr",
    "workout_started_cpe",
    "checkout_started_count",
    "order_completed_s2s_count",
    "session_cpe",
    "product_added",
    "test_event_pure_play_metrics",
    "order_completed_s2s_revenue_ecvr",
    "checkout_started_revenue",
    "order_placed_count",
    "notify_me_selected",
    "notify_me_ecvr",
    "notify_me_cpe",
    "revenue",
    "account_authenticated",
    "guided_run_viewed_ecvr",
    "roi_original_cost",
    "quickstart_run_started",
    "original_revenue",
    "order_completed_cpe",
    "retained_users",
    "quickstart_run_started_cpe",
    "order_completed_s2s_revenue",
    "roi_custom",
    "custom_order_per_click",
    "order_completed_ecvr",
    "account_created_cpe",
    "purchase",
    "product_added_cpe",
    "account_created_ecvr",
    "product_added_ecvr",
    "product_searched",
    "arpu",
    "roi",
    "livestream_viewed_ecvr",
    "google_registrations",
    "checkout_complete_count",
    "workout_viewed_ecvr",
    "notify_me",
    "product_clicked",
    "order_placed_cpe",
    "challenge_join_succeeded_cpe",
    "cart_viewed_ecvr",
    "product_list_viewed",
    "thread_viewed_ecvr",
    "account_authenticated_cpe",
]

CohortMetricColumnArgs = Union[Iterable[CohortMetricColumn], str]

COHORT_METRIC_COLUMN = list(get_args(CohortMetricColumn))

def is_cohort_metric_column(name: Union[str, CohortMetricColumn]) -> bool:
    """
    Check if `name` is a valid custom `CohortMetricColumn` from Singular.
    """
    return name in COHORT_METRIC_COLUMN


COHORT_METRIC_MAPPING = {
    "arpu": "ARPU",
    "account_authenticated": "Account Authenticated",
    "account_authenticated_cpe": "Account Authenticated CPE",
    "account_authenticated_ecvr": "Account Authenticated ECVR",
    "account_created": "Account Created",
    "account_created_cpe": "Account Created CPE",
    "account_created_ecvr": "Account Created ECVR",
    "app_opens": "App Opens",
    "cart_viewed": "Cart Viewed",
    "cart_viewed_cpe": "Cart Viewed CPE",
    "cart_viewed_ecvr": "Cart Viewed ECVR",
    "challenge_join_succeeded": "Challenge Join Succeeded",
    "challenge_join_succeeded_cpe": "Challenge Join Succeeded CPE",
    "challenge_join_succeeded_ecvr": "Challenge Join Succeeded ECVR",
    "checkout_complete_count": "Checkout Complete Count",
    "checkout_complete_revenue": "Checkout Complete Revenue",
    "checkout_started_count": "Checkout Started Count",
    "checkout_started_revenue": "Checkout Started Revenue",
    "completions": "Completions",
    "custom_order_per_click": "Custom order per click",
    "fbrevenue": "FBRevenue",
    "favorite": "Favorite",
    "google_registrations": "Google Registrations",
    "got_em_viewed": "Got Em Viewed",
    "guided_run_started": "Guided Run Started",
    "guided_run_started_cpe": "Guided Run Started CPE",
    "guided_run_started_ecvr": "Guided Run Started ECVR",
    "guided_run_viewed": "Guided Run Viewed",
    "guided_run_viewed_cpe": "Guided Run Viewed CPE",
    "guided_run_viewed_ecvr": "Guided Run Viewed ECVR",
    "livestream_viewed_cpe": "Livestream Viewed CPE",
    "livestream_viewed_ecvr": "Livestream Viewed ECVR",
    "notify_me": "Notify Me",
    "notify_me_cpe": "Notify Me CPE",
    "notify_me_ecvr": "Notify Me ECVR",
    "notify_me_selected": "Notify Me Selected",
    "onboarding_completed": "Onboarding Completed",
    "order_completed_s2s_count": "Order Completed - S2S (Count)",
    "order_completed_s2s_revenue": "Order Completed - S2S (Revenue)",
    "order_completed_s2s_revenue_cpe": "Order Completed - S2S (Revenue) CPE",
    "order_completed_s2s_revenue_ecvr": "Order Completed - S2S (Revenue) ECVR",
    "order_completed_cpe": "Order Completed CPE",
    "order_completed_count": "Order Completed Count",
    "order_completed_ecvr": "Order Completed ECVR",
    "order_completed_revenue": "Order Completed Revenue",
    "order_placed_cpe": "Order Placed CPE",
    "order_placed_count": "Order Placed Count",
    "order_placed_ecvr": "Order Placed ECVR",
    "order_placed_revenue": "Order Placed Revenue",
    "original_revenue": "Original Revenue",
    "product_added": "Product Added",
    "product_added_cpe": "Product Added CPE",
    "product_added_ecvr": "Product Added ECVR",
    "product_clicked": "Product Clicked",
    "product_list_viewed": "Product List Viewed",
    "product_searched": "Product Searched",
    "product_viewed": "Product Viewed",
    "product_viewed_cpe": "Product Viewed CPE",
    "product_viewed_ecvr": "Product Viewed ECVR",
    "program_started": "Program Started",
    "program_started_cpe": "Program Started CPE",
    "program_started_ecvr": "Program Started ECVR",
    "program_viewed": "Program Viewed",
    "purchase": "Purchase",
    "purchase_cpe": "Purchase CPE",
    "purchase_ecvr": "Purchase ECVR",
    "quickstart_run_started": "Quickstart Run Started",
    "quickstart_run_started_cpe": "Quickstart Run Started CPE",
    "quickstart_run_started_ecvr": "Quickstart Run Started ECVR",
    "roi": "ROI",
    "roi_custom": "ROI (Custom)",
    "roi_original_cost": "ROI (Original Cost)",
    "raw_revenue": "Raw Revenue",
    "registration": "Registration",
    "retained_users": "Retained Users",
    "retention_rate": "Retention Rate",
    "custom_revenue": "Revenue",
    "revenue": "Revenue",
    "order_completed_custom": "Revenue (Custom)",
    "session_cpe": "SESSION CPE",
    "session_ecvr": "SESSION ECVR",
    "share": "Share",
    "test_event_pure_play_metrics": "Test Event - Pure Play Metrics",
    "thread_cta_clicked": "Thread CTA Clicked",
    "thread_viewed": "Thread Viewed",
    "thread_viewed_cpe": "Thread Viewed CPE",
    "thread_viewed_ecvr": "Thread Viewed ECVR",
    "unique_order_completed_count": "Unique Order Completed Count",
    "workout_started": "Workout Started",
    "workout_started_cpe": "Workout Started CPE",
    "workout_started_ecvr": "Workout Started ECVR",
    "workout_viewed": "Workout Viewed",
    "workout_viewed_cpe": "Workout Viewed CPE",
    "workout_viewed_ecvr": "Workout Viewed ECVR",
}

SkanEvent = Literal[
    "Product Viewed",
    "Challenge Join Succeeded",
    "Workout Viewed",
    "product_added",
    "workout_started",
    "account_created",
    "Quickstart Run Started",
    "EXTERNAL_REVENUE",
    "workout_viewed",
    "Workout Started",
    "order_completed",
    "program_started",
    "SESSION",
    "external_revenue",
    "guided_run_viewed",
    "Order Placed",
    "Account Authenticated",
    "product_viewed",
    "Livestream Viewed",
    "session",
    "Order Completed",
    "Cart Viewed",
    "Product Added",
    "guided_run_started",
    "account_authenticated",
    "order_placed",
    "thread_viewed",
    "Guided Run Started",
    "Program Started",
    "quickstart_run_started",
    "Account Created",
    "livestream_viewed",
    "Thread Viewed",
    "cart_viewed",
    "Guided Run Viewed",
    "challenge_join_succeeded",
]

SkanEventArgs = Union[Iterable[SkanEvent], str]

SKAN_EVENT = list(get_args(SkanEvent))

def is_skan_event(name: Union[str, SkanEvent]) -> bool:
    """
    Check if `name` is a valid custom `SkanEvent` from Singular.
    """
    return name in SKAN_EVENT


SkanEventDisplay = Literal[
    "Livestream Viewed",
    "Workout Started",
    "Order Completed",
    "Cart Viewed",
    "Account Created",
    "Guided Run Started",
    "SESSION",
    "Product Added",
    "Product Viewed",
    "Challenge Join Succeeded",
    "Workout Viewed",
    "Thread Viewed",
    "Order Placed",
    "Account Authenticated",
    "Guided Run Viewed",
    "EXTERNAL_REVENUE",
    "Program Started",
    "Quickstart Run Started",
]

SkanEventDisplayArgs = Union[Iterable[SkanEventDisplay], str]

SKAN_EVENT_DISPLAY = list(get_args(SkanEventDisplay))

def is_skan_event_display(name: Union[str, SkanEventDisplay]) -> bool:
    """
    Check if `name` is a valid custom `SkanEventDisplay` from Singular.
    """
    return name in SKAN_EVENT_DISPLAY


SkanEventColumn = Literal[
    "session",
    "order_completed",
    "livestream_viewed",
    "program_started",
    "workout_viewed",
    "guided_run_started",
    "account_authenticated",
    "quickstart_run_started",
    "product_added",
    "thread_viewed",
    "external_revenue",
    "guided_run_viewed",
    "cart_viewed",
    "workout_started",
    "order_placed",
    "account_created",
    "product_viewed",
    "challenge_join_succeeded",
]

SkanEventColumnArgs = Union[Iterable[SkanEventColumn], str]

SKAN_EVENT_COLUMN = list(get_args(SkanEventColumn))

def is_skan_event_column(name: Union[str, SkanEventColumn]) -> bool:
    """
    Check if `name` is a valid custom `SkanEventColumn` from Singular.
    """
    return name in SKAN_EVENT_COLUMN


SKAN_EVENT_MAPPING = {
    "account_authenticated": "Account Authenticated",
    "account_created": "Account Created",
    "cart_viewed": "Cart Viewed",
    "challenge_join_succeeded": "Challenge Join Succeeded",
    "external_revenue": "EXTERNAL_REVENUE",
    "guided_run_started": "Guided Run Started",
    "guided_run_viewed": "Guided Run Viewed",
    "livestream_viewed": "Livestream Viewed",
    "order_completed": "Order Completed",
    "order_placed": "Order Placed",
    "product_added": "Product Added",
    "product_viewed": "Product Viewed",
    "program_started": "Program Started",
    "quickstart_run_started": "Quickstart Run Started",
    "session": "SESSION",
    "thread_viewed": "Thread Viewed",
    "workout_started": "Workout Started",
    "workout_viewed": "Workout Viewed",
}

App = Literal[
    "Nike App",
    "nike_app",
    "nike_run_club",
    "Nike Training Club",
    "Nike Debug",
    "NbG iOS Test",
    "com.nike.sneakrs.debug",
    "Nike Run Club",
    "nike_training_club",
    "comnikeonenikecommerce_inhouse_snkrs",
    "nb_g_i_os_test",
    "nike_debug",
    "comnikesneakrsdebug",
    "snkrs_app",
    "SNKRS App",
    "com.nike.onenikecommerce-inhouse / SNKRS",
]

AppArgs = Union[Iterable[App], str]

APP = list(get_args(App))

def is_app(name: Union[str, App]) -> bool:
    """
    Check if `name` is a valid custom `App` from Singular.
    """
    return name in APP


AppDisplay = Literal[
    "Nike App",
    "Nike Training Club",
    "Nike Debug",
    "Nike Run Club",
    "com.nike.sneakrs.debug",
    "com.nike.onenikecommerce-inhouse / SNKRS",
    "SNKRS App",
    "NbG iOS Test",
]

AppDisplayArgs = Union[Iterable[AppDisplay], str]

APP_DISPLAY = list(get_args(AppDisplay))

def is_app_display(name: Union[str, AppDisplay]) -> bool:
    """
    Check if `name` is a valid custom `AppDisplay` from Singular.
    """
    return name in APP_DISPLAY


AppColumn = Literal[
    "nike_app",
    "nike_run_club",
    "nike_training_club",
    "comnikeonenikecommerce_inhouse_snkrs",
    "nb_g_i_os_test",
    "nike_debug",
    "comnikesneakrsdebug",
    "snkrs_app",
]

AppColumnArgs = Union[Iterable[AppColumn], str]

APP_COLUMN = list(get_args(AppColumn))

def is_app_column(name: Union[str, AppColumn]) -> bool:
    """
    Check if `name` is a valid custom `AppColumn` from Singular.
    """
    return name in APP_COLUMN


APP_MAPPING = {
    "nb_g_i_os_test": "NbG iOS Test",
    "nike_app": "Nike App",
    "nike_debug": "Nike Debug",
    "nike_run_club": "Nike Run Club",
    "nike_training_club": "Nike Training Club",
    "snkrs_app": "SNKRS App",
    "comnikeonenikecommerce_inhouse_snkrs": "com.nike.onenikecommerce-inhouse / SNKRS",
    "comnikesneakrsdebug": "com.nike.sneakrs.debug",
}

AllPartner = Literal[
    "Jun Group",
    "CJ affiliate ",
    "zucks_affiliate",
    "logan",
    "SmartNews",
    "Digital Turbine",
    "in_mobi_dsp",
    "jun_group",
    "MediaMath",
    "adikteev",
    "Criteo",
    "cj_affiliate",
    "zucks_adnetwork",
    "kaden",
    "Zucks Affiliate",
    "teads",
    "criteo",
    "media_math",
    "tik_tok_ads",
    "app_lovin",
    "Kakao",
    "remerge",
    "InMobi DSP",
    "kakao",
    "TEADS",
    "ad_marketplace",
    "liftoff",
    "naver_performance_display_ad",
    "moloco",
    "Logan",
    "Awin",
    "Reddit",
    "adMarketplace",
    "Kaden",
    "MOLOCO",
    "awin",
    "naver performance display ad",
    "Rocketlab",
    "digital_turbine",
    "Line Ads Platform",
    "TikTok Ads",
    "reddit",
    "Zucks Adnetwork",
    "rocketlab",
    "smart_news",
    "line_ads_platform",
    "AppLovin",
    "Adikteev",
    "Liftoff",
    "REMERGE",
]

AllPartnerArgs = Union[Iterable[AllPartner], str]

ALL_PARTNER = list(get_args(AllPartner))

def is_all_partner(name: Union[str, AllPartner]) -> bool:
    """
    Check if `name` is a valid custom `AllPartner` from Singular.
    """
    return name in ALL_PARTNER


AllPartnerDisplay = Literal[
    "Jun Group",
    "CJ affiliate ",
    "SmartNews",
    "Digital Turbine",
    "MediaMath",
    "Criteo",
    "Zucks Affiliate",
    "Kakao",
    "InMobi DSP",
    "TEADS",
    "Logan",
    "Awin",
    "Reddit",
    "adMarketplace",
    "Kaden",
    "MOLOCO",
    "naver performance display ad",
    "Rocketlab",
    "Line Ads Platform",
    "TikTok Ads",
    "Zucks Adnetwork",
    "AppLovin",
    "Adikteev",
    "Liftoff",
    "REMERGE",
]

AllPartnerDisplayArgs = Union[Iterable[AllPartnerDisplay], str]

ALL_PARTNER_DISPLAY = list(get_args(AllPartnerDisplay))

def is_all_partner_display(name: Union[str, AllPartnerDisplay]) -> bool:
    """
    Check if `name` is a valid custom `AllPartnerDisplay` from Singular.
    """
    return name in ALL_PARTNER_DISPLAY


AllPartnerColumn = Literal[
    "zucks_affiliate",
    "logan",
    "in_mobi_dsp",
    "jun_group",
    "adikteev",
    "cj_affiliate",
    "zucks_adnetwork",
    "kaden",
    "teads",
    "criteo",
    "media_math",
    "tik_tok_ads",
    "app_lovin",
    "kakao",
    "ad_marketplace",
    "liftoff",
    "naver_performance_display_ad",
    "moloco",
    "awin",
    "digital_turbine",
    "reddit",
    "rocketlab",
    "smart_news",
    "line_ads_platform",
    "remerge",
]

AllPartnerColumnArgs = Union[Iterable[AllPartnerColumn], str]

ALL_PARTNER_COLUMN = list(get_args(AllPartnerColumn))

def is_all_partner_column(name: Union[str, AllPartnerColumn]) -> bool:
    """
    Check if `name` is a valid custom `AllPartnerColumn` from Singular.
    """
    return name in ALL_PARTNER_COLUMN


ALL_PARTNER_MAPPING = {
    "adikteev": "Adikteev",
    "app_lovin": "AppLovin",
    "awin": "Awin",
    "cj_affiliate": "CJ affiliate ",
    "criteo": "Criteo",
    "digital_turbine": "Digital Turbine",
    "in_mobi_dsp": "InMobi DSP",
    "jun_group": "Jun Group",
    "kaden": "Kaden",
    "kakao": "Kakao",
    "liftoff": "Liftoff",
    "line_ads_platform": "Line Ads Platform",
    "logan": "Logan",
    "moloco": "MOLOCO",
    "media_math": "MediaMath",
    "remerge": "REMERGE",
    "reddit": "Reddit",
    "rocketlab": "Rocketlab",
    "smart_news": "SmartNews",
    "teads": "TEADS",
    "tik_tok_ads": "TikTok Ads",
    "zucks_adnetwork": "Zucks Adnetwork",
    "zucks_affiliate": "Zucks Affiliate",
    "ad_marketplace": "adMarketplace",
    "naver_performance_display_ad": "naver performance display ad",
}

SkanEventAndCohortMetric = Literal[
    "Product Viewed",
    "Challenge Join Succeeded",
    "Workout Viewed",
    "product_added",
    "workout_started",
    "account_created",
    "Quickstart Run Started",
    "workout_viewed",
    "Workout Started",
    "program_started",
    "guided_run_viewed",
    "Account Authenticated",
    "product_viewed",
    "Cart Viewed",
    "Product Added",
    "guided_run_started",
    "account_authenticated",
    "thread_viewed",
    "Guided Run Started",
    "Program Started",
    "quickstart_run_started",
    "Account Created",
    "Thread Viewed",
    "cart_viewed",
    "Guided Run Viewed",
    "challenge_join_succeeded",
]

SkanEventAndCohortMetricArgs = Union[Iterable[SkanEventAndCohortMetric], str]

SKAN_EVENT_AND_COHORT_METRIC = list(get_args(SkanEventAndCohortMetric))

def is_skan_event_and_cohort_metric(name: Union[str, SkanEventAndCohortMetric]) -> bool:
    """
    Check if `name` is a valid custom `SkanEventAndCohortMetric` from Singular.
    """
    return name in SKAN_EVENT_AND_COHORT_METRIC


SkanEventAndCohortMetricDisplay = Literal[
    "Workout Started",
    "Cart Viewed",
    "Account Created",
    "Product Added",
    "Product Viewed",
    "Challenge Join Succeeded",
    "Workout Viewed",
    "Thread Viewed",
    "Account Authenticated",
    "Guided Run Viewed",
    "Guided Run Started",
    "Program Started",
    "Quickstart Run Started",
]

SkanEventAndCohortMetricDisplayArgs = Union[Iterable[SkanEventAndCohortMetricDisplay], str]

SKAN_EVENT_AND_COHORT_METRIC_DISPLAY = list(get_args(SkanEventAndCohortMetricDisplay))

def is_skan_event_and_cohort_metric_display(name: Union[str, SkanEventAndCohortMetricDisplay]) -> bool:
    """
    Check if `name` is a valid custom `SkanEventAndCohortMetricDisplay` from Singular.
    """
    return name in SKAN_EVENT_AND_COHORT_METRIC_DISPLAY


SkanEventAndCohortMetricColumn = Literal[
    "program_started",
    "workout_viewed",
    "guided_run_started",
    "account_authenticated",
    "quickstart_run_started",
    "product_added",
    "thread_viewed",
    "guided_run_viewed",
    "workout_started",
    "cart_viewed",
    "account_created",
    "product_viewed",
    "challenge_join_succeeded",
]

SkanEventAndCohortMetricColumnArgs = Union[Iterable[SkanEventAndCohortMetricColumn], str]

SKAN_EVENT_AND_COHORT_METRIC_COLUMN = list(get_args(SkanEventAndCohortMetricColumn))

def is_skan_event_and_cohort_metric_column(name: Union[str, SkanEventAndCohortMetricColumn]) -> bool:
    """
    Check if `name` is a valid custom `SkanEventAndCohortMetricColumn` from Singular.
    """
    return name in SKAN_EVENT_AND_COHORT_METRIC_COLUMN


SKAN_EVENT_AND_COHORT_METRIC_MAPPING = {
    "account_authenticated": "Account Authenticated",
    "account_created": "Account Created",
    "cart_viewed": "Cart Viewed",
    "challenge_join_succeeded": "Challenge Join Succeeded",
    "guided_run_started": "Guided Run Started",
    "guided_run_viewed": "Guided Run Viewed",
    "product_added": "Product Added",
    "product_viewed": "Product Viewed",
    "program_started": "Program Started",
    "quickstart_run_started": "Quickstart Run Started",
    "thread_viewed": "Thread Viewed",
    "workout_started": "Workout Started",
    "workout_viewed": "Workout Viewed",
}

FilterAndCustomDimension = Literal[
    "kr_innocean",
    "emea_cdm_forreal",
    "Channel",
    "Banners",
    "NA - Email",
    "emea_kpi",
    "NA - SKAN",
    "NA - KPI",
    "kr_echo",
    "emea_forreal",
    "KR_INNO_TC",
    "singular_kpi",
    "na_skan",
    "jordan_reporting",
    "Region (singular made)",
    "NA - Channel",
    "FPMX EMEA Channel",
    "agencies",
    "Agencies",
    "kr_inno_dotcom",
    "EMEA - Campaign Type",
    "Jordan Reporting",
    "MAI Breakdown",
    "Neustar File Export",
    "na_email",
    "na_shortened_campaign_name",
    "emea_secondary_kpi",
    "channel",
    "emea_agency",
    "Singular - Campaign Type",
    "paid_vs_non_paid",
    "na_kpi",
    "KR_INNO_dotcom",
    "EMEA FORREAL",
    "emea_campaign_type",
    "fpmx_emea_channel",
    "na_channel",
    "jp_identifier",
    "EMEA - Agency",
    "singular_campaign_type",
    "Singular - Revised Campaign Name",
    "neustar_file_export",
    "wc_campaign_identifier",
    "emea_emea_only",
    "source_consolidated",
    "emea_shortened_campaign_name",
    "KR_Echo",
    "banners",
    " Channel (Retail)",
    "EMEA - KPI",
    "singular_revised_campaign_name",
    "KR_UM",
    "WC Campaign Identifier",
    "EMEA - EMEA-only",
    "Paid vs. Non-Paid",
    "Source (Consolidated)",
    "region_singular_made",
    "JP Identifier",
    "EMEA - Shortened Campaign Name",
    "Singular - KPI",
    "EMEA Secondary KPI",
    "mai_breakdown",
    "KR_Innocean",
    "NA - Shortened Campaign Name",
    "EMEA CDM FORREAL",
    "kr_um",
    "kr_inno_tc",
    "channel_retail",
]

FilterAndCustomDimensionArgs = Union[Iterable[FilterAndCustomDimension], str]

FILTER_AND_CUSTOM_DIMENSION = list(get_args(FilterAndCustomDimension))

def is_filter_and_custom_dimension(name: Union[str, FilterAndCustomDimension]) -> bool:
    """
    Check if `name` is a valid custom `FilterAndCustomDimension` from Singular.
    """
    return name in FILTER_AND_CUSTOM_DIMENSION


FilterAndCustomDimensionDisplay = Literal[
    "Channel",
    "Banners",
    "NA - Email",
    "NA - KPI",
    "NA - SKAN",
    "KR_INNO_TC",
    "Region (singular made)",
    "NA - Channel",
    "FPMX EMEA Channel",
    "Agencies",
    "EMEA - Campaign Type",
    "Jordan Reporting",
    "MAI Breakdown",
    "Neustar File Export",
    "Singular - Campaign Type",
    "KR_INNO_dotcom",
    "EMEA FORREAL",
    "EMEA - Agency",
    "Singular - Revised Campaign Name",
    "KR_Echo",
    " Channel (Retail)",
    "EMEA - KPI",
    "KR_UM",
    "WC Campaign Identifier",
    "EMEA - EMEA-only",
    "Paid vs. Non-Paid",
    "Source (Consolidated)",
    "JP Identifier",
    "EMEA - Shortened Campaign Name",
    "Singular - KPI",
    "EMEA Secondary KPI",
    "KR_Innocean",
    "NA - Shortened Campaign Name",
    "EMEA CDM FORREAL",
]

FilterAndCustomDimensionDisplayArgs = Union[Iterable[FilterAndCustomDimensionDisplay], str]

FILTER_AND_CUSTOM_DIMENSION_DISPLAY = list(get_args(FilterAndCustomDimensionDisplay))

def is_filter_and_custom_dimension_display(name: Union[str, FilterAndCustomDimensionDisplay]) -> bool:
    """
    Check if `name` is a valid custom `FilterAndCustomDimensionDisplay` from Singular.
    """
    return name in FILTER_AND_CUSTOM_DIMENSION_DISPLAY


FilterAndCustomDimensionColumn = Literal[
    "kr_innocean",
    "emea_cdm_forreal",
    "emea_kpi",
    "kr_echo",
    "emea_forreal",
    "singular_kpi",
    "na_skan",
    "jordan_reporting",
    "agencies",
    "kr_inno_dotcom",
    "na_email",
    "na_shortened_campaign_name",
    "emea_secondary_kpi",
    "channel",
    "paid_vs_non_paid",
    "na_kpi",
    "emea_campaign_type",
    "fpmx_emea_channel",
    "na_channel",
    "jp_identifier",
    "singular_campaign_type",
    "neustar_file_export",
    "wc_campaign_identifier",
    "emea_emea_only",
    "source_consolidated",
    "emea_shortened_campaign_name",
    "banners",
    "singular_revised_campaign_name",
    "region_singular_made",
    "mai_breakdown",
    "emea_agency",
    "kr_um",
    "kr_inno_tc",
    "channel_retail",
]

FilterAndCustomDimensionColumnArgs = Union[Iterable[FilterAndCustomDimensionColumn], str]

FILTER_AND_CUSTOM_DIMENSION_COLUMN = list(get_args(FilterAndCustomDimensionColumn))

def is_filter_and_custom_dimension_column(name: Union[str, FilterAndCustomDimensionColumn]) -> bool:
    """
    Check if `name` is a valid custom `FilterAndCustomDimensionColumn` from Singular.
    """
    return name in FILTER_AND_CUSTOM_DIMENSION_COLUMN


FILTER_AND_CUSTOM_DIMENSION_MAPPING = {
    "channel_retail": " Channel (Retail)",
    "agencies": "Agencies",
    "banners": "Banners",
    "channel": "Channel",
    "emea_agency": "EMEA - Agency",
    "emea_campaign_type": "EMEA - Campaign Type",
    "emea_emea_only": "EMEA - EMEA-only",
    "emea_kpi": "EMEA - KPI",
    "emea_shortened_campaign_name": "EMEA - Shortened Campaign Name",
    "emea_cdm_forreal": "EMEA CDM FORREAL",
    "emea_forreal": "EMEA FORREAL",
    "emea_secondary_kpi": "EMEA Secondary KPI",
    "fpmx_emea_channel": "FPMX EMEA Channel",
    "jp_identifier": "JP Identifier",
    "jordan_reporting": "Jordan Reporting",
    "kr_echo": "KR_Echo",
    "kr_inno_tc": "KR_INNO_TC",
    "kr_inno_dotcom": "KR_INNO_dotcom",
    "kr_innocean": "KR_Innocean",
    "kr_um": "KR_UM",
    "mai_breakdown": "MAI Breakdown",
    "na_channel": "NA - Channel",
    "na_email": "NA - Email",
    "na_kpi": "NA - KPI",
    "na_skan": "NA - SKAN",
    "na_shortened_campaign_name": "NA - Shortened Campaign Name",
    "neustar_file_export": "Neustar File Export",
    "paid_vs_non_paid": "Paid vs. Non-Paid",
    "region_singular_made": "Region (singular made)",
    "singular_campaign_type": "Singular - Campaign Type",
    "singular_kpi": "Singular - KPI",
    "singular_revised_campaign_name": "Singular - Revised Campaign Name",
    "source_consolidated": "Source (Consolidated)",
    "wc_campaign_identifier": "WC Campaign Identifier",
}

