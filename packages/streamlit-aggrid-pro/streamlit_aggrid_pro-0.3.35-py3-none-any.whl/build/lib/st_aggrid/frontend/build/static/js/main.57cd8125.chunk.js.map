{"version":3,"sources":["utils.js","AgGrid.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","AgGrid","props","frameDtypes","api","columnApi","columnFormaters","manualUpdateRequested","allowUnsafeJsCode","fitColumnsOnGridLoad","gridOptions","convertJavascriptCodeOnGridOptions","convertStringToFunction","render","undefined","state","should_update","setRowData","rowData","className","args","theme","style","defineContainerHeight","ManualUpdateButton","manual_update","onClick","e","returnGridValue","onGridReady","ModuleRegistry","register","ClientSideRowModelModule","custom_css","css","styles","selector","prop","push","join","getCSS","styleSheet","document","createElement","type","innerText","console","log","head","appendChild","addCustomCSS","enable_enterprise_modules","registerModules","ExcelExportModule","GridChartsModule","SparklinesModule","ColumnsToolPanelModule","FiltersToolPanelModule","MasterDetailModule","MenuModule","RangeSelectionModule","RichSelectModule","RowGroupingModule","SetFilterModule","MultiFilterModule","SideBarModule","StatusBarModule","LicenseManager","setLicenseKey","frame_dtypes","update_mode","allow_unsafe_jscode","fit_columns_on_grid_load","columnTypes","filter","filterParams","comparator","filterValue","cellValue","compareAsc","parseISO","valueFormatter","params","dateFormatter","value","column","colDef","custom_format_string","numberFormatter","precision","currencyFormatter","custom_currency_symbol","duration","humanize","assign","warn","JSON","parse","row_data","gridHeight","height","v","JS_PLACEHOLDER","match","RegExp","exec","funcStr","Function","updateEvents","this","update_on","doReturn","forEach","element","addEventListener","debounce","event","idx","attachUpdateEvents","fitColumns","selectIndex","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","date","format","number","currencySymbol","n","Number","parseFloat","isNaN","toFixed","returnData","data_return_mode","forEachLeafNode","row","data","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","returnValue","originalDtypes","selectedRows","getSelectedRows","selectedItems","getSelectedNodes","rowIndex","colState","getColumnState","Streamlit","setComponentValue","width","reload_data","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.57cd8125.chunk.js","sourcesContent":["// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\r\nfunction mapObject(obj, fn) {\r\n    return Object.keys(obj).reduce((res, key) => {\r\n        res[key] = fn(obj[key])\r\n        return res\r\n    }, {})\r\n}\r\n\r\nfunction deepMap(obj, fn) {\r\n    const deepMapper = (val) =>\r\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(deepMapper)\r\n    }\r\n    if (typeof obj === \"object\") {\r\n        return mapObject(obj, deepMapper)\r\n    }\r\n    return obj\r\n}\r\n\r\nexport default deepMap","import {\r\n    Streamlit,\r\n    StreamlitComponentBase,\r\n    withStreamlitConnection\r\n  } from \"streamlit-component-lib\";\r\n  \r\n  import { ReactNode } from \"react\"\r\n  \r\n  import { AgGridReact } from '@ag-grid-community/react';\r\n  \r\n  import {\r\n    ModuleRegistry,\r\n    ColumnApi,\r\n    GridApi\r\n  } from \"@ag-grid-community/core\"\r\n  \r\n  import { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\r\n  import { LicenseManager } from \"@ag-grid-enterprise/core\"\r\n  import {GridChartsModule } from \"@ag-grid-enterprise/charts\"\r\n  import {SparklinesModule } from \"@ag-grid-enterprise/sparklines\"\r\n  import {ColumnsToolPanelModule} from \"@ag-grid-enterprise/column-tool-panel\"\r\n  import {ExcelExportModule} from \"@ag-grid-enterprise/excel-export\"\r\n  import {FiltersToolPanelModule} from \"@ag-grid-enterprise/filter-tool-panel\"\r\n  import {MasterDetailModule} from \"@ag-grid-enterprise/master-detail\"\r\n  import {MenuModule} from \"@ag-grid-enterprise/menu\"\r\n  import {RangeSelectionModule} from \"@ag-grid-enterprise/range-selection\"\r\n  import {RichSelectModule} from \"@ag-grid-enterprise/rich-select\"\r\n  import {RowGroupingModule} from \"@ag-grid-enterprise/row-grouping\"\r\n  import {SetFilterModule} from \"@ag-grid-enterprise/set-filter\"\r\n  import {MultiFilterModule} from \"@ag-grid-enterprise/multi-filter\"\r\n  import {SideBarModule} from \"@ag-grid-enterprise/side-bar\"\r\n  import {StatusBarModule} from \"@ag-grid-enterprise/status-bar\"\r\n  \r\n  import { parseISO, compareAsc } from 'date-fns'\r\n  import { format } from 'date-fns-tz'\r\n  import deepMap from \"./utils\"\r\n  import { duration } from \"moment\";\r\n  \r\n  import { debounce } from \"lodash\";\r\n  \r\n  import './AgGrid.scss'\r\n  import './scrollbar.css'\r\n  interface State {\r\n    rowData: any\r\n    gridHeight: number\r\n    should_update: boolean\r\n  }\r\n  \r\n  type CSSDict = {[key: string]: {[key: string]: string}}\r\n  \r\n  function getCSS(styles: CSSDict): string {\r\n    var css = [];\r\n    for (let selector in styles) {\r\n      let style = selector + \" {\";\r\n      \r\n      for (let prop in styles[selector]) {\r\n        style += prop + \": \" + styles[selector][prop] + \";\";\r\n      }\r\n      \r\n      style += \"}\";\r\n      \r\n      css.push(style);\r\n    }\r\n    \r\n    return css.join(\"\\n\");\r\n  }\r\n  \r\n  function addCustomCSS(custom_css: CSSDict): void {\r\n      var css = getCSS(custom_css)\r\n      var styleSheet = document.createElement(\"style\")\r\n      styleSheet.type = \"text/css\"\r\n      styleSheet.innerText = css\r\n      console.log(`Adding cutom css: `, css)\r\n      document.head.appendChild(styleSheet)\r\n  }\r\n  \r\n  class AgGrid extends StreamlitComponentBase<State> {\r\n    private frameDtypes: any\r\n    private api!: GridApi;\r\n    private columnApi!: ColumnApi\r\n    private columnFormaters: any\r\n    private manualUpdateRequested: boolean = false\r\n    private allowUnsafeJsCode: boolean = false\r\n    private fitColumnsOnGridLoad: boolean = false\r\n    private gridOptions: any\r\n  \r\n    constructor(props: any) {\r\n      super(props)\r\n      ModuleRegistry.register(ClientSideRowModelModule)\r\n  \r\n      \r\n      if (props.args.custom_css) {\r\n        addCustomCSS(props.args.custom_css);\r\n      }\r\n  \r\n      if (props.args.enable_enterprise_modules) {\r\n        ModuleRegistry.registerModules([\r\n          ExcelExportModule,\r\n          GridChartsModule,\r\n          SparklinesModule,\r\n          ColumnsToolPanelModule,\r\n          FiltersToolPanelModule,\r\n          MasterDetailModule,\r\n          MenuModule,\r\n          RangeSelectionModule,\r\n          RichSelectModule,\r\n          RowGroupingModule,\r\n          SetFilterModule,\r\n          MultiFilterModule,\r\n          SideBarModule,\r\n          StatusBarModule\r\n        ])\r\n        if ('license_key' in props.args) {\r\n          LicenseManager.setLicenseKey(props.args['license_key']);\r\n        }\r\n      } \r\n  \r\n      this.frameDtypes = this.props.args.frame_dtypes\r\n      this.manualUpdateRequested = (this.props.args.update_mode === 1)\r\n      this.allowUnsafeJsCode = this.props.args.allow_unsafe_jscode\r\n      this.fitColumnsOnGridLoad = this.props.args.fit_columns_on_grid_load\r\n      \r\n      this.columnFormaters = {\r\n        columnTypes: {\r\n          'dateColumnFilter': {\r\n            filter: 'agDateColumnFilter',\r\n            filterParams: {\r\n              comparator: (filterValue: any, cellValue: string) => compareAsc(parseISO(cellValue), filterValue)\r\n            }\r\n          },\r\n          'numberColumnFilter': {\r\n            filter: 'agNumberColumnFilter'\r\n          },\r\n          'shortDateTimeFormat': {\r\n            valueFormatter: (params: any) => this.dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n          },\r\n          'customDateTimeFormat': {\r\n            valueFormatter: (params: any) => this.dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n          },\r\n          'customNumericFormat': {\r\n            valueFormatter: (params: any) => this.numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n          },\r\n          'customCurrencyFormat': {\r\n            valueFormatter: (params: any) => this.currencyFormatter(params.value, params.column.colDef.custom_currency_symbol),\r\n          },\r\n          'timedeltaFormat': {\r\n            valueFormatter: (params: any) => duration(params.value).humanize(true)\r\n          },\r\n        }\r\n      }\r\n  \r\n      let gridOptions = Object.assign({}, this.columnFormaters, this.props.args.gridOptions)\r\n  \r\n      if (this.allowUnsafeJsCode) {\r\n        console.warn(\"flag allow_unsafe_jscode is on.\")\r\n        gridOptions = this.convertJavascriptCodeOnGridOptions(gridOptions)\r\n      }\r\n      this.gridOptions = gridOptions\r\n  \r\n      this.state = {\r\n        rowData: JSON.parse(props.args.row_data),\r\n        gridHeight: this.props.args.height,\r\n        should_update: false\r\n      }\r\n    }\r\n  \r\n    static getDerivedStateFromProps(props: any, state: any) {\r\n      if (props.args.reload_data) {\r\n  \r\n        let new_row_data = JSON.parse(props.args.row_data)\r\n  \r\n        return {\r\n          rowData: new_row_data,\r\n          gridHeight: props.args.height,\r\n          should_update: true\r\n        }\r\n      } else {\r\n        return {\r\n          gridHeight: props.args.height\r\n        }\r\n      }\r\n    }\r\n  \r\n    private convertStringToFunction(v: string) {\r\n      const JS_PLACEHOLDER = \"--x_x--0_0--\"\r\n    \r\n      let funcReg = new RegExp(\r\n        `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n      )\r\n    \r\n      let match = funcReg.exec(v)\r\n    \r\n      if (match) {\r\n        const funcStr = match[1]\r\n        // eslint-disable-next-line\r\n        return new Function(\"return \" + funcStr)()\r\n    \r\n      } else {\r\n        return v\r\n      }\r\n    }\r\n  \r\n  \r\n    private convertJavascriptCodeOnGridOptions = (obj: object) => {\r\n      return deepMap(obj, this.convertStringToFunction)\r\n    }\r\n    private attachUpdateEvents() {\r\n      let updateEvents = this.props.args.update_on[0]\r\n      const doReturn = (e: any) => this.returnGridValue(e);\r\n      \r\n      updateEvents.forEach((element: any) => {\r\n        if(Array.isArray(element)){\r\n          this.api.addEventListener(element[0], debounce(doReturn, element[1]))\r\n          console.log(\"Attached arr\", element)\r\n  \r\n        } else {\r\n          this.api.addEventListener(element, doReturn);\r\n        }\r\n      })\r\n      }\r\n      \r\n  \r\n    private onGridReady(event: any) {\r\n      this.api = event.api\r\n      this.columnApi = event.columnApi\r\n      this.attachUpdateEvents()\r\n      this.api.addEventListener('firstDataRendered', (e: any) => this.fitColumns())\r\n  \r\n      this.api.setRowData(this.state.rowData)\r\n  \r\n      for (var idx in this.gridOptions['preSelectedRows']) {\r\n        this.api.selectIndex(this.gridOptions['preSelectedRows'][idx], true, true)\r\n      }\r\n    }\r\n  \r\n    private fitColumns() {\r\n      if (this.fitColumnsOnGridLoad) {\r\n        this.api.sizeColumnsToFit()\r\n      }\r\n      else {\r\n        this.columnApi.autoSizeAllColumns()\r\n      }\r\n    }\r\n  \r\n    private dateFormatter(isoString: string, formaterString: string): String {\r\n      try {\r\n        let date = parseISO(isoString)\r\n        return format(date, formaterString)\r\n      } catch {\r\n        return isoString\r\n      }\r\n      finally { }\r\n    }\r\n  \r\n    private currencyFormatter(number: any, currencySymbol: string): String {\r\n      let n = Number.parseFloat(number)\r\n      if (!Number.isNaN(n)) {\r\n        return currencySymbol + n.toFixed(2)\r\n      } else {\r\n        return number\r\n      }\r\n    }\r\n  \r\n    private numberFormatter(number: any, precision: number): String {\r\n      let n = Number.parseFloat(number)\r\n      if (!Number.isNaN(n)) {\r\n        return n.toFixed(precision)\r\n      } else {\r\n        return number\r\n      }\r\n    }\r\n  \r\n    private returnGridValue(e: any) {\r\n      let returnData: any[] = []\r\n      let returnMode = this.props.args.data_return_mode\r\n  \r\n      switch (returnMode) {\r\n        case 0: //ALL_DATA\r\n          this.api.forEachLeafNode((row) => returnData.push(row.data))\r\n          break;\r\n  \r\n        case 1: //FILTERED_DATA\r\n          this.api.forEachNodeAfterFilter((row) => { if (!row.group) { returnData.push(row.data) } })\r\n          break;\r\n  \r\n        case 2: //FILTERED_SORTED_DATA\r\n          this.api.forEachNodeAfterFilterAndSort((row) => { if (!row.group) { returnData.push(row.data) } })\r\n          break;\r\n      }\r\n  \r\n      let returnValue = {\r\n        originalDtypes: this.frameDtypes,\r\n        rowData: returnData,\r\n        selectedRows: this.api.getSelectedRows(),\r\n        selectedItems: this.api.getSelectedNodes().map(n => ({'rowIndex': n.rowIndex, ...n.data})),\r\n        colState: this.columnApi.getColumnState()\r\n      }\r\n      \r\n      Streamlit.setComponentValue(returnValue)\r\n    }\r\n  \r\n    private ManualUpdateButton(props: any) {\r\n      if (props.manual_update) {\r\n        return (<button onClick={props.onClick}>Update</button>)\r\n      }\r\n      else {\r\n        return (<span></span>)\r\n      }\r\n    }\r\n  \r\n    private defineContainerHeight() {\r\n      if ('domLayout' in this.gridOptions) {\r\n        if (this.gridOptions['domLayout'] === 'autoHeight') {\r\n          return ({\r\n            width: this.props.width\r\n          })\r\n        }\r\n      }\r\n      return ({\r\n        width: this.props.width,\r\n        height: this.state.gridHeight\r\n      })\r\n    }\r\n  \r\n    public render = (): ReactNode => {\r\n  \r\n      if (this.api !== undefined) {\r\n        if (this.state.should_update) {\r\n          this.api.setRowData(this.state.rowData)\r\n        }\r\n      }\r\n  \r\n      return (\r\n        <div className={\"ag-theme-\"+ this.props.args.theme} style={this.defineContainerHeight()} >\r\n          <this.ManualUpdateButton manual_update={this.manualUpdateRequested} onClick={(e: any) => this.returnGridValue(e)} />\r\n          <AgGridReact\r\n            onGridReady={(e) => this.onGridReady(e)}\r\n            gridOptions={this.gridOptions}\r\n          >\r\n          </AgGridReact>\r\n        </div >\r\n      )\r\n    }\r\n   }\r\n  \r\n  export default withStreamlitConnection(AgGrid)","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport AgGrid from \"./AgGrid\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AgGrid />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}