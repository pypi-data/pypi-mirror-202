// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: plotserver.proto
#ifndef GRPC_plotserver_2eproto__INCLUDED
#define GRPC_plotserver_2eproto__INCLUDED

#include "plotserver.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace rpc {
namespace gui {

class plotserver final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.gui.plotserver";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status panel(::grpc::ClientContext* context, const ::rpc::gui::NewPanel& request, ::rpc::gui::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> Asyncpanel(::grpc::ClientContext* context, const ::rpc::gui::NewPanel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(AsyncpanelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> PrepareAsyncpanel(::grpc::ClientContext* context, const ::rpc::gui::NewPanel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(PrepareAsyncpanelRaw(context, request, cq));
    }
    virtual ::grpc::Status colors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::rpc::gui::Colors* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Colors>> Asynccolors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Colors>>(AsynccolorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Colors>> PrepareAsynccolors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Colors>>(PrepareAsynccolorsRaw(context, request, cq));
    }
    virtual ::grpc::Status colormaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::rpc::gui::ColorMaps* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::ColorMaps>> Asynccolormaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::ColorMaps>>(AsynccolormapsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::ColorMaps>> PrepareAsynccolormaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::ColorMaps>>(PrepareAsynccolormapsRaw(context, request, cq));
    }
    virtual ::grpc::Status symbols(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::rpc::gui::Symbols* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Symbols>> Asyncsymbols(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Symbols>>(AsyncsymbolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Symbols>> PrepareAsyncsymbols(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Symbols>>(PrepareAsyncsymbolsRaw(context, request, cq));
    }
    virtual ::grpc::Status line(::grpc::ClientContext* context, const ::rpc::gui::NewLine& request, ::rpc::gui::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> Asyncline(::grpc::ClientContext* context, const ::rpc::gui::NewLine& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(AsynclineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> PrepareAsyncline(::grpc::ClientContext* context, const ::rpc::gui::NewLine& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(PrepareAsynclineRaw(context, request, cq));
    }
    virtual ::grpc::Status scatter(::grpc::ClientContext* context, const ::rpc::gui::NewScatter& request, ::rpc::gui::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> Asyncscatter(::grpc::ClientContext* context, const ::rpc::gui::NewScatter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(AsyncscatterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> PrepareAsyncscatter(::grpc::ClientContext* context, const ::rpc::gui::NewScatter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(PrepareAsyncscatterRaw(context, request, cq));
    }
    virtual ::grpc::Status histogram(::grpc::ClientContext* context, const ::rpc::gui::NewHistogram& request, ::rpc::gui::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> Asynchistogram(::grpc::ClientContext* context, const ::rpc::gui::NewHistogram& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(AsynchistogramRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> PrepareAsynchistogram(::grpc::ClientContext* context, const ::rpc::gui::NewHistogram& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(PrepareAsynchistogramRaw(context, request, cq));
    }
    virtual ::grpc::Status raster(::grpc::ClientContext* context, const ::rpc::gui::NewRaster& request, ::rpc::gui::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> Asyncraster(::grpc::ClientContext* context, const ::rpc::gui::NewRaster& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(AsyncrasterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> PrepareAsyncraster(::grpc::ClientContext* context, const ::rpc::gui::NewRaster& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(PrepareAsyncrasterRaw(context, request, cq));
    }
    virtual ::grpc::Status setlabel(::grpc::ClientContext* context, const ::rpc::gui::Label& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncsetlabel(::grpc::ClientContext* context, const ::rpc::gui::Label& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetlabelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetlabel(::grpc::ClientContext* context, const ::rpc::gui::Label& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetlabelRaw(context, request, cq));
    }
    virtual ::grpc::Status erase(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncerase(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsynceraseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncerase(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynceraseRaw(context, request, cq));
    }
    virtual ::grpc::Status close(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncclose(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsynccloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncclose(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynccloseRaw(context, request, cq));
    }
    virtual ::grpc::Status release(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncrelease(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncreleaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncrelease(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncreleaseRaw(context, request, cq));
    }
    virtual ::grpc::Status hide(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asynchide(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsynchideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsynchide(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynchideRaw(context, request, cq));
    }
    virtual ::grpc::Status show(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncshow(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncshowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncshow(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncshowRaw(context, request, cq));
    }
    virtual ::grpc::Status loaddock(::grpc::ClientContext* context, const ::rpc::gui::DockSpec& request, ::rpc::gui::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> Asyncloaddock(::grpc::ClientContext* context, const ::rpc::gui::DockSpec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(AsyncloaddockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>> PrepareAsyncloaddock(::grpc::ClientContext* context, const ::rpc::gui::DockSpec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>>(PrepareAsyncloaddockRaw(context, request, cq));
    }
    virtual ::grpc::Status done(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdone(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdone(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdoneRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* AsyncpanelRaw(::grpc::ClientContext* context, const ::rpc::gui::NewPanel& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* PrepareAsyncpanelRaw(::grpc::ClientContext* context, const ::rpc::gui::NewPanel& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Colors>* AsynccolorsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Colors>* PrepareAsynccolorsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::ColorMaps>* AsynccolormapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::ColorMaps>* PrepareAsynccolormapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Symbols>* AsyncsymbolsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Symbols>* PrepareAsyncsymbolsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* AsynclineRaw(::grpc::ClientContext* context, const ::rpc::gui::NewLine& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* PrepareAsynclineRaw(::grpc::ClientContext* context, const ::rpc::gui::NewLine& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* AsyncscatterRaw(::grpc::ClientContext* context, const ::rpc::gui::NewScatter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* PrepareAsyncscatterRaw(::grpc::ClientContext* context, const ::rpc::gui::NewScatter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* AsynchistogramRaw(::grpc::ClientContext* context, const ::rpc::gui::NewHistogram& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* PrepareAsynchistogramRaw(::grpc::ClientContext* context, const ::rpc::gui::NewHistogram& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* AsyncrasterRaw(::grpc::ClientContext* context, const ::rpc::gui::NewRaster& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* PrepareAsyncrasterRaw(::grpc::ClientContext* context, const ::rpc::gui::NewRaster& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetlabelRaw(::grpc::ClientContext* context, const ::rpc::gui::Label& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetlabelRaw(::grpc::ClientContext* context, const ::rpc::gui::Label& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsynceraseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynceraseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsynccloseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynccloseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncreleaseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncreleaseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsynchideRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynchideRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncshowRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncshowRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* AsyncloaddockRaw(::grpc::ClientContext* context, const ::rpc::gui::DockSpec& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::gui::Id>* PrepareAsyncloaddockRaw(::grpc::ClientContext* context, const ::rpc::gui::DockSpec& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdoneRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdoneRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status panel(::grpc::ClientContext* context, const ::rpc::gui::NewPanel& request, ::rpc::gui::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> Asyncpanel(::grpc::ClientContext* context, const ::rpc::gui::NewPanel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(AsyncpanelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> PrepareAsyncpanel(::grpc::ClientContext* context, const ::rpc::gui::NewPanel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(PrepareAsyncpanelRaw(context, request, cq));
    }
    ::grpc::Status colors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::rpc::gui::Colors* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Colors>> Asynccolors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Colors>>(AsynccolorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Colors>> PrepareAsynccolors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Colors>>(PrepareAsynccolorsRaw(context, request, cq));
    }
    ::grpc::Status colormaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::rpc::gui::ColorMaps* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::ColorMaps>> Asynccolormaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::ColorMaps>>(AsynccolormapsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::ColorMaps>> PrepareAsynccolormaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::ColorMaps>>(PrepareAsynccolormapsRaw(context, request, cq));
    }
    ::grpc::Status symbols(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::rpc::gui::Symbols* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Symbols>> Asyncsymbols(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Symbols>>(AsyncsymbolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Symbols>> PrepareAsyncsymbols(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Symbols>>(PrepareAsyncsymbolsRaw(context, request, cq));
    }
    ::grpc::Status line(::grpc::ClientContext* context, const ::rpc::gui::NewLine& request, ::rpc::gui::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> Asyncline(::grpc::ClientContext* context, const ::rpc::gui::NewLine& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(AsynclineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> PrepareAsyncline(::grpc::ClientContext* context, const ::rpc::gui::NewLine& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(PrepareAsynclineRaw(context, request, cq));
    }
    ::grpc::Status scatter(::grpc::ClientContext* context, const ::rpc::gui::NewScatter& request, ::rpc::gui::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> Asyncscatter(::grpc::ClientContext* context, const ::rpc::gui::NewScatter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(AsyncscatterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> PrepareAsyncscatter(::grpc::ClientContext* context, const ::rpc::gui::NewScatter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(PrepareAsyncscatterRaw(context, request, cq));
    }
    ::grpc::Status histogram(::grpc::ClientContext* context, const ::rpc::gui::NewHistogram& request, ::rpc::gui::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> Asynchistogram(::grpc::ClientContext* context, const ::rpc::gui::NewHistogram& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(AsynchistogramRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> PrepareAsynchistogram(::grpc::ClientContext* context, const ::rpc::gui::NewHistogram& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(PrepareAsynchistogramRaw(context, request, cq));
    }
    ::grpc::Status raster(::grpc::ClientContext* context, const ::rpc::gui::NewRaster& request, ::rpc::gui::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> Asyncraster(::grpc::ClientContext* context, const ::rpc::gui::NewRaster& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(AsyncrasterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> PrepareAsyncraster(::grpc::ClientContext* context, const ::rpc::gui::NewRaster& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(PrepareAsyncrasterRaw(context, request, cq));
    }
    ::grpc::Status setlabel(::grpc::ClientContext* context, const ::rpc::gui::Label& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncsetlabel(::grpc::ClientContext* context, const ::rpc::gui::Label& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetlabelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetlabel(::grpc::ClientContext* context, const ::rpc::gui::Label& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetlabelRaw(context, request, cq));
    }
    ::grpc::Status erase(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncerase(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsynceraseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncerase(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynceraseRaw(context, request, cq));
    }
    ::grpc::Status close(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncclose(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsynccloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncclose(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynccloseRaw(context, request, cq));
    }
    ::grpc::Status release(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncrelease(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncreleaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncrelease(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncreleaseRaw(context, request, cq));
    }
    ::grpc::Status hide(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asynchide(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsynchideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsynchide(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynchideRaw(context, request, cq));
    }
    ::grpc::Status show(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncshow(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncshowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncshow(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncshowRaw(context, request, cq));
    }
    ::grpc::Status loaddock(::grpc::ClientContext* context, const ::rpc::gui::DockSpec& request, ::rpc::gui::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> Asyncloaddock(::grpc::ClientContext* context, const ::rpc::gui::DockSpec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(AsyncloaddockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>> PrepareAsyncloaddock(::grpc::ClientContext* context, const ::rpc::gui::DockSpec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>>(PrepareAsyncloaddockRaw(context, request, cq));
    }
    ::grpc::Status done(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdone(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdone(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdoneRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* AsyncpanelRaw(::grpc::ClientContext* context, const ::rpc::gui::NewPanel& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* PrepareAsyncpanelRaw(::grpc::ClientContext* context, const ::rpc::gui::NewPanel& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Colors>* AsynccolorsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Colors>* PrepareAsynccolorsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::ColorMaps>* AsynccolormapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::ColorMaps>* PrepareAsynccolormapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Symbols>* AsyncsymbolsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Symbols>* PrepareAsyncsymbolsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* AsynclineRaw(::grpc::ClientContext* context, const ::rpc::gui::NewLine& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* PrepareAsynclineRaw(::grpc::ClientContext* context, const ::rpc::gui::NewLine& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* AsyncscatterRaw(::grpc::ClientContext* context, const ::rpc::gui::NewScatter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* PrepareAsyncscatterRaw(::grpc::ClientContext* context, const ::rpc::gui::NewScatter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* AsynchistogramRaw(::grpc::ClientContext* context, const ::rpc::gui::NewHistogram& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* PrepareAsynchistogramRaw(::grpc::ClientContext* context, const ::rpc::gui::NewHistogram& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* AsyncrasterRaw(::grpc::ClientContext* context, const ::rpc::gui::NewRaster& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* PrepareAsyncrasterRaw(::grpc::ClientContext* context, const ::rpc::gui::NewRaster& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetlabelRaw(::grpc::ClientContext* context, const ::rpc::gui::Label& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetlabelRaw(::grpc::ClientContext* context, const ::rpc::gui::Label& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsynceraseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynceraseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsynccloseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynccloseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncreleaseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncreleaseRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsynchideRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynchideRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncshowRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncshowRaw(::grpc::ClientContext* context, const ::rpc::gui::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* AsyncloaddockRaw(::grpc::ClientContext* context, const ::rpc::gui::DockSpec& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::gui::Id>* PrepareAsyncloaddockRaw(::grpc::ClientContext* context, const ::rpc::gui::DockSpec& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdoneRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdoneRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_panel_;
    const ::grpc::internal::RpcMethod rpcmethod_colors_;
    const ::grpc::internal::RpcMethod rpcmethod_colormaps_;
    const ::grpc::internal::RpcMethod rpcmethod_symbols_;
    const ::grpc::internal::RpcMethod rpcmethod_line_;
    const ::grpc::internal::RpcMethod rpcmethod_scatter_;
    const ::grpc::internal::RpcMethod rpcmethod_histogram_;
    const ::grpc::internal::RpcMethod rpcmethod_raster_;
    const ::grpc::internal::RpcMethod rpcmethod_setlabel_;
    const ::grpc::internal::RpcMethod rpcmethod_erase_;
    const ::grpc::internal::RpcMethod rpcmethod_close_;
    const ::grpc::internal::RpcMethod rpcmethod_release_;
    const ::grpc::internal::RpcMethod rpcmethod_hide_;
    const ::grpc::internal::RpcMethod rpcmethod_show_;
    const ::grpc::internal::RpcMethod rpcmethod_loaddock_;
    const ::grpc::internal::RpcMethod rpcmethod_done_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status panel(::grpc::ServerContext* context, const ::rpc::gui::NewPanel* request, ::rpc::gui::Id* response);
    virtual ::grpc::Status colors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::Colors* response);
    virtual ::grpc::Status colormaps(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::ColorMaps* response);
    virtual ::grpc::Status symbols(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::Symbols* response);
    virtual ::grpc::Status line(::grpc::ServerContext* context, const ::rpc::gui::NewLine* request, ::rpc::gui::Id* response);
    virtual ::grpc::Status scatter(::grpc::ServerContext* context, const ::rpc::gui::NewScatter* request, ::rpc::gui::Id* response);
    virtual ::grpc::Status histogram(::grpc::ServerContext* context, const ::rpc::gui::NewHistogram* request, ::rpc::gui::Id* response);
    virtual ::grpc::Status raster(::grpc::ServerContext* context, const ::rpc::gui::NewRaster* request, ::rpc::gui::Id* response);
    virtual ::grpc::Status setlabel(::grpc::ServerContext* context, const ::rpc::gui::Label* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status erase(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status close(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status release(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status hide(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status show(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status loaddock(::grpc::ServerContext* context, const ::rpc::gui::DockSpec* request, ::rpc::gui::Id* response);
    virtual ::grpc::Status done(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_panel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_panel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_panel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status panel(::grpc::ServerContext* context, const ::rpc::gui::NewPanel* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpanel(::grpc::ServerContext* context, ::rpc::gui::NewPanel* request, ::grpc::ServerAsyncResponseWriter< ::rpc::gui::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_colors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_colors() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_colors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status colors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::Colors* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcolors(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::rpc::gui::Colors>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_colormaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_colormaps() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_colormaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status colormaps(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::ColorMaps* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcolormaps(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::rpc::gui::ColorMaps>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_symbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_symbols() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_symbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status symbols(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::Symbols* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsymbols(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::rpc::gui::Symbols>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_line : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_line() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_line() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status line(::grpc::ServerContext* context, const ::rpc::gui::NewLine* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestline(::grpc::ServerContext* context, ::rpc::gui::NewLine* request, ::grpc::ServerAsyncResponseWriter< ::rpc::gui::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_scatter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_scatter() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_scatter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scatter(::grpc::ServerContext* context, const ::rpc::gui::NewScatter* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestscatter(::grpc::ServerContext* context, ::rpc::gui::NewScatter* request, ::grpc::ServerAsyncResponseWriter< ::rpc::gui::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_histogram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_histogram() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_histogram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status histogram(::grpc::ServerContext* context, const ::rpc::gui::NewHistogram* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesthistogram(::grpc::ServerContext* context, ::rpc::gui::NewHistogram* request, ::grpc::ServerAsyncResponseWriter< ::rpc::gui::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_raster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_raster() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_raster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status raster(::grpc::ServerContext* context, const ::rpc::gui::NewRaster* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestraster(::grpc::ServerContext* context, ::rpc::gui::NewRaster* request, ::grpc::ServerAsyncResponseWriter< ::rpc::gui::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setlabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setlabel() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_setlabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setlabel(::grpc::ServerContext* context, const ::rpc::gui::Label* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsetlabel(::grpc::ServerContext* context, ::rpc::gui::Label* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_erase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_erase() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_erase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status erase(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesterase(::grpc::ServerContext* context, ::rpc::gui::Id* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_close() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclose(::grpc::ServerContext* context, ::rpc::gui::Id* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_release() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status release(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrelease(::grpc::ServerContext* context, ::rpc::gui::Id* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_hide() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_hide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hide(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesthide(::grpc::ServerContext* context, ::rpc::gui::Id* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_show() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status show(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestshow(::grpc::ServerContext* context, ::rpc::gui::Id* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loaddock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_loaddock() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_loaddock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loaddock(::grpc::ServerContext* context, const ::rpc::gui::DockSpec* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestloaddock(::grpc::ServerContext* context, ::rpc::gui::DockSpec* request, ::grpc::ServerAsyncResponseWriter< ::rpc::gui::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_done : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_done() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_done() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status done(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdone(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_panel<WithAsyncMethod_colors<WithAsyncMethod_colormaps<WithAsyncMethod_symbols<WithAsyncMethod_line<WithAsyncMethod_scatter<WithAsyncMethod_histogram<WithAsyncMethod_raster<WithAsyncMethod_setlabel<WithAsyncMethod_erase<WithAsyncMethod_close<WithAsyncMethod_release<WithAsyncMethod_hide<WithAsyncMethod_show<WithAsyncMethod_loaddock<WithAsyncMethod_done<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_panel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_panel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_panel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status panel(::grpc::ServerContext* context, const ::rpc::gui::NewPanel* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_colors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_colors() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_colors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status colors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::Colors* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_colormaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_colormaps() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_colormaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status colormaps(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::ColorMaps* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_symbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_symbols() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_symbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status symbols(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::Symbols* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_line : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_line() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_line() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status line(::grpc::ServerContext* context, const ::rpc::gui::NewLine* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_scatter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_scatter() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_scatter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scatter(::grpc::ServerContext* context, const ::rpc::gui::NewScatter* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_histogram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_histogram() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_histogram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status histogram(::grpc::ServerContext* context, const ::rpc::gui::NewHistogram* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_raster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_raster() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_raster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status raster(::grpc::ServerContext* context, const ::rpc::gui::NewRaster* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setlabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setlabel() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_setlabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setlabel(::grpc::ServerContext* context, const ::rpc::gui::Label* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_erase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_erase() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_erase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status erase(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_close() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_release() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status release(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_hide() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_hide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hide(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_show() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status show(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loaddock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_loaddock() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_loaddock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loaddock(::grpc::ServerContext* context, const ::rpc::gui::DockSpec* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_done : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_done() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_done() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status done(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_panel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_panel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::NewPanel, ::rpc::gui::Id>(std::bind(&WithStreamedUnaryMethod_panel<BaseClass>::Streamedpanel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_panel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status panel(::grpc::ServerContext* context, const ::rpc::gui::NewPanel* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedpanel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::NewPanel,::rpc::gui::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_colors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_colors() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::rpc::gui::Colors>(std::bind(&WithStreamedUnaryMethod_colors<BaseClass>::Streamedcolors, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_colors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status colors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::Colors* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcolors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::rpc::gui::Colors>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_colormaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_colormaps() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::rpc::gui::ColorMaps>(std::bind(&WithStreamedUnaryMethod_colormaps<BaseClass>::Streamedcolormaps, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_colormaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status colormaps(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::ColorMaps* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcolormaps(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::rpc::gui::ColorMaps>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_symbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_symbols() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::rpc::gui::Symbols>(std::bind(&WithStreamedUnaryMethod_symbols<BaseClass>::Streamedsymbols, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_symbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status symbols(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::rpc::gui::Symbols* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsymbols(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::rpc::gui::Symbols>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_line : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_line() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::NewLine, ::rpc::gui::Id>(std::bind(&WithStreamedUnaryMethod_line<BaseClass>::Streamedline, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_line() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status line(::grpc::ServerContext* context, const ::rpc::gui::NewLine* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::NewLine,::rpc::gui::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_scatter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_scatter() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::NewScatter, ::rpc::gui::Id>(std::bind(&WithStreamedUnaryMethod_scatter<BaseClass>::Streamedscatter, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_scatter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status scatter(::grpc::ServerContext* context, const ::rpc::gui::NewScatter* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedscatter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::NewScatter,::rpc::gui::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_histogram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_histogram() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::NewHistogram, ::rpc::gui::Id>(std::bind(&WithStreamedUnaryMethod_histogram<BaseClass>::Streamedhistogram, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_histogram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status histogram(::grpc::ServerContext* context, const ::rpc::gui::NewHistogram* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedhistogram(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::NewHistogram,::rpc::gui::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_raster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_raster() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::NewRaster, ::rpc::gui::Id>(std::bind(&WithStreamedUnaryMethod_raster<BaseClass>::Streamedraster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_raster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status raster(::grpc::ServerContext* context, const ::rpc::gui::NewRaster* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedraster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::NewRaster,::rpc::gui::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setlabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setlabel() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::Label, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_setlabel<BaseClass>::Streamedsetlabel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setlabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setlabel(::grpc::ServerContext* context, const ::rpc::gui::Label* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsetlabel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::Label,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_erase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_erase() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::Id, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_erase<BaseClass>::Streamederase, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_erase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status erase(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamederase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::Id,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_close() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::Id, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_close<BaseClass>::Streamedclose, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status close(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::Id,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_release() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::Id, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_release<BaseClass>::Streamedrelease, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status release(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrelease(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::Id,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_hide() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::Id, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_hide<BaseClass>::Streamedhide, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_hide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hide(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedhide(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::Id,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_show() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::Id, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_show<BaseClass>::Streamedshow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status show(::grpc::ServerContext* context, const ::rpc::gui::Id* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedshow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::Id,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loaddock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_loaddock() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::gui::DockSpec, ::rpc::gui::Id>(std::bind(&WithStreamedUnaryMethod_loaddock<BaseClass>::Streamedloaddock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_loaddock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loaddock(::grpc::ServerContext* context, const ::rpc::gui::DockSpec* request, ::rpc::gui::Id* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedloaddock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::gui::DockSpec,::rpc::gui::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_done : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_done() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_done<BaseClass>::Streameddone, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_done() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status done(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_panel<WithStreamedUnaryMethod_colors<WithStreamedUnaryMethod_colormaps<WithStreamedUnaryMethod_symbols<WithStreamedUnaryMethod_line<WithStreamedUnaryMethod_scatter<WithStreamedUnaryMethod_histogram<WithStreamedUnaryMethod_raster<WithStreamedUnaryMethod_setlabel<WithStreamedUnaryMethod_erase<WithStreamedUnaryMethod_close<WithStreamedUnaryMethod_release<WithStreamedUnaryMethod_hide<WithStreamedUnaryMethod_show<WithStreamedUnaryMethod_loaddock<WithStreamedUnaryMethod_done<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_panel<WithStreamedUnaryMethod_colors<WithStreamedUnaryMethod_colormaps<WithStreamedUnaryMethod_symbols<WithStreamedUnaryMethod_line<WithStreamedUnaryMethod_scatter<WithStreamedUnaryMethod_histogram<WithStreamedUnaryMethod_raster<WithStreamedUnaryMethod_setlabel<WithStreamedUnaryMethod_erase<WithStreamedUnaryMethod_close<WithStreamedUnaryMethod_release<WithStreamedUnaryMethod_hide<WithStreamedUnaryMethod_show<WithStreamedUnaryMethod_loaddock<WithStreamedUnaryMethod_done<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace gui
}  // namespace rpc


#endif  // GRPC_plotserver_2eproto__INCLUDED
