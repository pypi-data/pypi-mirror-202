// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registrar.proto

#ifndef PROTOBUF_registrar_2eproto__INCLUDED
#define PROTOBUF_registrar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_registrar_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsServiceIdImpl();
void InitDefaultsServiceId();
void InitDefaultsServiceIdsImpl();
void InitDefaultsServiceIds();
void InitDefaultsServiceTypesImpl();
void InitDefaultsServiceTypes();
inline void InitDefaults() {
  InitDefaultsServiceId();
  InitDefaultsServiceIds();
  InitDefaultsServiceTypes();
}
}  // namespace protobuf_registrar_2eproto
namespace casatools {
namespace rpc {
class ServiceId;
class ServiceIdDefaultTypeInternal;
extern ServiceIdDefaultTypeInternal _ServiceId_default_instance_;
class ServiceIds;
class ServiceIdsDefaultTypeInternal;
extern ServiceIdsDefaultTypeInternal _ServiceIds_default_instance_;
class ServiceTypes;
class ServiceTypesDefaultTypeInternal;
extern ServiceTypesDefaultTypeInternal _ServiceTypes_default_instance_;
}  // namespace rpc
}  // namespace casatools
namespace casatools {
namespace rpc {

// ===================================================================

class ServiceId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:casatools.rpc.ServiceId) */ {
 public:
  ServiceId();
  virtual ~ServiceId();

  ServiceId(const ServiceId& from);

  inline ServiceId& operator=(const ServiceId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceId(ServiceId&& from) noexcept
    : ServiceId() {
    *this = ::std::move(from);
  }

  inline ServiceId& operator=(ServiceId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceId* internal_default_instance() {
    return reinterpret_cast<const ServiceId*>(
               &_ServiceId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServiceId* other);
  friend void swap(ServiceId& a, ServiceId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceId* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceId& from);
  void MergeFrom(const ServiceId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string types = 3;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 3;
  const ::std::string& types(int index) const;
  ::std::string* mutable_types(int index);
  void set_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_types(int index, ::std::string&& value);
  #endif
  void set_types(int index, const char* value);
  void set_types(int index, const char* value, size_t size);
  ::std::string* add_types();
  void add_types(const ::std::string& value);
  #if LANG_CXX11
  void add_types(::std::string&& value);
  #endif
  void add_types(const char* value);
  void add_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_types();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string uri = 2;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:casatools.rpc.ServiceId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> types_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_registrar_2eproto::TableStruct;
  friend void ::protobuf_registrar_2eproto::InitDefaultsServiceIdImpl();
};
// -------------------------------------------------------------------

class ServiceIds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:casatools.rpc.ServiceIds) */ {
 public:
  ServiceIds();
  virtual ~ServiceIds();

  ServiceIds(const ServiceIds& from);

  inline ServiceIds& operator=(const ServiceIds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceIds(ServiceIds&& from) noexcept
    : ServiceIds() {
    *this = ::std::move(from);
  }

  inline ServiceIds& operator=(ServiceIds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceIds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceIds* internal_default_instance() {
    return reinterpret_cast<const ServiceIds*>(
               &_ServiceIds_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServiceIds* other);
  friend void swap(ServiceIds& a, ServiceIds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceIds* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceIds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceIds& from);
  void MergeFrom(const ServiceIds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceIds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .casatools.rpc.ServiceId service = 1;
  int service_size() const;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::casatools::rpc::ServiceId& service(int index) const;
  ::casatools::rpc::ServiceId* mutable_service(int index);
  ::casatools::rpc::ServiceId* add_service();
  ::google::protobuf::RepeatedPtrField< ::casatools::rpc::ServiceId >*
      mutable_service();
  const ::google::protobuf::RepeatedPtrField< ::casatools::rpc::ServiceId >&
      service() const;

  // @@protoc_insertion_point(class_scope:casatools.rpc.ServiceIds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::casatools::rpc::ServiceId > service_;
  mutable int _cached_size_;
  friend struct ::protobuf_registrar_2eproto::TableStruct;
  friend void ::protobuf_registrar_2eproto::InitDefaultsServiceIdsImpl();
};
// -------------------------------------------------------------------

class ServiceTypes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:casatools.rpc.ServiceTypes) */ {
 public:
  ServiceTypes();
  virtual ~ServiceTypes();

  ServiceTypes(const ServiceTypes& from);

  inline ServiceTypes& operator=(const ServiceTypes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceTypes(ServiceTypes&& from) noexcept
    : ServiceTypes() {
    *this = ::std::move(from);
  }

  inline ServiceTypes& operator=(ServiceTypes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceTypes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceTypes* internal_default_instance() {
    return reinterpret_cast<const ServiceTypes*>(
               &_ServiceTypes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ServiceTypes* other);
  friend void swap(ServiceTypes& a, ServiceTypes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceTypes* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceTypes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceTypes& from);
  void MergeFrom(const ServiceTypes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceTypes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string types = 1;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 1;
  const ::std::string& types(int index) const;
  ::std::string* mutable_types(int index);
  void set_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_types(int index, ::std::string&& value);
  #endif
  void set_types(int index, const char* value);
  void set_types(int index, const char* value, size_t size);
  ::std::string* add_types();
  void add_types(const ::std::string& value);
  #if LANG_CXX11
  void add_types(::std::string&& value);
  #endif
  void add_types(const char* value);
  void add_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_types();

  // @@protoc_insertion_point(class_scope:casatools.rpc.ServiceTypes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> types_;
  mutable int _cached_size_;
  friend struct ::protobuf_registrar_2eproto::TableStruct;
  friend void ::protobuf_registrar_2eproto::InitDefaultsServiceTypesImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceId

// string id = 1;
inline void ServiceId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceId::id() const {
  // @@protoc_insertion_point(field_get:casatools.rpc.ServiceId.id)
  return id_.GetNoArena();
}
inline void ServiceId::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:casatools.rpc.ServiceId.id)
}
#if LANG_CXX11
inline void ServiceId::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:casatools.rpc.ServiceId.id)
}
#endif
inline void ServiceId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:casatools.rpc.ServiceId.id)
}
inline void ServiceId::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:casatools.rpc.ServiceId.id)
}
inline ::std::string* ServiceId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:casatools.rpc.ServiceId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceId::release_id() {
  // @@protoc_insertion_point(field_release:casatools.rpc.ServiceId.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:casatools.rpc.ServiceId.id)
}

// string uri = 2;
inline void ServiceId::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceId::uri() const {
  // @@protoc_insertion_point(field_get:casatools.rpc.ServiceId.uri)
  return uri_.GetNoArena();
}
inline void ServiceId::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:casatools.rpc.ServiceId.uri)
}
#if LANG_CXX11
inline void ServiceId::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:casatools.rpc.ServiceId.uri)
}
#endif
inline void ServiceId::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:casatools.rpc.ServiceId.uri)
}
inline void ServiceId::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:casatools.rpc.ServiceId.uri)
}
inline ::std::string* ServiceId::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:casatools.rpc.ServiceId.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceId::release_uri() {
  // @@protoc_insertion_point(field_release:casatools.rpc.ServiceId.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceId::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:casatools.rpc.ServiceId.uri)
}

// repeated string types = 3;
inline int ServiceId::types_size() const {
  return types_.size();
}
inline void ServiceId::clear_types() {
  types_.Clear();
}
inline const ::std::string& ServiceId::types(int index) const {
  // @@protoc_insertion_point(field_get:casatools.rpc.ServiceId.types)
  return types_.Get(index);
}
inline ::std::string* ServiceId::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:casatools.rpc.ServiceId.types)
  return types_.Mutable(index);
}
inline void ServiceId::set_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:casatools.rpc.ServiceId.types)
  types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceId::set_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:casatools.rpc.ServiceId.types)
  types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceId::set_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:casatools.rpc.ServiceId.types)
}
inline void ServiceId::set_types(int index, const char* value, size_t size) {
  types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:casatools.rpc.ServiceId.types)
}
inline ::std::string* ServiceId::add_types() {
  // @@protoc_insertion_point(field_add_mutable:casatools.rpc.ServiceId.types)
  return types_.Add();
}
inline void ServiceId::add_types(const ::std::string& value) {
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:casatools.rpc.ServiceId.types)
}
#if LANG_CXX11
inline void ServiceId::add_types(::std::string&& value) {
  types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:casatools.rpc.ServiceId.types)
}
#endif
inline void ServiceId::add_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:casatools.rpc.ServiceId.types)
}
inline void ServiceId::add_types(const char* value, size_t size) {
  types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:casatools.rpc.ServiceId.types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceId::types() const {
  // @@protoc_insertion_point(field_list:casatools.rpc.ServiceId.types)
  return types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceId::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:casatools.rpc.ServiceId.types)
  return &types_;
}

// -------------------------------------------------------------------

// ServiceIds

// repeated .casatools.rpc.ServiceId service = 1;
inline int ServiceIds::service_size() const {
  return service_.size();
}
inline void ServiceIds::clear_service() {
  service_.Clear();
}
inline const ::casatools::rpc::ServiceId& ServiceIds::service(int index) const {
  // @@protoc_insertion_point(field_get:casatools.rpc.ServiceIds.service)
  return service_.Get(index);
}
inline ::casatools::rpc::ServiceId* ServiceIds::mutable_service(int index) {
  // @@protoc_insertion_point(field_mutable:casatools.rpc.ServiceIds.service)
  return service_.Mutable(index);
}
inline ::casatools::rpc::ServiceId* ServiceIds::add_service() {
  // @@protoc_insertion_point(field_add:casatools.rpc.ServiceIds.service)
  return service_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::casatools::rpc::ServiceId >*
ServiceIds::mutable_service() {
  // @@protoc_insertion_point(field_mutable_list:casatools.rpc.ServiceIds.service)
  return &service_;
}
inline const ::google::protobuf::RepeatedPtrField< ::casatools::rpc::ServiceId >&
ServiceIds::service() const {
  // @@protoc_insertion_point(field_list:casatools.rpc.ServiceIds.service)
  return service_;
}

// -------------------------------------------------------------------

// ServiceTypes

// repeated string types = 1;
inline int ServiceTypes::types_size() const {
  return types_.size();
}
inline void ServiceTypes::clear_types() {
  types_.Clear();
}
inline const ::std::string& ServiceTypes::types(int index) const {
  // @@protoc_insertion_point(field_get:casatools.rpc.ServiceTypes.types)
  return types_.Get(index);
}
inline ::std::string* ServiceTypes::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:casatools.rpc.ServiceTypes.types)
  return types_.Mutable(index);
}
inline void ServiceTypes::set_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:casatools.rpc.ServiceTypes.types)
  types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceTypes::set_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:casatools.rpc.ServiceTypes.types)
  types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceTypes::set_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:casatools.rpc.ServiceTypes.types)
}
inline void ServiceTypes::set_types(int index, const char* value, size_t size) {
  types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:casatools.rpc.ServiceTypes.types)
}
inline ::std::string* ServiceTypes::add_types() {
  // @@protoc_insertion_point(field_add_mutable:casatools.rpc.ServiceTypes.types)
  return types_.Add();
}
inline void ServiceTypes::add_types(const ::std::string& value) {
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:casatools.rpc.ServiceTypes.types)
}
#if LANG_CXX11
inline void ServiceTypes::add_types(::std::string&& value) {
  types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:casatools.rpc.ServiceTypes.types)
}
#endif
inline void ServiceTypes::add_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:casatools.rpc.ServiceTypes.types)
}
inline void ServiceTypes::add_types(const char* value, size_t size) {
  types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:casatools.rpc.ServiceTypes.types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceTypes::types() const {
  // @@protoc_insertion_point(field_list:casatools.rpc.ServiceTypes.types)
  return types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceTypes::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:casatools.rpc.ServiceTypes.types)
  return &types_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace casatools

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_registrar_2eproto__INCLUDED
