// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: registrar.proto
#ifndef GRPC_registrar_2eproto__INCLUDED
#define GRPC_registrar_2eproto__INCLUDED

#include "registrar.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace casatools {
namespace rpc {

class Registrar final {
 public:
  static constexpr char const* service_full_name() {
    return "casatools.rpc.Registrar";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // arg provides proposed id while result supplies the offical id
    virtual ::grpc::Status add(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::casatools::rpc::ServiceId* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceId>> Asyncadd(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceId>>(AsyncaddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceId>> PrepareAsyncadd(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceId>>(PrepareAsyncaddRaw(context, request, cq));
    }
    // only ServiceId.id is used for finding service to be removed
    virtual ::grpc::Status remove(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::google::protobuf::BoolValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>> Asyncremove(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>>(AsyncremoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>> PrepareAsyncremove(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>>(PrepareAsyncremoveRaw(context, request, cq));
    }
    virtual ::grpc::Status services(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::casatools::rpc::ServiceIds* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceIds>> Asyncservices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceIds>>(AsyncservicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceIds>> PrepareAsyncservices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceIds>>(PrepareAsyncservicesRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceId>* AsyncaddRaw(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceId>* PrepareAsyncaddRaw(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>* AsyncremoveRaw(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>* PrepareAsyncremoveRaw(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceIds>* AsyncservicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::casatools::rpc::ServiceIds>* PrepareAsyncservicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status add(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::casatools::rpc::ServiceId* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceId>> Asyncadd(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceId>>(AsyncaddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceId>> PrepareAsyncadd(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceId>>(PrepareAsyncaddRaw(context, request, cq));
    }
    ::grpc::Status remove(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::google::protobuf::BoolValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>> Asyncremove(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>>(AsyncremoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>> PrepareAsyncremove(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>>(PrepareAsyncremoveRaw(context, request, cq));
    }
    ::grpc::Status services(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::casatools::rpc::ServiceIds* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceIds>> Asyncservices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceIds>>(AsyncservicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceIds>> PrepareAsyncservices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceIds>>(PrepareAsyncservicesRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceId>* AsyncaddRaw(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceId>* PrepareAsyncaddRaw(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* AsyncremoveRaw(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* PrepareAsyncremoveRaw(::grpc::ClientContext* context, const ::casatools::rpc::ServiceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceIds>* AsyncservicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::casatools::rpc::ServiceIds>* PrepareAsyncservicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_add_;
    const ::grpc::internal::RpcMethod rpcmethod_remove_;
    const ::grpc::internal::RpcMethod rpcmethod_services_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // arg provides proposed id while result supplies the offical id
    virtual ::grpc::Status add(::grpc::ServerContext* context, const ::casatools::rpc::ServiceId* request, ::casatools::rpc::ServiceId* response);
    // only ServiceId.id is used for finding service to be removed
    virtual ::grpc::Status remove(::grpc::ServerContext* context, const ::casatools::rpc::ServiceId* request, ::google::protobuf::BoolValue* response);
    virtual ::grpc::Status services(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::casatools::rpc::ServiceIds* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_add() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add(::grpc::ServerContext* context, const ::casatools::rpc::ServiceId* request, ::casatools::rpc::ServiceId* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd(::grpc::ServerContext* context, ::casatools::rpc::ServiceId* request, ::grpc::ServerAsyncResponseWriter< ::casatools::rpc::ServiceId>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_remove() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove(::grpc::ServerContext* context, const ::casatools::rpc::ServiceId* request, ::google::protobuf::BoolValue* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremove(::grpc::ServerContext* context, ::casatools::rpc::ServiceId* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::BoolValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_services : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_services() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_services() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status services(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::casatools::rpc::ServiceIds* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestservices(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::casatools::rpc::ServiceIds>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_add<WithAsyncMethod_remove<WithAsyncMethod_services<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_add() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add(::grpc::ServerContext* context, const ::casatools::rpc::ServiceId* request, ::casatools::rpc::ServiceId* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_remove() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove(::grpc::ServerContext* context, const ::casatools::rpc::ServiceId* request, ::google::protobuf::BoolValue* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_services : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_services() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_services() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status services(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::casatools::rpc::ServiceIds* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_add() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::casatools::rpc::ServiceId, ::casatools::rpc::ServiceId>(std::bind(&WithStreamedUnaryMethod_add<BaseClass>::Streamedadd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add(::grpc::ServerContext* context, const ::casatools::rpc::ServiceId* request, ::casatools::rpc::ServiceId* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::casatools::rpc::ServiceId,::casatools::rpc::ServiceId>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_remove() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::casatools::rpc::ServiceId, ::google::protobuf::BoolValue>(std::bind(&WithStreamedUnaryMethod_remove<BaseClass>::Streamedremove, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status remove(::grpc::ServerContext* context, const ::casatools::rpc::ServiceId* request, ::google::protobuf::BoolValue* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedremove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::casatools::rpc::ServiceId,::google::protobuf::BoolValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_services : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_services() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::casatools::rpc::ServiceIds>(std::bind(&WithStreamedUnaryMethod_services<BaseClass>::Streamedservices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_services() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status services(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::casatools::rpc::ServiceIds* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedservices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::casatools::rpc::ServiceIds>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_add<WithStreamedUnaryMethod_remove<WithStreamedUnaryMethod_services<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_add<WithStreamedUnaryMethod_remove<WithStreamedUnaryMethod_services<Service > > > StreamedService;
};

}  // namespace rpc
}  // namespace casatools


#endif  // GRPC_registrar_2eproto__INCLUDED
