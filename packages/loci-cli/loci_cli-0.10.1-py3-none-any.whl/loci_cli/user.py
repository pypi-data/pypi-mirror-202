import click
import rich
import random
import string
from rich.table import Table

import loci


def password_meets_complexity(password: str) -> bool:
    has_lowercase = False
    has_uppercase = False
    has_digit = False
    is_long_enough = False

    for letter in string.ascii_lowercase:
        if letter in password:
            has_lowercase = True
            break

    for letter in string.ascii_uppercase:
        if letter in password:
            has_uppercase = True
            break

    for digit in string.digits:
        if digit in password:
            has_digit = True
            break

    if len(password) >= 10:
        is_long_enough = True

    return has_lowercase and has_uppercase and has_digit and is_long_enough


@click.group()
def user():
    """User management commands"""
    pass


@user.command()
def list():
    """Shows all users"""
    users = loci.api_get_users()
    users.sort(key=lambda x: x.full_name)

    table = Table(show_header=True, header_style="bold", show_lines=True)
    table.add_column("ID", style="dim", justify="right")
    table.add_column("Name", style="", justify="left")
    table.add_column("Active", style="", justify="right")
    table.box = rich.box.SIMPLE_HEAD

    for user in users:
        table.add_row(str(user.id),
                      user.full_name,
                      "[green bold]\u2713[/green bold]" if user.is_active else " ")

    loci.cli.console.print(table)


@user.command()
@click.option("-e", "--email",
              prompt="User Email",
              help="Email of new user.",
              required=True,
              type=str)
@click.option("-n", "--name",
              prompt="User Name",
              help="Full name of new user.",
              required=True,
              type=str)
@click.option("-p", "--password",
              help="Password of new user. Autogenerated if not provided.",
              default="",
              hide_input=True)
def new(email, name, password):
    """Creates a new user"""
    loci.cli.print_info("Creating new user.")
    new_password = False
    if password is None or password == "":
        password = ""
        new_password = True

        # This is a bit hacky, but makes sure that the password we generate will be allowed
        # according to server complexity rules.
        while not password_meets_complexity(password):
            password = ''.join(random.SystemRandom().choice(string.ascii_letters
                               + string.digits) for _ in range(12))

    user = loci.api_new_user(email, name, password)
    loci.cli.print_success("New user [bold]%s[/bold] created successfully." % user.full_name)
    if new_password:
        loci.cli.print_success(f"Autogenerated password is '{password}'. This will not be shown again. ")


def get_user_by_id(ctx, param, user: str):
    if not user or ctx.resilient_parsing:
        return

    ctx.ensure_object(dict)
    print("!!!!!!!!!!!!!! 1")
    user = loci.search_user_by_email_or_id(user)
    print("!!!!!!!!!!!!!! 2")

    ctx.obj["user_search_str"] = user
    ctx.obj["user_id"] = user.id
    ctx.obj["user_full_name"] = user.full_name
    return user.id


@user.command()
@click.pass_context
# We need to reimplement the --help option here because we have to make it eager before other eager options,
# otherwise we get some weird prompts and errors when trying to get the help docs.
@click.help_option(is_eager=True)
@click.option("-u", "--user",
              prompt=False,
              help="User email or ID to update",
              required=False,
              type=str,
              callback=get_user_by_id,
              is_eager=True)
@click.option("-n", "--name",
              prompt="Full Name",
              help="Full Name",
              required=False,
              type=str,
              cls=loci.cli.default_from_context("user_full_name"))
def edit(ctx, user: int, name: str):
    """Edits a user"""
    user_str = ctx.obj["user_search_str"]
    new_full_name = name
    user = loci.search_user_by_email_or_id(user)
    if user is None:
        loci.cli.print_error(f"User [bold]{user_str}[/bold] could not be found.")
        return

    try:
        prompt_input = click.prompt("Update Password?",
                                    type=click.Choice(["y", "n"], case_sensitive=False), default="n")

        new_password = None
        if prompt_input.lower() == "y":
            prompt_input = click.prompt("User Password",
                                        type=str,
                                        hide_input=True,
                                        confirmation_prompt="Confirm Password")
            new_password = prompt_input

        user = loci.api_update_user(user, new_full_name=new_full_name, new_password=new_password)

        loci.cli.print_success(f"[bold]{user.full_name}[/bold] updated successfully.")
    except click.Abort:
        loci.cli.print_error("User update cancelled.")
        return


@user.command()
@click.option("-u", "--user",
              prompt="User Email or ID",
              help="User email or ID to update",
              required=True,
              type=str)
def delete(user):
    """Deletes a user"""
    user = loci.search_user_by_email_or_id(user)
    if user is None:
        return
    loci.api_delete_user(user)
    loci.cli.print_success("[bold]%s[/bold] deleted successfully." % user.full_name)
