# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview:  This document outlines the methods available for administrating your Zadara Storage VPSA™. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage:  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the “Return a user’s access key” API in the Users Section below.  ## Authentication Methods:  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts:  By default, all operations that don’t complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product:  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array - All Flash Array VPSA  VPSA Storage Array - Hybrid VPSA  ## Questions:  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: v23.3
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse2005ResponseQuarantineFiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'volume_id': 'str',
        'volume_name': 'str',
        'file_name': 'str',
        'relative_path': 'str',
        'threat': 'str',
        'quarantine_time': 'str'
    }

    attribute_map = {
        'id': 'id',
        'volume_id': 'volume_id',
        'volume_name': 'volume_name',
        'file_name': 'file_name',
        'relative_path': 'relative_path',
        'threat': 'threat',
        'quarantine_time': 'quarantine_time'
    }

    def __init__(self, id=None, volume_id=None, volume_name=None, file_name=None, relative_path=None, threat=None, quarantine_time=None, _configuration=None):  # noqa: E501
        """InlineResponse2005ResponseQuarantineFiles - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._volume_id = None
        self._volume_name = None
        self._file_name = None
        self._relative_path = None
        self._threat = None
        self._quarantine_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if volume_id is not None:
            self.volume_id = volume_id
        if volume_name is not None:
            self.volume_name = volume_name
        if file_name is not None:
            self.file_name = file_name
        if relative_path is not None:
            self.relative_path = relative_path
        if threat is not None:
            self.threat = threat
        if quarantine_time is not None:
            self.quarantine_time = quarantine_time

    @property
    def id(self):
        """Gets the id of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501


        :return: The id of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2005ResponseQuarantineFiles.


        :param id: The id of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def volume_id(self):
        """Gets the volume_id of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501


        :return: The volume_id of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this InlineResponse2005ResponseQuarantineFiles.


        :param volume_id: The volume_id of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :type: str
        """

        self._volume_id = volume_id

    @property
    def volume_name(self):
        """Gets the volume_name of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501


        :return: The volume_name of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this InlineResponse2005ResponseQuarantineFiles.


        :param volume_name: The volume_name of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    @property
    def file_name(self):
        """Gets the file_name of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501


        :return: The file_name of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this InlineResponse2005ResponseQuarantineFiles.


        :param file_name: The file_name of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def relative_path(self):
        """Gets the relative_path of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501


        :return: The relative_path of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this InlineResponse2005ResponseQuarantineFiles.


        :param relative_path: The relative_path of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def threat(self):
        """Gets the threat of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501


        :return: The threat of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :rtype: str
        """
        return self._threat

    @threat.setter
    def threat(self, threat):
        """Sets the threat of this InlineResponse2005ResponseQuarantineFiles.


        :param threat: The threat of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :type: str
        """

        self._threat = threat

    @property
    def quarantine_time(self):
        """Gets the quarantine_time of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501


        :return: The quarantine_time of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :rtype: str
        """
        return self._quarantine_time

    @quarantine_time.setter
    def quarantine_time(self, quarantine_time):
        """Sets the quarantine_time of this InlineResponse2005ResponseQuarantineFiles.


        :param quarantine_time: The quarantine_time of this InlineResponse2005ResponseQuarantineFiles.  # noqa: E501
        :type: str
        """

        self._quarantine_time = quarantine_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005ResponseQuarantineFiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005ResponseQuarantineFiles):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2005ResponseQuarantineFiles):
            return True

        return self.to_dict() != other.to_dict()
