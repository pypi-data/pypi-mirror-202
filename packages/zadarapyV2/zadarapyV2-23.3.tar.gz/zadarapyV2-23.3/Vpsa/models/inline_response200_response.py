# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview:  This document outlines the methods available for administrating your Zadara Storage VPSA™. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage:  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the “Return a user’s access key” API in the Users Section below.  ## Authentication Methods:  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts:  By default, all operations that don’t complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product:  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array - All Flash Array VPSA  VPSA Storage Array - Hybrid VPSA  ## Questions:  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: v23.3
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'dat_date': 'str',
        'av_ver': 'str',
        'dat_ver': 'str',
        'eng_ver': 'str',
        'update_time': 'datetime',
        'eng_status': 'str',
        'volume': 'InlineResponse200ResponseVolume',
        'eng_volume': 'str'
    }

    attribute_map = {
        'status': 'status',
        'dat_date': 'dat_date',
        'av_ver': 'av_ver',
        'dat_ver': 'dat_ver',
        'eng_ver': 'eng_ver',
        'update_time': 'update_time',
        'eng_status': 'eng_status',
        'volume': 'volume',
        'eng_volume': 'eng_volume'
    }

    def __init__(self, status=None, dat_date=None, av_ver=None, dat_ver=None, eng_ver=None, update_time=None, eng_status=None, volume=None, eng_volume=None, _configuration=None):  # noqa: E501
        """InlineResponse200Response - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._dat_date = None
        self._av_ver = None
        self._dat_ver = None
        self._eng_ver = None
        self._update_time = None
        self._eng_status = None
        self._volume = None
        self._eng_volume = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if dat_date is not None:
            self.dat_date = dat_date
        if av_ver is not None:
            self.av_ver = av_ver
        if dat_ver is not None:
            self.dat_ver = dat_ver
        if eng_ver is not None:
            self.eng_ver = eng_ver
        if update_time is not None:
            self.update_time = update_time
        if eng_status is not None:
            self.eng_status = eng_status
        if volume is not None:
            self.volume = volume
        if eng_volume is not None:
            self.eng_volume = eng_volume

    @property
    def status(self):
        """Gets the status of this InlineResponse200Response.  # noqa: E501


        :return: The status of this InlineResponse200Response.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200Response.


        :param status: The status of this InlineResponse200Response.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def dat_date(self):
        """Gets the dat_date of this InlineResponse200Response.  # noqa: E501


        :return: The dat_date of this InlineResponse200Response.  # noqa: E501
        :rtype: str
        """
        return self._dat_date

    @dat_date.setter
    def dat_date(self, dat_date):
        """Sets the dat_date of this InlineResponse200Response.


        :param dat_date: The dat_date of this InlineResponse200Response.  # noqa: E501
        :type: str
        """

        self._dat_date = dat_date

    @property
    def av_ver(self):
        """Gets the av_ver of this InlineResponse200Response.  # noqa: E501


        :return: The av_ver of this InlineResponse200Response.  # noqa: E501
        :rtype: str
        """
        return self._av_ver

    @av_ver.setter
    def av_ver(self, av_ver):
        """Sets the av_ver of this InlineResponse200Response.


        :param av_ver: The av_ver of this InlineResponse200Response.  # noqa: E501
        :type: str
        """

        self._av_ver = av_ver

    @property
    def dat_ver(self):
        """Gets the dat_ver of this InlineResponse200Response.  # noqa: E501


        :return: The dat_ver of this InlineResponse200Response.  # noqa: E501
        :rtype: str
        """
        return self._dat_ver

    @dat_ver.setter
    def dat_ver(self, dat_ver):
        """Sets the dat_ver of this InlineResponse200Response.


        :param dat_ver: The dat_ver of this InlineResponse200Response.  # noqa: E501
        :type: str
        """

        self._dat_ver = dat_ver

    @property
    def eng_ver(self):
        """Gets the eng_ver of this InlineResponse200Response.  # noqa: E501


        :return: The eng_ver of this InlineResponse200Response.  # noqa: E501
        :rtype: str
        """
        return self._eng_ver

    @eng_ver.setter
    def eng_ver(self, eng_ver):
        """Sets the eng_ver of this InlineResponse200Response.


        :param eng_ver: The eng_ver of this InlineResponse200Response.  # noqa: E501
        :type: str
        """

        self._eng_ver = eng_ver

    @property
    def update_time(self):
        """Gets the update_time of this InlineResponse200Response.  # noqa: E501


        :return: The update_time of this InlineResponse200Response.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InlineResponse200Response.


        :param update_time: The update_time of this InlineResponse200Response.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def eng_status(self):
        """Gets the eng_status of this InlineResponse200Response.  # noqa: E501


        :return: The eng_status of this InlineResponse200Response.  # noqa: E501
        :rtype: str
        """
        return self._eng_status

    @eng_status.setter
    def eng_status(self, eng_status):
        """Sets the eng_status of this InlineResponse200Response.


        :param eng_status: The eng_status of this InlineResponse200Response.  # noqa: E501
        :type: str
        """

        self._eng_status = eng_status

    @property
    def volume(self):
        """Gets the volume of this InlineResponse200Response.  # noqa: E501


        :return: The volume of this InlineResponse200Response.  # noqa: E501
        :rtype: InlineResponse200ResponseVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this InlineResponse200Response.


        :param volume: The volume of this InlineResponse200Response.  # noqa: E501
        :type: InlineResponse200ResponseVolume
        """

        self._volume = volume

    @property
    def eng_volume(self):
        """Gets the eng_volume of this InlineResponse200Response.  # noqa: E501


        :return: The eng_volume of this InlineResponse200Response.  # noqa: E501
        :rtype: str
        """
        return self._eng_volume

    @eng_volume.setter
    def eng_volume(self, eng_volume):
        """Sets the eng_volume of this InlineResponse200Response.


        :param eng_volume: The eng_volume of this InlineResponse200Response.  # noqa: E501
        :type: str
        """

        self._eng_volume = eng_volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200Response):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200Response):
            return True

        return self.to_dict() != other.to_dict()
