# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview:  This document outlines the methods available for administrating your Zadara Storage VPSA™. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage:  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the “Return a user’s access key” API in the Users Section below.  ## Authentication Methods:  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts:  By default, all operations that don’t complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product:  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array - All Flash Array VPSA  VPSA Storage Array - Hybrid VPSA  ## Questions:  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: v23.3
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class BodyUpdateOnDemandPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'runpolicy': 'str',
        'filetypestoscan': 'str',
        'includefiletypes': 'str',
        'excludefiletypes': 'str',
        'scansubfolders': 'str',
        'scanarchives': 'str',
        'primaryaction': 'str',
        'secondaryaction': 'str'
    }

    attribute_map = {
        'runpolicy': 'runpolicy',
        'filetypestoscan': 'filetypestoscan',
        'includefiletypes': 'includefiletypes',
        'excludefiletypes': 'excludefiletypes',
        'scansubfolders': 'scansubfolders',
        'scanarchives': 'scanarchives',
        'primaryaction': 'primaryaction',
        'secondaryaction': 'secondaryaction'
    }

    def __init__(self, runpolicy=None, filetypestoscan=None, includefiletypes=None, excludefiletypes=None, scansubfolders=None, scanarchives=None, primaryaction=None, secondaryaction=None, _configuration=None):  # noqa: E501
        """BodyUpdateOnDemandPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._runpolicy = None
        self._filetypestoscan = None
        self._includefiletypes = None
        self._excludefiletypes = None
        self._scansubfolders = None
        self._scanarchives = None
        self._primaryaction = None
        self._secondaryaction = None
        self.discriminator = None

        self.runpolicy = runpolicy
        self.filetypestoscan = filetypestoscan
        if includefiletypes is not None:
            self.includefiletypes = includefiletypes
        if excludefiletypes is not None:
            self.excludefiletypes = excludefiletypes
        if scansubfolders is not None:
            self.scansubfolders = scansubfolders
        if scanarchives is not None:
            self.scanarchives = scanarchives
        if primaryaction is not None:
            self.primaryaction = primaryaction
        if secondaryaction is not None:
            self.secondaryaction = secondaryaction

    @property
    def runpolicy(self):
        """Gets the runpolicy of this BodyUpdateOnDemandPolicy.  # noqa: E501


        :return: The runpolicy of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :rtype: str
        """
        return self._runpolicy

    @runpolicy.setter
    def runpolicy(self, runpolicy):
        """Sets the runpolicy of this BodyUpdateOnDemandPolicy.


        :param runpolicy: The runpolicy of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and runpolicy is None:
            raise ValueError("Invalid value for `runpolicy`, must not be `None`")  # noqa: E501

        self._runpolicy = runpolicy

    @property
    def filetypestoscan(self):
        """Gets the filetypestoscan of this BodyUpdateOnDemandPolicy.  # noqa: E501


        :return: The filetypestoscan of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :rtype: str
        """
        return self._filetypestoscan

    @filetypestoscan.setter
    def filetypestoscan(self, filetypestoscan):
        """Sets the filetypestoscan of this BodyUpdateOnDemandPolicy.


        :param filetypestoscan: The filetypestoscan of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and filetypestoscan is None:
            raise ValueError("Invalid value for `filetypestoscan`, must not be `None`")  # noqa: E501

        self._filetypestoscan = filetypestoscan

    @property
    def includefiletypes(self):
        """Gets the includefiletypes of this BodyUpdateOnDemandPolicy.  # noqa: E501


        :return: The includefiletypes of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :rtype: str
        """
        return self._includefiletypes

    @includefiletypes.setter
    def includefiletypes(self, includefiletypes):
        """Sets the includefiletypes of this BodyUpdateOnDemandPolicy.


        :param includefiletypes: The includefiletypes of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :type: str
        """

        self._includefiletypes = includefiletypes

    @property
    def excludefiletypes(self):
        """Gets the excludefiletypes of this BodyUpdateOnDemandPolicy.  # noqa: E501


        :return: The excludefiletypes of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :rtype: str
        """
        return self._excludefiletypes

    @excludefiletypes.setter
    def excludefiletypes(self, excludefiletypes):
        """Sets the excludefiletypes of this BodyUpdateOnDemandPolicy.


        :param excludefiletypes: The excludefiletypes of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :type: str
        """

        self._excludefiletypes = excludefiletypes

    @property
    def scansubfolders(self):
        """Gets the scansubfolders of this BodyUpdateOnDemandPolicy.  # noqa: E501


        :return: The scansubfolders of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :rtype: str
        """
        return self._scansubfolders

    @scansubfolders.setter
    def scansubfolders(self, scansubfolders):
        """Sets the scansubfolders of this BodyUpdateOnDemandPolicy.


        :param scansubfolders: The scansubfolders of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :type: str
        """

        self._scansubfolders = scansubfolders

    @property
    def scanarchives(self):
        """Gets the scanarchives of this BodyUpdateOnDemandPolicy.  # noqa: E501


        :return: The scanarchives of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :rtype: str
        """
        return self._scanarchives

    @scanarchives.setter
    def scanarchives(self, scanarchives):
        """Sets the scanarchives of this BodyUpdateOnDemandPolicy.


        :param scanarchives: The scanarchives of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :type: str
        """

        self._scanarchives = scanarchives

    @property
    def primaryaction(self):
        """Gets the primaryaction of this BodyUpdateOnDemandPolicy.  # noqa: E501


        :return: The primaryaction of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :rtype: str
        """
        return self._primaryaction

    @primaryaction.setter
    def primaryaction(self, primaryaction):
        """Sets the primaryaction of this BodyUpdateOnDemandPolicy.


        :param primaryaction: The primaryaction of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :type: str
        """

        self._primaryaction = primaryaction

    @property
    def secondaryaction(self):
        """Gets the secondaryaction of this BodyUpdateOnDemandPolicy.  # noqa: E501


        :return: The secondaryaction of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :rtype: str
        """
        return self._secondaryaction

    @secondaryaction.setter
    def secondaryaction(self, secondaryaction):
        """Sets the secondaryaction of this BodyUpdateOnDemandPolicy.


        :param secondaryaction: The secondaryaction of this BodyUpdateOnDemandPolicy.  # noqa: E501
        :type: str
        """

        self._secondaryaction = secondaryaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BodyUpdateOnDemandPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyUpdateOnDemandPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BodyUpdateOnDemandPolicy):
            return True

        return self.to_dict() != other.to_dict()
