# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class Unpack(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class items(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class casLevelSubstances(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                casPrimaryKeyId = schemas.StrSchema
                                casID = schemas.StrSchema
                                amount = schemas.NumberSchema
                                __annotations__ = {
                                    "casPrimaryKeyId": casPrimaryKeyId,
                                    "casID": casID,
                                    "amount": amount,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["casPrimaryKeyId"]) -> MetaOapg.properties.casPrimaryKeyId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["casID"]) -> MetaOapg.properties.casID: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["casPrimaryKeyId", "casID", "amount", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["casPrimaryKeyId"]) -> typing.Union[MetaOapg.properties.casPrimaryKeyId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["casID"]) -> typing.Union[MetaOapg.properties.casID, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["casPrimaryKeyId", "casID", "amount", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            casPrimaryKeyId: typing.Union[MetaOapg.properties.casPrimaryKeyId, str, schemas.Unset] = schemas.unset,
                            casID: typing.Union[MetaOapg.properties.casID, str, schemas.Unset] = schemas.unset,
                            amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'casLevelSubstances':
                            return super().__new__(
                                cls,
                                *_args,
                                casPrimaryKeyId=casPrimaryKeyId,
                                casID=casID,
                                amount=amount,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class normalizedCasList(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                name = schemas.StrSchema
                                value = schemas.NumberSchema
                                albertId = schemas.StrSchema
                                smiles = schemas.StrSchema
                                __annotations__ = {
                                    "name": name,
                                    "value": value,
                                    "albertId": albertId,
                                    "smiles": smiles,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["smiles"]) -> MetaOapg.properties.smiles: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "value", "albertId", "smiles", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["albertId"]) -> typing.Union[MetaOapg.properties.albertId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["smiles"]) -> typing.Union[MetaOapg.properties.smiles, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "value", "albertId", "smiles", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            albertId: typing.Union[MetaOapg.properties.albertId, str, schemas.Unset] = schemas.unset,
                            smiles: typing.Union[MetaOapg.properties.smiles, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'normalizedCasList':
                            return super().__new__(
                                cls,
                                *_args,
                                name=name,
                                value=value,
                                albertId=albertId,
                                smiles=smiles,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class substances(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                externalID = schemas.StrSchema
                                amount = schemas.NumberSchema
                                __annotations__ = {
                                    "externalID": externalID,
                                    "amount": amount,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["externalID"]) -> MetaOapg.properties.externalID: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["externalID", "amount", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["externalID"]) -> typing.Union[MetaOapg.properties.externalID, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["externalID", "amount", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            externalID: typing.Union[MetaOapg.properties.externalID, str, schemas.Unset] = schemas.unset,
                            amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'substances':
                            return super().__new__(
                                cls,
                                *_args,
                                externalID=externalID,
                                amount=amount,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class inventorySDSList(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                albertId = schemas.StrSchema
                                value = schemas.NumberSchema
                                unNumber = schemas.StrSchema
                                _class = schemas.StrSchema
                                __annotations__ = {
                                    "albertId": albertId,
                                    "value": value,
                                    "unNumber": unNumber,
                                    "class": _class,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["unNumber"]) -> MetaOapg.properties.unNumber: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["class"]) -> MetaOapg.properties._class: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["albertId", "value", "unNumber", "class", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["albertId"]) -> typing.Union[MetaOapg.properties.albertId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["unNumber"]) -> typing.Union[MetaOapg.properties.unNumber, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["class"]) -> typing.Union[MetaOapg.properties._class, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["albertId", "value", "unNumber", "class", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            albertId: typing.Union[MetaOapg.properties.albertId, str, schemas.Unset] = schemas.unset,
                            value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            unNumber: typing.Union[MetaOapg.properties.unNumber, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'inventorySDSList':
                            return super().__new__(
                                cls,
                                *_args,
                                albertId=albertId,
                                value=value,
                                unNumber=unNumber,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class inventoryList(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                rowInventoryId = schemas.StrSchema
                                value = schemas.NumberSchema
                                colId = schemas.StrSchema
                                colInventoryId = schemas.StrSchema
                                parentId = schemas.StrSchema
                                rowId = schemas.StrSchema
                                __annotations__ = {
                                    "rowInventoryId": rowInventoryId,
                                    "value": value,
                                    "colId": colId,
                                    "colInventoryId": colInventoryId,
                                    "parentId": parentId,
                                    "rowId": rowId,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rowInventoryId"]) -> MetaOapg.properties.rowInventoryId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["colId"]) -> MetaOapg.properties.colId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["colInventoryId"]) -> MetaOapg.properties.colInventoryId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["parentId"]) -> MetaOapg.properties.parentId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rowId"]) -> MetaOapg.properties.rowId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["rowInventoryId", "value", "colId", "colInventoryId", "parentId", "rowId", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rowInventoryId"]) -> typing.Union[MetaOapg.properties.rowInventoryId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["colId"]) -> typing.Union[MetaOapg.properties.colId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["colInventoryId"]) -> typing.Union[MetaOapg.properties.colInventoryId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["parentId"]) -> typing.Union[MetaOapg.properties.parentId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rowId"]) -> typing.Union[MetaOapg.properties.rowId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rowInventoryId", "value", "colId", "colInventoryId", "parentId", "rowId", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            rowInventoryId: typing.Union[MetaOapg.properties.rowInventoryId, str, schemas.Unset] = schemas.unset,
                            value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            colId: typing.Union[MetaOapg.properties.colId, str, schemas.Unset] = schemas.unset,
                            colInventoryId: typing.Union[MetaOapg.properties.colInventoryId, str, schemas.Unset] = schemas.unset,
                            parentId: typing.Union[MetaOapg.properties.parentId, str, schemas.Unset] = schemas.unset,
                            rowId: typing.Union[MetaOapg.properties.rowId, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'inventoryList':
                            return super().__new__(
                                cls,
                                *_args,
                                rowInventoryId=rowInventoryId,
                                value=value,
                                colId=colId,
                                colInventoryId=colInventoryId,
                                parentId=parentId,
                                rowId=rowId,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class Inventories(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.StrSchema
                                rowInventoryId = schemas.StrSchema
                                name = schemas.StrSchema
                                colId = schemas.StrSchema
                                colInventoryId = schemas.StrSchema
                                parentId = schemas.StrSchema
                                rowId = schemas.StrSchema
                                rsnNumber = schemas.StrSchema
                                totalCasSum = schemas.NumberSchema
                                value = schemas.NumberSchema
                                
                                
                                class sdsInfo(
                                    schemas.AnyTypeSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            albertId = schemas.StrSchema
                                            value = schemas.NumberSchema
                                            unNumber = schemas.StrSchema
                                            _class = schemas.StrSchema
                                            __annotations__ = {
                                                "albertId": albertId,
                                                "value": value,
                                                "unNumber": unNumber,
                                                "class": _class,
                                            }
                                
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["unNumber"]) -> MetaOapg.properties.unNumber: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["class"]) -> MetaOapg.properties._class: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["albertId", "value", "unNumber", "class", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["albertId"]) -> typing.Union[MetaOapg.properties.albertId, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["unNumber"]) -> typing.Union[MetaOapg.properties.unNumber, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["class"]) -> typing.Union[MetaOapg.properties._class, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["albertId", "value", "unNumber", "class", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        albertId: typing.Union[MetaOapg.properties.albertId, str, schemas.Unset] = schemas.unset,
                                        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        unNumber: typing.Union[MetaOapg.properties.unNumber, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'sdsInfo':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            albertId=albertId,
                                            value=value,
                                            unNumber=unNumber,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class casInfo(
                                    schemas.AnyTypeSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            id = schemas.StrSchema
                                            name = schemas.StrSchema
                                            min = schemas.NumberSchema
                                            max = schemas.NumberSchema
                                            casSmiles = schemas.NumberSchema
                                            number = schemas.NumberSchema
                                            casAvg = schemas.NumberSchema
                                            casSum = schemas.NumberSchema
                                            __annotations__ = {
                                                "id": id,
                                                "name": name,
                                                "min": min,
                                                "max": max,
                                                "casSmiles": casSmiles,
                                                "number": number,
                                                "casAvg": casAvg,
                                                "casSum": casSum,
                                            }
                                
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["casSmiles"]) -> MetaOapg.properties.casSmiles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["casAvg"]) -> MetaOapg.properties.casAvg: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["casSum"]) -> MetaOapg.properties.casSum: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "min", "max", "casSmiles", "number", "casAvg", "casSum", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union[MetaOapg.properties.min, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["casSmiles"]) -> typing.Union[MetaOapg.properties.casSmiles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["casAvg"]) -> typing.Union[MetaOapg.properties.casAvg, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["casSum"]) -> typing.Union[MetaOapg.properties.casSum, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "min", "max", "casSmiles", "number", "casAvg", "casSum", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        min: typing.Union[MetaOapg.properties.min, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        max: typing.Union[MetaOapg.properties.max, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        casSmiles: typing.Union[MetaOapg.properties.casSmiles, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        number: typing.Union[MetaOapg.properties.number, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        casAvg: typing.Union[MetaOapg.properties.casAvg, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        casSum: typing.Union[MetaOapg.properties.casSum, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'casInfo':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            id=id,
                                            name=name,
                                            min=min,
                                            max=max,
                                            casSmiles=casSmiles,
                                            number=number,
                                            casAvg=casAvg,
                                            casSum=casSum,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "id": id,
                                    "rowInventoryId": rowInventoryId,
                                    "name": name,
                                    "colId": colId,
                                    "colInventoryId": colInventoryId,
                                    "parentId": parentId,
                                    "rowId": rowId,
                                    "rsnNumber": rsnNumber,
                                    "totalCasSum": totalCasSum,
                                    "value": value,
                                    "sdsInfo": sdsInfo,
                                    "casInfo": casInfo,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rowInventoryId"]) -> MetaOapg.properties.rowInventoryId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["colId"]) -> MetaOapg.properties.colId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["colInventoryId"]) -> MetaOapg.properties.colInventoryId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["parentId"]) -> MetaOapg.properties.parentId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rowId"]) -> MetaOapg.properties.rowId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rsnNumber"]) -> MetaOapg.properties.rsnNumber: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["totalCasSum"]) -> MetaOapg.properties.totalCasSum: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sdsInfo"]) -> MetaOapg.properties.sdsInfo: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["casInfo"]) -> MetaOapg.properties.casInfo: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "rowInventoryId", "name", "colId", "colInventoryId", "parentId", "rowId", "rsnNumber", "totalCasSum", "value", "sdsInfo", "casInfo", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rowInventoryId"]) -> typing.Union[MetaOapg.properties.rowInventoryId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["colId"]) -> typing.Union[MetaOapg.properties.colId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["colInventoryId"]) -> typing.Union[MetaOapg.properties.colInventoryId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["parentId"]) -> typing.Union[MetaOapg.properties.parentId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rowId"]) -> typing.Union[MetaOapg.properties.rowId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rsnNumber"]) -> typing.Union[MetaOapg.properties.rsnNumber, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["totalCasSum"]) -> typing.Union[MetaOapg.properties.totalCasSum, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sdsInfo"]) -> typing.Union[MetaOapg.properties.sdsInfo, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["casInfo"]) -> typing.Union[MetaOapg.properties.casInfo, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "rowInventoryId", "name", "colId", "colInventoryId", "parentId", "rowId", "rsnNumber", "totalCasSum", "value", "sdsInfo", "casInfo", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            rowInventoryId: typing.Union[MetaOapg.properties.rowInventoryId, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            colId: typing.Union[MetaOapg.properties.colId, str, schemas.Unset] = schemas.unset,
                            colInventoryId: typing.Union[MetaOapg.properties.colInventoryId, str, schemas.Unset] = schemas.unset,
                            parentId: typing.Union[MetaOapg.properties.parentId, str, schemas.Unset] = schemas.unset,
                            rowId: typing.Union[MetaOapg.properties.rowId, str, schemas.Unset] = schemas.unset,
                            rsnNumber: typing.Union[MetaOapg.properties.rsnNumber, str, schemas.Unset] = schemas.unset,
                            totalCasSum: typing.Union[MetaOapg.properties.totalCasSum, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            sdsInfo: typing.Union[MetaOapg.properties.sdsInfo, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            casInfo: typing.Union[MetaOapg.properties.casInfo, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'Inventories':
                            return super().__new__(
                                cls,
                                *_args,
                                id=id,
                                rowInventoryId=rowInventoryId,
                                name=name,
                                colId=colId,
                                colInventoryId=colInventoryId,
                                parentId=parentId,
                                rowId=rowId,
                                rsnNumber=rsnNumber,
                                totalCasSum=totalCasSum,
                                value=value,
                                sdsInfo=sdsInfo,
                                casInfo=casInfo,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "casLevelSubstances": casLevelSubstances,
                        "normalizedCasList": normalizedCasList,
                        "substances": substances,
                        "inventorySDSList": inventorySDSList,
                        "inventoryList": inventoryList,
                        "Inventories": Inventories,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["casLevelSubstances"]) -> MetaOapg.properties.casLevelSubstances: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["normalizedCasList"]) -> MetaOapg.properties.normalizedCasList: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["substances"]) -> MetaOapg.properties.substances: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["inventorySDSList"]) -> MetaOapg.properties.inventorySDSList: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["inventoryList"]) -> MetaOapg.properties.inventoryList: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Inventories"]) -> MetaOapg.properties.Inventories: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["casLevelSubstances", "normalizedCasList", "substances", "inventorySDSList", "inventoryList", "Inventories", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["casLevelSubstances"]) -> typing.Union[MetaOapg.properties.casLevelSubstances, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["normalizedCasList"]) -> typing.Union[MetaOapg.properties.normalizedCasList, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["substances"]) -> typing.Union[MetaOapg.properties.substances, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["inventorySDSList"]) -> typing.Union[MetaOapg.properties.inventorySDSList, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["inventoryList"]) -> typing.Union[MetaOapg.properties.inventoryList, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Inventories"]) -> typing.Union[MetaOapg.properties.Inventories, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["casLevelSubstances", "normalizedCasList", "substances", "inventorySDSList", "inventoryList", "Inventories", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                casLevelSubstances: typing.Union[MetaOapg.properties.casLevelSubstances, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                normalizedCasList: typing.Union[MetaOapg.properties.normalizedCasList, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                substances: typing.Union[MetaOapg.properties.substances, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                inventorySDSList: typing.Union[MetaOapg.properties.inventorySDSList, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                inventoryList: typing.Union[MetaOapg.properties.inventoryList, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                Inventories: typing.Union[MetaOapg.properties.Inventories, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    casLevelSubstances=casLevelSubstances,
                    normalizedCasList=normalizedCasList,
                    substances=substances,
                    inventorySDSList=inventorySDSList,
                    inventoryList=inventoryList,
                    Inventories=Inventories,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Unpack':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
