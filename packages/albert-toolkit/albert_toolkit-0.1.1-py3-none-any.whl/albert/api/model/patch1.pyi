# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class Patch1(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "sourceId",
                                "attribute",
                                "operation",
                                "referenceId",
                            }
                            
                            class properties:
                                
                                
                                class operation(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def UPDATE(cls):
                                        return cls("update")
                                
                                
                                class attribute(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def SEQUENCE(cls):
                                        return cls("sequence")
                                sourceId = schemas.StrSchema
                                referenceId = schemas.StrSchema
                                __annotations__ = {
                                    "operation": operation,
                                    "attribute": attribute,
                                    "sourceId": sourceId,
                                    "referenceId": referenceId,
                                }
                        
                        sourceId: MetaOapg.properties.sourceId
                        attribute: MetaOapg.properties.attribute
                        operation: MetaOapg.properties.operation
                        referenceId: MetaOapg.properties.referenceId
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["attribute"]) -> MetaOapg.properties.attribute: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sourceId"]) -> MetaOapg.properties.sourceId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["referenceId"]) -> MetaOapg.properties.referenceId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["operation", "attribute", "sourceId", "referenceId", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["attribute"]) -> MetaOapg.properties.attribute: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sourceId"]) -> MetaOapg.properties.sourceId: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["referenceId"]) -> MetaOapg.properties.referenceId: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["operation", "attribute", "sourceId", "referenceId", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            sourceId: typing.Union[MetaOapg.properties.sourceId, str, ],
                            attribute: typing.Union[MetaOapg.properties.attribute, str, ],
                            operation: typing.Union[MetaOapg.properties.operation, str, ],
                            referenceId: typing.Union[MetaOapg.properties.referenceId, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                sourceId=sourceId,
                                attribute=attribute,
                                operation=operation,
                                referenceId=referenceId,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "data": data,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        data: typing.Union[MetaOapg.properties.data, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Patch1':
        return super().__new__(
            cls,
            *_args,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )
