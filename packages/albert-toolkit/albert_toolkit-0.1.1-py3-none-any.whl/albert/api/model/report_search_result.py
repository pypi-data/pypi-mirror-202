# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class ReportSearchResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            reportType = schemas.StrSchema
            createdByName = schemas.StrSchema
            linkedTo = schemas.StrSchema
            updatedByName = schemas.StrSchema
            name = schemas.StrSchema
            albertId = schemas.StrSchema
            createdAt = schemas.StrSchema
            updatedAt = schemas.StrSchema
            __annotations__ = {
                "reportType": reportType,
                "createdByName": createdByName,
                "linkedTo": linkedTo,
                "updatedByName": updatedByName,
                "name": name,
                "albertId": albertId,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportType"]) -> MetaOapg.properties.reportType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdByName"]) -> MetaOapg.properties.createdByName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linkedTo"]) -> MetaOapg.properties.linkedTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedByName"]) -> MetaOapg.properties.updatedByName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reportType", "createdByName", "linkedTo", "updatedByName", "name", "albertId", "createdAt", "updatedAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportType"]) -> typing.Union[MetaOapg.properties.reportType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdByName"]) -> typing.Union[MetaOapg.properties.createdByName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linkedTo"]) -> typing.Union[MetaOapg.properties.linkedTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedByName"]) -> typing.Union[MetaOapg.properties.updatedByName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["albertId"]) -> typing.Union[MetaOapg.properties.albertId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reportType", "createdByName", "linkedTo", "updatedByName", "name", "albertId", "createdAt", "updatedAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        reportType: typing.Union[MetaOapg.properties.reportType, str, schemas.Unset] = schemas.unset,
        createdByName: typing.Union[MetaOapg.properties.createdByName, str, schemas.Unset] = schemas.unset,
        linkedTo: typing.Union[MetaOapg.properties.linkedTo, str, schemas.Unset] = schemas.unset,
        updatedByName: typing.Union[MetaOapg.properties.updatedByName, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        albertId: typing.Union[MetaOapg.properties.albertId, str, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportSearchResult':
        return super().__new__(
            cls,
            *_args,
            reportType=reportType,
            createdByName=createdByName,
            linkedTo=linkedTo,
            updatedByName=updatedByName,
            name=name,
            albertId=albertId,
            createdAt=createdAt,
            updatedAt=updatedAt,
            _configuration=_configuration,
            **kwargs,
        )
