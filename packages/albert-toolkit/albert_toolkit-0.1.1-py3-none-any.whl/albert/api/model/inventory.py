# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class Inventory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "companyId",
            "createdBy",
            "unitCategory",
            "name",
            "description",
            "id",
            "category",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 2
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 500
                    min_length = 2
            
            
            class companyId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 1
            
            
            class category(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "RawMaterials": "RAW_MATERIALS",
                        "Consumables": "CONSUMABLES",
                        "Equipment": "EQUIPMENT",
                        "Formulas": "FORMULAS",
                    }
                
                @schemas.classproperty
                def RAW_MATERIALS(cls):
                    return cls("RawMaterials")
                
                @schemas.classproperty
                def CONSUMABLES(cls):
                    return cls("Consumables")
                
                @schemas.classproperty
                def EQUIPMENT(cls):
                    return cls("Equipment")
                
                @schemas.classproperty
                def FORMULAS(cls):
                    return cls("Formulas")
            
            
            class unitCategory(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "mass": "MASS",
                        "volume": "VOLUME",
                        "length": "LENGTH",
                        "pressure": "PRESSURE",
                        "units": "UNITS",
                    }
                
                @schemas.classproperty
                def MASS(cls):
                    return cls("mass")
                
                @schemas.classproperty
                def VOLUME(cls):
                    return cls("volume")
                
                @schemas.classproperty
                def LENGTH(cls):
                    return cls("length")
                
                @schemas.classproperty
                def PRESSURE(cls):
                    return cls("pressure")
                
                @schemas.classproperty
                def UNITS(cls):
                    return cls("units")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "active": "ACTIVE",
                        "inactive": "INACTIVE",
                    }
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("inactive")
            createdBy = schemas.StrSchema
            
            
            class companyName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 1
            
            
            class Minimum(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Minimum']:
                        return Minimum
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Minimum'], typing.List['Minimum']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Minimum':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Minimum':
                    return super().__getitem__(i)
            createdAt = schemas.DateTimeSchema
            updatedBy = schemas.StrSchema
            updatedAt = schemas.DateTimeSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "description": description,
                "companyId": companyId,
                "category": category,
                "unitCategory": unitCategory,
                "status": status,
                "createdBy": createdBy,
                "companyName": companyName,
                "Minimum": Minimum,
                "createdAt": createdAt,
                "updatedBy": updatedBy,
                "updatedAt": updatedAt,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    companyId: MetaOapg.properties.companyId
    createdBy: MetaOapg.properties.createdBy
    unitCategory: MetaOapg.properties.unitCategory
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    category: MetaOapg.properties.category
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitCategory"]) -> MetaOapg.properties.unitCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Minimum"]) -> MetaOapg.properties.Minimum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedBy"]) -> MetaOapg.properties.updatedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["companyId"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["unitCategory"], typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["id"], typing_extensions.Literal["category"], typing_extensions.Literal["status"], typing_extensions.Literal["companyName"], typing_extensions.Literal["Minimum"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["updatedBy"], typing_extensions.Literal["updatedAt"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitCategory"]) -> MetaOapg.properties.unitCategory: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyName"]) -> typing.Union[MetaOapg.properties.companyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Minimum"]) -> typing.Union[MetaOapg.properties.Minimum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedBy"]) -> typing.Union[MetaOapg.properties.updatedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["companyId"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["unitCategory"], typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["id"], typing_extensions.Literal["category"], typing_extensions.Literal["status"], typing_extensions.Literal["companyName"], typing_extensions.Literal["Minimum"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["updatedBy"], typing_extensions.Literal["updatedAt"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        companyId: typing.Union[MetaOapg.properties.companyId, str, ],
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, ],
        unitCategory: typing.Union[MetaOapg.properties.unitCategory, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        category: typing.Union[MetaOapg.properties.category, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        companyName: typing.Union[MetaOapg.properties.companyName, str, schemas.Unset] = schemas.unset,
        Minimum: typing.Union[MetaOapg.properties.Minimum, list, tuple, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        updatedBy: typing.Union[MetaOapg.properties.updatedBy, str, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Inventory':
        return super().__new__(
            cls,
            *_args,
            companyId=companyId,
            createdBy=createdBy,
            unitCategory=unitCategory,
            name=name,
            description=description,
            id=id,
            category=category,
            status=status,
            companyName=companyName,
            Minimum=Minimum,
            createdAt=createdAt,
            updatedBy=updatedBy,
            updatedAt=updatedAt,
            _configuration=_configuration,
        )

from albert.api.model.minimum import Minimum
