# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class Location(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "address",
            "latitude",
            "name",
            "albertId",
            "longitude",
        }
        
        class properties:
            albertId = schemas.StrSchema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class latitude(
                schemas.Float32Schema
            ):
                pass
            
            
            class longitude(
                schemas.Float32Schema
            ):
                pass
            
            
            class address(
                schemas.StrSchema
            ):
                pass
            
            
            class country(
                schemas.StrSchema
            ):
                pass
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("inactive")
            
            
            class Created(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        by = schemas.StrSchema
                        byName = schemas.StrSchema
                        at = schemas.StrSchema
                        __annotations__ = {
                            "by": by,
                            "byName": byName,
                            "at": at,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["by"]) -> MetaOapg.properties.by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["byName"]) -> MetaOapg.properties.byName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["by"]) -> typing.Union[MetaOapg.properties.by, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["byName"]) -> typing.Union[MetaOapg.properties.byName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["at"]) -> typing.Union[MetaOapg.properties.at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    by: typing.Union[MetaOapg.properties.by, str, schemas.Unset] = schemas.unset,
                    byName: typing.Union[MetaOapg.properties.byName, str, schemas.Unset] = schemas.unset,
                    at: typing.Union[MetaOapg.properties.at, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Created':
                    return super().__new__(
                        cls,
                        *_args,
                        by=by,
                        byName=byName,
                        at=at,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Updated(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        by = schemas.StrSchema
                        byName = schemas.StrSchema
                        at = schemas.StrSchema
                        __annotations__ = {
                            "by": by,
                            "byName": byName,
                            "at": at,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["by"]) -> MetaOapg.properties.by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["byName"]) -> MetaOapg.properties.byName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["by"]) -> typing.Union[MetaOapg.properties.by, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["byName"]) -> typing.Union[MetaOapg.properties.byName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["at"]) -> typing.Union[MetaOapg.properties.at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    by: typing.Union[MetaOapg.properties.by, str, schemas.Unset] = schemas.unset,
                    byName: typing.Union[MetaOapg.properties.byName, str, schemas.Unset] = schemas.unset,
                    at: typing.Union[MetaOapg.properties.at, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Updated':
                    return super().__new__(
                        cls,
                        *_args,
                        by=by,
                        byName=byName,
                        at=at,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "albertId": albertId,
                "name": name,
                "latitude": latitude,
                "longitude": longitude,
                "address": address,
                "country": country,
                "status": status,
                "Created": Created,
                "Updated": Updated,
            }
        additional_properties = schemas.AnyTypeSchema
    
    address: MetaOapg.properties.address
    latitude: MetaOapg.properties.latitude
    name: MetaOapg.properties.name
    albertId: MetaOapg.properties.albertId
    longitude: MetaOapg.properties.longitude
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Created"]) -> MetaOapg.properties.Created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Updated"]) -> MetaOapg.properties.Updated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address"], typing_extensions.Literal["latitude"], typing_extensions.Literal["name"], typing_extensions.Literal["albertId"], typing_extensions.Literal["longitude"], typing_extensions.Literal["country"], typing_extensions.Literal["status"], typing_extensions.Literal["Created"], typing_extensions.Literal["Updated"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Created"]) -> typing.Union[MetaOapg.properties.Created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Updated"]) -> typing.Union[MetaOapg.properties.Updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address"], typing_extensions.Literal["latitude"], typing_extensions.Literal["name"], typing_extensions.Literal["albertId"], typing_extensions.Literal["longitude"], typing_extensions.Literal["country"], typing_extensions.Literal["status"], typing_extensions.Literal["Created"], typing_extensions.Literal["Updated"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        albertId: typing.Union[MetaOapg.properties.albertId, str, ],
        longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, ],
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        Created: typing.Union[MetaOapg.properties.Created, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Updated: typing.Union[MetaOapg.properties.Updated, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Location':
        return super().__new__(
            cls,
            *_args,
            address=address,
            latitude=latitude,
            name=name,
            albertId=albertId,
            longitude=longitude,
            country=country,
            status=status,
            Created=Created,
            Updated=Updated,
            _configuration=_configuration,
            **kwargs,
        )
