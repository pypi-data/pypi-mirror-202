# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class ReportType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            reportTypeId = schemas.StrSchema
            reportType = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class ComponentInput(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ComponentInput']:
                        return ComponentInput
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ComponentInput'], typing.List['ComponentInput']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ComponentInput':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ComponentInput':
                    return super().__getitem__(i)
            spName = schemas.StrSchema
            
            
            class category(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "analytics": "ANALYTICS",
                        "datascience": "DATASCIENCE",
                        "reports": "REPORTS",
                    }
                
                @schemas.classproperty
                def ANALYTICS(cls):
                    return cls("analytics")
                
                @schemas.classproperty
                def DATASCIENCE(cls):
                    return cls("datascience")
                
                @schemas.classproperty
                def REPORTS(cls):
                    return cls("reports")
            version = schemas.NumberSchema
            status = schemas.StrSchema
            __annotations__ = {
                "reportTypeId": reportTypeId,
                "reportType": reportType,
                "description": description,
                "ComponentInput": ComponentInput,
                "spName": spName,
                "category": category,
                "version": version,
                "status": status,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportTypeId"]) -> MetaOapg.properties.reportTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportType"]) -> MetaOapg.properties.reportType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ComponentInput"]) -> MetaOapg.properties.ComponentInput: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spName"]) -> MetaOapg.properties.spName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reportTypeId"], typing_extensions.Literal["reportType"], typing_extensions.Literal["description"], typing_extensions.Literal["ComponentInput"], typing_extensions.Literal["spName"], typing_extensions.Literal["category"], typing_extensions.Literal["version"], typing_extensions.Literal["status"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportTypeId"]) -> typing.Union[MetaOapg.properties.reportTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportType"]) -> typing.Union[MetaOapg.properties.reportType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ComponentInput"]) -> typing.Union[MetaOapg.properties.ComponentInput, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spName"]) -> typing.Union[MetaOapg.properties.spName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reportTypeId"], typing_extensions.Literal["reportType"], typing_extensions.Literal["description"], typing_extensions.Literal["ComponentInput"], typing_extensions.Literal["spName"], typing_extensions.Literal["category"], typing_extensions.Literal["version"], typing_extensions.Literal["status"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        reportTypeId: typing.Union[MetaOapg.properties.reportTypeId, str, schemas.Unset] = schemas.unset,
        reportType: typing.Union[MetaOapg.properties.reportType, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        ComponentInput: typing.Union[MetaOapg.properties.ComponentInput, list, tuple, schemas.Unset] = schemas.unset,
        spName: typing.Union[MetaOapg.properties.spName, str, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ReportType':
        return super().__new__(
            cls,
            *_args,
            reportTypeId=reportTypeId,
            reportType=reportType,
            description=description,
            ComponentInput=ComponentInput,
            spName=spName,
            category=category,
            version=version,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from albert.api.model.component_input import ComponentInput
