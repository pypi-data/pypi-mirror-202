# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class DataModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class propertyTaskId(
                schemas.IntSchema
            ):
                pass
            
            
            class modelId(
                schemas.StrSchema
            ):
                pass
            
            
            class modelVersion(
                schemas.StrSchema
            ):
                pass
            
            
            class propertyDataColumnId(
                schemas.IntSchema
            ):
                pass
            
            
            class inputs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            @classmethod
                            @functools.lru_cache()
                            def any_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    Parameter,
                                    CAS,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inputs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class propertyTaskOperatingConditionId(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'propertyTaskOperatingConditionId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class propertyTaskOperatingConditionId2(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'propertyTaskOperatingConditionId2':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "propertyTaskId": propertyTaskId,
                "modelId": modelId,
                "modelVersion": modelVersion,
                "propertyDataColumnId": propertyDataColumnId,
                "inputs": inputs,
                "propertyTaskOperatingConditionId": propertyTaskOperatingConditionId,
                "propertyTaskOperatingConditionId2": propertyTaskOperatingConditionId2,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["propertyTaskId"]) -> MetaOapg.properties.propertyTaskId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelVersion"]) -> MetaOapg.properties.modelVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["propertyDataColumnId"]) -> MetaOapg.properties.propertyDataColumnId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputs"]) -> MetaOapg.properties.inputs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["propertyTaskOperatingConditionId"]) -> MetaOapg.properties.propertyTaskOperatingConditionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["propertyTaskOperatingConditionId2"]) -> MetaOapg.properties.propertyTaskOperatingConditionId2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["propertyTaskId", "modelId", "modelVersion", "propertyDataColumnId", "inputs", "propertyTaskOperatingConditionId", "propertyTaskOperatingConditionId2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["propertyTaskId"]) -> typing.Union[MetaOapg.properties.propertyTaskId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> typing.Union[MetaOapg.properties.modelId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelVersion"]) -> typing.Union[MetaOapg.properties.modelVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["propertyDataColumnId"]) -> typing.Union[MetaOapg.properties.propertyDataColumnId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputs"]) -> typing.Union[MetaOapg.properties.inputs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["propertyTaskOperatingConditionId"]) -> typing.Union[MetaOapg.properties.propertyTaskOperatingConditionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["propertyTaskOperatingConditionId2"]) -> typing.Union[MetaOapg.properties.propertyTaskOperatingConditionId2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["propertyTaskId", "modelId", "modelVersion", "propertyDataColumnId", "inputs", "propertyTaskOperatingConditionId", "propertyTaskOperatingConditionId2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        propertyTaskId: typing.Union[MetaOapg.properties.propertyTaskId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        modelId: typing.Union[MetaOapg.properties.modelId, str, schemas.Unset] = schemas.unset,
        modelVersion: typing.Union[MetaOapg.properties.modelVersion, str, schemas.Unset] = schemas.unset,
        propertyDataColumnId: typing.Union[MetaOapg.properties.propertyDataColumnId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        inputs: typing.Union[MetaOapg.properties.inputs, list, tuple, schemas.Unset] = schemas.unset,
        propertyTaskOperatingConditionId: typing.Union[MetaOapg.properties.propertyTaskOperatingConditionId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        propertyTaskOperatingConditionId2: typing.Union[MetaOapg.properties.propertyTaskOperatingConditionId2, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataModel':
        return super().__new__(
            cls,
            *_args,
            propertyTaskId=propertyTaskId,
            modelId=modelId,
            modelVersion=modelVersion,
            propertyDataColumnId=propertyDataColumnId,
            inputs=inputs,
            propertyTaskOperatingConditionId=propertyTaskOperatingConditionId,
            propertyTaskOperatingConditionId2=propertyTaskOperatingConditionId2,
            _configuration=_configuration,
            **kwargs,
        )

from albert.api.model.cas import CAS
from albert.api.model.parameter import Parameter
