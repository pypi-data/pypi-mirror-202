# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class ModelPrediction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "predictionType",
            "normalizedStd",
            "modelId",
            "modelVersion",
            "inventoryId",
            "normalizedStd/prediction",
            "normalizedPrediction",
            "taskId",
        }
        
        class properties:
            modelId = schemas.StrSchema
            modelVersion = schemas.StrSchema
            
            
            class predictionType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LOOP(cls):
                    return cls("loop")
                
                @schemas.classproperty
                def BASE(cls):
                    return cls("base")
                
                @schemas.classproperty
                def USED_WITH(cls):
                    return cls("usedWith")
            normalizedPrediction = schemas.NumberSchema
            normalizedStd = schemas.NumberSchema
            normalized_std_prediction = schemas.NumberSchema
            inventoryId = schemas.StrSchema
            taskId = schemas.StrSchema
            albertId = schemas.StrSchema
            parentId = schemas.StrSchema
            modelName = schemas.StrSchema
            
            
            class modelClass(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modelClass':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            modelOrganization = schemas.StrSchema
            dataColumnId = schemas.StrSchema
            dataColumnName = schemas.StrSchema
            dataColumnUniqueId = schemas.StrSchema
            datatemplateId = schemas.StrSchema
            
            
            class variable(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'variable':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class variableUnit(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'variableUnit':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class variableValue(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'variableValue':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            logPrediction = schemas.NumberSchema
            oneSigmaLower = schemas.NumberSchema
            oneSigmaUpper = schemas.NumberSchema
            
            
            class percentFormulaKnown(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'percentFormulaKnown':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class userAverageDataPoint(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userAverageDataPoint':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class userStandardDeviation(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userStandardDeviation':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class flaggingMetadata(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'flaggingMetadata':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            entity = schemas.StrSchema
            id = schemas.StrSchema
            
            
            class workflowId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class intervalId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'intervalId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class projectId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'projectId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Created(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        by = schemas.StrSchema
                        byName = schemas.StrSchema
                        at = schemas.StrSchema
                        __annotations__ = {
                            "by": by,
                            "byName": byName,
                            "at": at,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["by"]) -> MetaOapg.properties.by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["byName"]) -> MetaOapg.properties.byName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["by"]) -> typing.Union[MetaOapg.properties.by, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["byName"]) -> typing.Union[MetaOapg.properties.byName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["at"]) -> typing.Union[MetaOapg.properties.at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    by: typing.Union[MetaOapg.properties.by, str, schemas.Unset] = schemas.unset,
                    byName: typing.Union[MetaOapg.properties.byName, str, schemas.Unset] = schemas.unset,
                    at: typing.Union[MetaOapg.properties.at, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Created':
                    return super().__new__(
                        cls,
                        *_args,
                        by=by,
                        byName=byName,
                        at=at,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Updated(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        by = schemas.StrSchema
                        byName = schemas.StrSchema
                        at = schemas.StrSchema
                        __annotations__ = {
                            "by": by,
                            "byName": byName,
                            "at": at,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["by"]) -> MetaOapg.properties.by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["byName"]) -> MetaOapg.properties.byName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["by"]) -> typing.Union[MetaOapg.properties.by, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["byName"]) -> typing.Union[MetaOapg.properties.byName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["at"]) -> typing.Union[MetaOapg.properties.at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    by: typing.Union[MetaOapg.properties.by, str, schemas.Unset] = schemas.unset,
                    byName: typing.Union[MetaOapg.properties.byName, str, schemas.Unset] = schemas.unset,
                    at: typing.Union[MetaOapg.properties.at, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Updated':
                    return super().__new__(
                        cls,
                        *_args,
                        by=by,
                        byName=byName,
                        at=at,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "modelId": modelId,
                "modelVersion": modelVersion,
                "predictionType": predictionType,
                "normalizedPrediction": normalizedPrediction,
                "normalizedStd": normalizedStd,
                "normalizedStd/prediction": normalized_std_prediction,
                "inventoryId": inventoryId,
                "taskId": taskId,
                "albertId": albertId,
                "parentId": parentId,
                "modelName": modelName,
                "modelClass": modelClass,
                "modelOrganization": modelOrganization,
                "dataColumnId": dataColumnId,
                "dataColumnName": dataColumnName,
                "dataColumnUniqueId": dataColumnUniqueId,
                "datatemplateId": datatemplateId,
                "variable": variable,
                "variableUnit": variableUnit,
                "variableValue": variableValue,
                "logPrediction": logPrediction,
                "oneSigmaLower": oneSigmaLower,
                "oneSigmaUpper": oneSigmaUpper,
                "percentFormulaKnown": percentFormulaKnown,
                "userAverageDataPoint": userAverageDataPoint,
                "userStandardDeviation": userStandardDeviation,
                "flaggingMetadata": flaggingMetadata,
                "entity": entity,
                "id": id,
                "workflowId": workflowId,
                "intervalId": intervalId,
                "projectId": projectId,
                "Created": Created,
                "Updated": Updated,
            }
    
    predictionType: MetaOapg.properties.predictionType
    normalizedStd: MetaOapg.properties.normalizedStd
    modelId: MetaOapg.properties.modelId
    modelVersion: MetaOapg.properties.modelVersion
    inventoryId: MetaOapg.properties.inventoryId
    normalizedPrediction: MetaOapg.properties.normalizedPrediction
    taskId: MetaOapg.properties.taskId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelVersion"]) -> MetaOapg.properties.modelVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["predictionType"]) -> MetaOapg.properties.predictionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalizedPrediction"]) -> MetaOapg.properties.normalizedPrediction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalizedStd"]) -> MetaOapg.properties.normalizedStd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalizedStd/prediction"]) -> MetaOapg.properties.normalized_std_prediction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inventoryId"]) -> MetaOapg.properties.inventoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taskId"]) -> MetaOapg.properties.taskId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentId"]) -> MetaOapg.properties.parentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelName"]) -> MetaOapg.properties.modelName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelClass"]) -> MetaOapg.properties.modelClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelOrganization"]) -> MetaOapg.properties.modelOrganization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataColumnId"]) -> MetaOapg.properties.dataColumnId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataColumnName"]) -> MetaOapg.properties.dataColumnName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataColumnUniqueId"]) -> MetaOapg.properties.dataColumnUniqueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datatemplateId"]) -> MetaOapg.properties.datatemplateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variable"]) -> MetaOapg.properties.variable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variableUnit"]) -> MetaOapg.properties.variableUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variableValue"]) -> MetaOapg.properties.variableValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logPrediction"]) -> MetaOapg.properties.logPrediction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oneSigmaLower"]) -> MetaOapg.properties.oneSigmaLower: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oneSigmaUpper"]) -> MetaOapg.properties.oneSigmaUpper: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percentFormulaKnown"]) -> MetaOapg.properties.percentFormulaKnown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userAverageDataPoint"]) -> MetaOapg.properties.userAverageDataPoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userStandardDeviation"]) -> MetaOapg.properties.userStandardDeviation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flaggingMetadata"]) -> MetaOapg.properties.flaggingMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowId"]) -> MetaOapg.properties.workflowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intervalId"]) -> MetaOapg.properties.intervalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Created"]) -> MetaOapg.properties.Created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Updated"]) -> MetaOapg.properties.Updated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["modelId", "modelVersion", "predictionType", "normalizedPrediction", "normalizedStd", "normalizedStd/prediction", "inventoryId", "taskId", "albertId", "parentId", "modelName", "modelClass", "modelOrganization", "dataColumnId", "dataColumnName", "dataColumnUniqueId", "datatemplateId", "variable", "variableUnit", "variableValue", "logPrediction", "oneSigmaLower", "oneSigmaUpper", "percentFormulaKnown", "userAverageDataPoint", "userStandardDeviation", "flaggingMetadata", "entity", "id", "workflowId", "intervalId", "projectId", "Created", "Updated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelVersion"]) -> MetaOapg.properties.modelVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["predictionType"]) -> MetaOapg.properties.predictionType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalizedPrediction"]) -> MetaOapg.properties.normalizedPrediction: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalizedStd"]) -> MetaOapg.properties.normalizedStd: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalizedStd/prediction"]) -> MetaOapg.properties.normalized_std_prediction: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inventoryId"]) -> MetaOapg.properties.inventoryId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taskId"]) -> MetaOapg.properties.taskId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["albertId"]) -> typing.Union[MetaOapg.properties.albertId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentId"]) -> typing.Union[MetaOapg.properties.parentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelName"]) -> typing.Union[MetaOapg.properties.modelName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelClass"]) -> typing.Union[MetaOapg.properties.modelClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelOrganization"]) -> typing.Union[MetaOapg.properties.modelOrganization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataColumnId"]) -> typing.Union[MetaOapg.properties.dataColumnId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataColumnName"]) -> typing.Union[MetaOapg.properties.dataColumnName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataColumnUniqueId"]) -> typing.Union[MetaOapg.properties.dataColumnUniqueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datatemplateId"]) -> typing.Union[MetaOapg.properties.datatemplateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variable"]) -> typing.Union[MetaOapg.properties.variable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variableUnit"]) -> typing.Union[MetaOapg.properties.variableUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variableValue"]) -> typing.Union[MetaOapg.properties.variableValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logPrediction"]) -> typing.Union[MetaOapg.properties.logPrediction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oneSigmaLower"]) -> typing.Union[MetaOapg.properties.oneSigmaLower, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oneSigmaUpper"]) -> typing.Union[MetaOapg.properties.oneSigmaUpper, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percentFormulaKnown"]) -> typing.Union[MetaOapg.properties.percentFormulaKnown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userAverageDataPoint"]) -> typing.Union[MetaOapg.properties.userAverageDataPoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userStandardDeviation"]) -> typing.Union[MetaOapg.properties.userStandardDeviation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flaggingMetadata"]) -> typing.Union[MetaOapg.properties.flaggingMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowId"]) -> typing.Union[MetaOapg.properties.workflowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intervalId"]) -> typing.Union[MetaOapg.properties.intervalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Created"]) -> typing.Union[MetaOapg.properties.Created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Updated"]) -> typing.Union[MetaOapg.properties.Updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["modelId", "modelVersion", "predictionType", "normalizedPrediction", "normalizedStd", "normalizedStd/prediction", "inventoryId", "taskId", "albertId", "parentId", "modelName", "modelClass", "modelOrganization", "dataColumnId", "dataColumnName", "dataColumnUniqueId", "datatemplateId", "variable", "variableUnit", "variableValue", "logPrediction", "oneSigmaLower", "oneSigmaUpper", "percentFormulaKnown", "userAverageDataPoint", "userStandardDeviation", "flaggingMetadata", "entity", "id", "workflowId", "intervalId", "projectId", "Created", "Updated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        predictionType: typing.Union[MetaOapg.properties.predictionType, str, ],
        normalizedStd: typing.Union[MetaOapg.properties.normalizedStd, decimal.Decimal, int, float, ],
        modelId: typing.Union[MetaOapg.properties.modelId, str, ],
        modelVersion: typing.Union[MetaOapg.properties.modelVersion, str, ],
        inventoryId: typing.Union[MetaOapg.properties.inventoryId, str, ],
        normalizedPrediction: typing.Union[MetaOapg.properties.normalizedPrediction, decimal.Decimal, int, float, ],
        taskId: typing.Union[MetaOapg.properties.taskId, str, ],
        albertId: typing.Union[MetaOapg.properties.albertId, str, schemas.Unset] = schemas.unset,
        parentId: typing.Union[MetaOapg.properties.parentId, str, schemas.Unset] = schemas.unset,
        modelName: typing.Union[MetaOapg.properties.modelName, str, schemas.Unset] = schemas.unset,
        modelClass: typing.Union[MetaOapg.properties.modelClass, None, str, schemas.Unset] = schemas.unset,
        modelOrganization: typing.Union[MetaOapg.properties.modelOrganization, str, schemas.Unset] = schemas.unset,
        dataColumnId: typing.Union[MetaOapg.properties.dataColumnId, str, schemas.Unset] = schemas.unset,
        dataColumnName: typing.Union[MetaOapg.properties.dataColumnName, str, schemas.Unset] = schemas.unset,
        dataColumnUniqueId: typing.Union[MetaOapg.properties.dataColumnUniqueId, str, schemas.Unset] = schemas.unset,
        datatemplateId: typing.Union[MetaOapg.properties.datatemplateId, str, schemas.Unset] = schemas.unset,
        variable: typing.Union[MetaOapg.properties.variable, None, str, schemas.Unset] = schemas.unset,
        variableUnit: typing.Union[MetaOapg.properties.variableUnit, None, str, schemas.Unset] = schemas.unset,
        variableValue: typing.Union[MetaOapg.properties.variableValue, None, str, schemas.Unset] = schemas.unset,
        logPrediction: typing.Union[MetaOapg.properties.logPrediction, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        oneSigmaLower: typing.Union[MetaOapg.properties.oneSigmaLower, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        oneSigmaUpper: typing.Union[MetaOapg.properties.oneSigmaUpper, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        percentFormulaKnown: typing.Union[MetaOapg.properties.percentFormulaKnown, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userAverageDataPoint: typing.Union[MetaOapg.properties.userAverageDataPoint, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        userStandardDeviation: typing.Union[MetaOapg.properties.userStandardDeviation, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        flaggingMetadata: typing.Union[MetaOapg.properties.flaggingMetadata, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        entity: typing.Union[MetaOapg.properties.entity, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        workflowId: typing.Union[MetaOapg.properties.workflowId, None, str, schemas.Unset] = schemas.unset,
        intervalId: typing.Union[MetaOapg.properties.intervalId, None, str, schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, None, str, schemas.Unset] = schemas.unset,
        Created: typing.Union[MetaOapg.properties.Created, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Updated: typing.Union[MetaOapg.properties.Updated, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelPrediction':
        return super().__new__(
            cls,
            *_args,
            predictionType=predictionType,
            normalizedStd=normalizedStd,
            modelId=modelId,
            modelVersion=modelVersion,
            inventoryId=inventoryId,
            normalizedPrediction=normalizedPrediction,
            taskId=taskId,
            albertId=albertId,
            parentId=parentId,
            modelName=modelName,
            modelClass=modelClass,
            modelOrganization=modelOrganization,
            dataColumnId=dataColumnId,
            dataColumnName=dataColumnName,
            dataColumnUniqueId=dataColumnUniqueId,
            datatemplateId=datatemplateId,
            variable=variable,
            variableUnit=variableUnit,
            variableValue=variableValue,
            logPrediction=logPrediction,
            oneSigmaLower=oneSigmaLower,
            oneSigmaUpper=oneSigmaUpper,
            percentFormulaKnown=percentFormulaKnown,
            userAverageDataPoint=userAverageDataPoint,
            userStandardDeviation=userStandardDeviation,
            flaggingMetadata=flaggingMetadata,
            entity=entity,
            id=id,
            workflowId=workflowId,
            intervalId=intervalId,
            projectId=projectId,
            Created=Created,
            Updated=Updated,
            _configuration=_configuration,
            **kwargs,
        )
