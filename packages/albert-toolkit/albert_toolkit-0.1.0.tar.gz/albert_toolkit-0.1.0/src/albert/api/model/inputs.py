# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class Inputs(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "propertyTaskId",
        }
        
        class properties:
            propertyTaskId = schemas.IntSchema
            
            
            class propertyTaskOperatingConditionId(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'propertyTaskOperatingConditionId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            intervalOrder = schemas.IntSchema
            __annotations__ = {
                "propertyTaskId": propertyTaskId,
                "propertyTaskOperatingConditionId": propertyTaskOperatingConditionId,
                "intervalOrder": intervalOrder,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    propertyTaskId: MetaOapg.properties.propertyTaskId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["propertyTaskId"]) -> MetaOapg.properties.propertyTaskId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["propertyTaskOperatingConditionId"]) -> MetaOapg.properties.propertyTaskOperatingConditionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intervalOrder"]) -> MetaOapg.properties.intervalOrder: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["propertyTaskId"], typing_extensions.Literal["propertyTaskOperatingConditionId"], typing_extensions.Literal["intervalOrder"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["propertyTaskId"]) -> MetaOapg.properties.propertyTaskId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["propertyTaskOperatingConditionId"]) -> typing.Union[MetaOapg.properties.propertyTaskOperatingConditionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intervalOrder"]) -> typing.Union[MetaOapg.properties.intervalOrder, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["propertyTaskId"], typing_extensions.Literal["propertyTaskOperatingConditionId"], typing_extensions.Literal["intervalOrder"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        propertyTaskId: typing.Union[MetaOapg.properties.propertyTaskId, decimal.Decimal, int, ],
        propertyTaskOperatingConditionId: typing.Union[MetaOapg.properties.propertyTaskOperatingConditionId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        intervalOrder: typing.Union[MetaOapg.properties.intervalOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Inputs':
        return super().__new__(
            cls,
            *_args,
            propertyTaskId=propertyTaskId,
            propertyTaskOperatingConditionId=propertyTaskOperatingConditionId,
            intervalOrder=intervalOrder,
            _configuration=_configuration,
        )
