# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class Locations(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            total = schemas.IntSchema
            lastKey = schemas.StrSchema
            
            
            class Items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Location']:
                        return Location
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Location'], typing.List['Location']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Location':
                    return super().__getitem__(i)
            __annotations__ = {
                "total": total,
                "lastKey": lastKey,
                "Items": Items,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastKey"]) -> MetaOapg.properties.lastKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Items"]) -> MetaOapg.properties.Items: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total"], typing_extensions.Literal["lastKey"], typing_extensions.Literal["Items"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastKey"]) -> typing.Union[MetaOapg.properties.lastKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Items"]) -> typing.Union[MetaOapg.properties.Items, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total"], typing_extensions.Literal["lastKey"], typing_extensions.Literal["Items"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lastKey: typing.Union[MetaOapg.properties.lastKey, str, schemas.Unset] = schemas.unset,
        Items: typing.Union[MetaOapg.properties.Items, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Locations':
        return super().__new__(
            cls,
            *_args,
            total=total,
            lastKey=lastKey,
            Items=Items,
            _configuration=_configuration,
        )

from albert.api.model.location import Location
