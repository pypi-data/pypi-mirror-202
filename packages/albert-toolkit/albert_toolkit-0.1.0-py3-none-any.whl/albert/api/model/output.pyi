# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class Output(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.StrSchema
            ):
                pass
            
            
            class result(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class value(
                            schemas.ComposedSchema,
                        ):
                        
                        
                            class MetaOapg:
                                any_of_0 = schemas.StrSchema
                                any_of_1 = schemas.NumberSchema
                                
                                
                                class any_of_2(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            UnseenCASplusConcentration = schemas.StrSchema
                                            UnseenFormulaPercentage = schemas.StrSchema
                                            CASExtrapolation = schemas.StrSchema
                                            
                                            
                                            class UnseenOPCs(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'UnseenOPCs':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            UnseenOPCCount = schemas.IntSchema
                                            
                                            
                                            class IgnoredOPCs(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'IgnoredOPCs':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            IgnoredOPCCount = schemas.IntSchema
                                            OPCInputsCount = schemas.IntSchema
                                            allOPCInputs = schemas.IntSchema
                                            HighStdDeviation = schemas.StrSchema
                                            NegativePrediction = schemas.StrSchema
                                            nanOpcInputs = schemas.StrSchema
                                            nanOpcInputsCount = schemas.IntSchema
                                            HighFPdifference = schemas.StrSchema
                                            LogStdDeviation = schemas.BoolSchema
                                            __annotations__ = {
                                                "UnseenCASplusConcentration": UnseenCASplusConcentration,
                                                "UnseenFormulaPercentage": UnseenFormulaPercentage,
                                                "CASExtrapolation": CASExtrapolation,
                                                "UnseenOPCs": UnseenOPCs,
                                                "UnseenOPCCount": UnseenOPCCount,
                                                "IgnoredOPCs": IgnoredOPCs,
                                                "IgnoredOPCCount": IgnoredOPCCount,
                                                "OPCInputsCount": OPCInputsCount,
                                                "allOPCInputs": allOPCInputs,
                                                "HighStdDeviation": HighStdDeviation,
                                                "NegativePrediction": NegativePrediction,
                                                "nanOpcInputs": nanOpcInputs,
                                                "nanOpcInputsCount": nanOpcInputsCount,
                                                "HighFPdifference": HighFPdifference,
                                                "LogStdDeviation": LogStdDeviation,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["UnseenCASplusConcentration"]) -> MetaOapg.properties.UnseenCASplusConcentration: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["UnseenFormulaPercentage"]) -> MetaOapg.properties.UnseenFormulaPercentage: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["CASExtrapolation"]) -> MetaOapg.properties.CASExtrapolation: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["UnseenOPCs"]) -> MetaOapg.properties.UnseenOPCs: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["UnseenOPCCount"]) -> MetaOapg.properties.UnseenOPCCount: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["IgnoredOPCs"]) -> MetaOapg.properties.IgnoredOPCs: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["IgnoredOPCCount"]) -> MetaOapg.properties.IgnoredOPCCount: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["OPCInputsCount"]) -> MetaOapg.properties.OPCInputsCount: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["allOPCInputs"]) -> MetaOapg.properties.allOPCInputs: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["HighStdDeviation"]) -> MetaOapg.properties.HighStdDeviation: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["NegativePrediction"]) -> MetaOapg.properties.NegativePrediction: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["nanOpcInputs"]) -> MetaOapg.properties.nanOpcInputs: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["nanOpcInputsCount"]) -> MetaOapg.properties.nanOpcInputsCount: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["HighFPdifference"]) -> MetaOapg.properties.HighFPdifference: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["LogStdDeviation"]) -> MetaOapg.properties.LogStdDeviation: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["UnseenCASplusConcentration", "UnseenFormulaPercentage", "CASExtrapolation", "UnseenOPCs", "UnseenOPCCount", "IgnoredOPCs", "IgnoredOPCCount", "OPCInputsCount", "allOPCInputs", "HighStdDeviation", "NegativePrediction", "nanOpcInputs", "nanOpcInputsCount", "HighFPdifference", "LogStdDeviation", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["UnseenCASplusConcentration"]) -> typing.Union[MetaOapg.properties.UnseenCASplusConcentration, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["UnseenFormulaPercentage"]) -> typing.Union[MetaOapg.properties.UnseenFormulaPercentage, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["CASExtrapolation"]) -> typing.Union[MetaOapg.properties.CASExtrapolation, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["UnseenOPCs"]) -> typing.Union[MetaOapg.properties.UnseenOPCs, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["UnseenOPCCount"]) -> typing.Union[MetaOapg.properties.UnseenOPCCount, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["IgnoredOPCs"]) -> typing.Union[MetaOapg.properties.IgnoredOPCs, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["IgnoredOPCCount"]) -> typing.Union[MetaOapg.properties.IgnoredOPCCount, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["OPCInputsCount"]) -> typing.Union[MetaOapg.properties.OPCInputsCount, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["allOPCInputs"]) -> typing.Union[MetaOapg.properties.allOPCInputs, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["HighStdDeviation"]) -> typing.Union[MetaOapg.properties.HighStdDeviation, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["NegativePrediction"]) -> typing.Union[MetaOapg.properties.NegativePrediction, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["nanOpcInputs"]) -> typing.Union[MetaOapg.properties.nanOpcInputs, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["nanOpcInputsCount"]) -> typing.Union[MetaOapg.properties.nanOpcInputsCount, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["HighFPdifference"]) -> typing.Union[MetaOapg.properties.HighFPdifference, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["LogStdDeviation"]) -> typing.Union[MetaOapg.properties.LogStdDeviation, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["UnseenCASplusConcentration", "UnseenFormulaPercentage", "CASExtrapolation", "UnseenOPCs", "UnseenOPCCount", "IgnoredOPCs", "IgnoredOPCCount", "OPCInputsCount", "allOPCInputs", "HighStdDeviation", "NegativePrediction", "nanOpcInputs", "nanOpcInputsCount", "HighFPdifference", "LogStdDeviation", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        UnseenCASplusConcentration: typing.Union[MetaOapg.properties.UnseenCASplusConcentration, str, schemas.Unset] = schemas.unset,
                                        UnseenFormulaPercentage: typing.Union[MetaOapg.properties.UnseenFormulaPercentage, str, schemas.Unset] = schemas.unset,
                                        CASExtrapolation: typing.Union[MetaOapg.properties.CASExtrapolation, str, schemas.Unset] = schemas.unset,
                                        UnseenOPCs: typing.Union[MetaOapg.properties.UnseenOPCs, list, tuple, schemas.Unset] = schemas.unset,
                                        UnseenOPCCount: typing.Union[MetaOapg.properties.UnseenOPCCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        IgnoredOPCs: typing.Union[MetaOapg.properties.IgnoredOPCs, list, tuple, schemas.Unset] = schemas.unset,
                                        IgnoredOPCCount: typing.Union[MetaOapg.properties.IgnoredOPCCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        OPCInputsCount: typing.Union[MetaOapg.properties.OPCInputsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        allOPCInputs: typing.Union[MetaOapg.properties.allOPCInputs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        HighStdDeviation: typing.Union[MetaOapg.properties.HighStdDeviation, str, schemas.Unset] = schemas.unset,
                                        NegativePrediction: typing.Union[MetaOapg.properties.NegativePrediction, str, schemas.Unset] = schemas.unset,
                                        nanOpcInputs: typing.Union[MetaOapg.properties.nanOpcInputs, str, schemas.Unset] = schemas.unset,
                                        nanOpcInputsCount: typing.Union[MetaOapg.properties.nanOpcInputsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        HighFPdifference: typing.Union[MetaOapg.properties.HighFPdifference, str, schemas.Unset] = schemas.unset,
                                        LogStdDeviation: typing.Union[MetaOapg.properties.LogStdDeviation, bool, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'any_of_2':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            UnseenCASplusConcentration=UnseenCASplusConcentration,
                                            UnseenFormulaPercentage=UnseenFormulaPercentage,
                                            CASExtrapolation=CASExtrapolation,
                                            UnseenOPCs=UnseenOPCs,
                                            UnseenOPCCount=UnseenOPCCount,
                                            IgnoredOPCs=IgnoredOPCs,
                                            IgnoredOPCCount=IgnoredOPCCount,
                                            OPCInputsCount=OPCInputsCount,
                                            allOPCInputs=allOPCInputs,
                                            HighStdDeviation=HighStdDeviation,
                                            NegativePrediction=NegativePrediction,
                                            nanOpcInputs=nanOpcInputs,
                                            nanOpcInputsCount=nanOpcInputsCount,
                                            HighFPdifference=HighFPdifference,
                                            LogStdDeviation=LogStdDeviation,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                @classmethod
                                @functools.lru_cache()
                                def any_of(cls):
                                    # we need this here to make our import statements work
                                    # we must store _composed_schemas in here so the code is only run
                                    # when we invoke this method. If we kept this at the class
                                    # level we would get an error because the class level
                                    # code would be run when this module is imported, and these composed
                                    # classes don't exist yet because their module has not finished
                                    # loading
                                    return [
                                        cls.any_of_0,
                                        cls.any_of_1,
                                        cls.any_of_2,
                                    ]
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'value':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "value": value,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["value", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["value", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    value: typing.Union[MetaOapg.properties.value, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'result':
                    return super().__new__(
                        cls,
                        *_args,
                        value=value,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "type": type,
                "result": result,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type"], typing_extensions.Literal["result"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> typing.Union[MetaOapg.properties.result, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type"], typing_extensions.Literal["result"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        result: typing.Union[MetaOapg.properties.result, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Output':
        return super().__new__(
            cls,
            *_args,
            type=type,
            result=result,
            _configuration=_configuration,
        )
