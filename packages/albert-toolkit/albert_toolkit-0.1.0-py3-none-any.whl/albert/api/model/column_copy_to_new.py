# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class ColumnCopyToNew(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "type",
            "parentId",
        }
        
        class properties:
            parentId = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Copy to New": "COPY_TO_NEW",
                    }
                
                @schemas.classproperty
                def COPY_TO_NEW(cls):
                    return cls("Copy to New")
            position = schemas.IntSchema
            
            
            class noOfFormulas(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 10
                    inclusive_minimum = 1
            
            
            class Formulas(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                formulaId = schemas.StrSchema
                                colId = schemas.StrSchema
                                __annotations__ = {
                                    "formulaId": formulaId,
                                    "colId": colId,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["formulaId"]) -> MetaOapg.properties.formulaId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["colId"]) -> MetaOapg.properties.colId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["formulaId", "colId", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["formulaId"]) -> typing.Union[MetaOapg.properties.formulaId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["colId"]) -> typing.Union[MetaOapg.properties.colId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["formulaId", "colId", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            formulaId: typing.Union[MetaOapg.properties.formulaId, str, schemas.Unset] = schemas.unset,
                            colId: typing.Union[MetaOapg.properties.colId, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                formulaId=formulaId,
                                colId=colId,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Formulas':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "parentId": parentId,
                "type": type,
                "position": position,
                "noOfFormulas": noOfFormulas,
                "Formulas": Formulas,
            }

    
    type: MetaOapg.properties.type
    parentId: MetaOapg.properties.parentId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentId"]) -> MetaOapg.properties.parentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noOfFormulas"]) -> MetaOapg.properties.noOfFormulas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Formulas"]) -> MetaOapg.properties.Formulas: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["parentId", "type", "position", "noOfFormulas", "Formulas", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentId"]) -> MetaOapg.properties.parentId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union[MetaOapg.properties.position, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noOfFormulas"]) -> typing.Union[MetaOapg.properties.noOfFormulas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Formulas"]) -> typing.Union[MetaOapg.properties.Formulas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["parentId", "type", "position", "noOfFormulas", "Formulas", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        parentId: typing.Union[MetaOapg.properties.parentId, str, ],
        position: typing.Union[MetaOapg.properties.position, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        noOfFormulas: typing.Union[MetaOapg.properties.noOfFormulas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Formulas: typing.Union[MetaOapg.properties.Formulas, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ColumnCopyToNew':
        return super().__new__(
            cls,
            *_args,
            type=type,
            parentId=parentId,
            position=position,
            noOfFormulas=noOfFormulas,
            Formulas=Formulas,
            _configuration=_configuration,
            **kwargs,
        )
