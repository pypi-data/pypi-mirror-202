# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class Equipment(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class Items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                albert_id = schemas.StrSchema
                                Name = schemas.StrSchema
                                lotNumber = schemas.StrSchema
                                inventory_on_hand = schemas.NumberSchema
                                used_in_task = schemas.StrSchema
                                used_by = schemas.StrSchema
                                Date = schemas.StrSchema
                                lot_location = schemas.StrSchema
                                lot_storage_location = schemas.StrSchema
                                calibration_date = schemas.StrSchema
                                __annotations__ = {
                                    "Albert ID": albert_id,
                                    "Name": Name,
                                    "lotNumber": lotNumber,
                                    "Inventory On Hand": inventory_on_hand,
                                    "Used In Task": used_in_task,
                                    "Used By": used_by,
                                    "Date": Date,
                                    "Lot location": lot_location,
                                    "Lot storage location": lot_storage_location,
                                    "Calibration Date": calibration_date,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Albert ID"]) -> MetaOapg.properties.albert_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lotNumber"]) -> MetaOapg.properties.lotNumber: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Inventory On Hand"]) -> MetaOapg.properties.inventory_on_hand: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Used In Task"]) -> MetaOapg.properties.used_in_task: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Used By"]) -> MetaOapg.properties.used_by: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Date"]) -> MetaOapg.properties.Date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Lot location"]) -> MetaOapg.properties.lot_location: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Lot storage location"]) -> MetaOapg.properties.lot_storage_location: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Calibration Date"]) -> MetaOapg.properties.calibration_date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["Albert ID", "Name", "lotNumber", "Inventory On Hand", "Used In Task", "Used By", "Date", "Lot location", "Lot storage location", "Calibration Date", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Albert ID"]) -> typing.Union[MetaOapg.properties.albert_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lotNumber"]) -> typing.Union[MetaOapg.properties.lotNumber, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Inventory On Hand"]) -> typing.Union[MetaOapg.properties.inventory_on_hand, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Used In Task"]) -> typing.Union[MetaOapg.properties.used_in_task, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Used By"]) -> typing.Union[MetaOapg.properties.used_by, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Date"]) -> typing.Union[MetaOapg.properties.Date, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Lot location"]) -> typing.Union[MetaOapg.properties.lot_location, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Lot storage location"]) -> typing.Union[MetaOapg.properties.lot_storage_location, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Calibration Date"]) -> typing.Union[MetaOapg.properties.calibration_date, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Albert ID", "Name", "lotNumber", "Inventory On Hand", "Used In Task", "Used By", "Date", "Lot location", "Lot storage location", "Calibration Date", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            Name: typing.Union[MetaOapg.properties.Name, str, schemas.Unset] = schemas.unset,
                            lotNumber: typing.Union[MetaOapg.properties.lotNumber, str, schemas.Unset] = schemas.unset,
                            Date: typing.Union[MetaOapg.properties.Date, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                Name=Name,
                                lotNumber=lotNumber,
                                Date=Date,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "Items": Items,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Items"]) -> MetaOapg.properties.Items: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Items"]) -> typing.Union[MetaOapg.properties.Items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        Items: typing.Union[MetaOapg.properties.Items, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Equipment':
        return super().__new__(
            cls,
            *_args,
            Items=Items,
            _configuration=_configuration,
            **kwargs,
        )
