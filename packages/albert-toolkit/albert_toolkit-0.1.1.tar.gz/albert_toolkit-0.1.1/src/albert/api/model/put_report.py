# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class PutReport(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "reportTypeId",
        }
        
        class properties:
            reportTypeId = schemas.StrSchema
            name = schemas.StrSchema
            reportDataId = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class inputData(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'inputData':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            reportState = schemas.StrSchema
            __annotations__ = {
                "reportTypeId": reportTypeId,
                "name": name,
                "reportDataId": reportDataId,
                "description": description,
                "inputData": inputData,
                "reportState": reportState,
            }
        additional_properties = schemas.AnyTypeSchema
    
    name: MetaOapg.properties.name
    reportTypeId: MetaOapg.properties.reportTypeId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportTypeId"]) -> MetaOapg.properties.reportTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportDataId"]) -> MetaOapg.properties.reportDataId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputData"]) -> MetaOapg.properties.inputData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportState"]) -> MetaOapg.properties.reportState: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["reportTypeId"], typing_extensions.Literal["reportDataId"], typing_extensions.Literal["description"], typing_extensions.Literal["inputData"], typing_extensions.Literal["reportState"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportTypeId"]) -> MetaOapg.properties.reportTypeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportDataId"]) -> typing.Union[MetaOapg.properties.reportDataId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputData"]) -> typing.Union[MetaOapg.properties.inputData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportState"]) -> typing.Union[MetaOapg.properties.reportState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["reportTypeId"], typing_extensions.Literal["reportDataId"], typing_extensions.Literal["description"], typing_extensions.Literal["inputData"], typing_extensions.Literal["reportState"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        reportTypeId: typing.Union[MetaOapg.properties.reportTypeId, str, ],
        reportDataId: typing.Union[MetaOapg.properties.reportDataId, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        inputData: typing.Union[MetaOapg.properties.inputData, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        reportState: typing.Union[MetaOapg.properties.reportState, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PutReport':
        return super().__new__(
            cls,
            *_args,
            name=name,
            reportTypeId=reportTypeId,
            reportDataId=reportDataId,
            description=description,
            inputData=inputData,
            reportState=reportState,
            _configuration=_configuration,
            **kwargs,
        )
