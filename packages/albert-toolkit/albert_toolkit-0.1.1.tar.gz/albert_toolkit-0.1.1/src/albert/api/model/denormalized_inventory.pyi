# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class DenormalizedInventory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            albertId = schemas.StrSchema
            designId = schemas.StrSchema
            rowId = schemas.StrSchema
            
            
            class Created(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        by = schemas.StrSchema
                        byName = schemas.StrSchema
                        at = schemas.StrSchema
                        __annotations__ = {
                            "by": by,
                            "byName": byName,
                            "at": at,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["by"]) -> MetaOapg.properties.by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["byName"]) -> MetaOapg.properties.byName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["by"]) -> typing.Union[MetaOapg.properties.by, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["byName"]) -> typing.Union[MetaOapg.properties.byName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["at"]) -> typing.Union[MetaOapg.properties.at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    by: typing.Union[MetaOapg.properties.by, str, schemas.Unset] = schemas.unset,
                    byName: typing.Union[MetaOapg.properties.byName, str, schemas.Unset] = schemas.unset,
                    at: typing.Union[MetaOapg.properties.at, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Created':
                    return super().__new__(
                        cls,
                        *_args,
                        by=by,
                        byName=byName,
                        at=at,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "albertId": albertId,
                "designId": designId,
                "rowId": rowId,
                "Created": Created,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["designId"]) -> MetaOapg.properties.designId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rowId"]) -> MetaOapg.properties.rowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Created"]) -> MetaOapg.properties.Created: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["albertId"], typing_extensions.Literal["designId"], typing_extensions.Literal["rowId"], typing_extensions.Literal["Created"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["albertId"]) -> typing.Union[MetaOapg.properties.albertId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["designId"]) -> typing.Union[MetaOapg.properties.designId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rowId"]) -> typing.Union[MetaOapg.properties.rowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Created"]) -> typing.Union[MetaOapg.properties.Created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["albertId"], typing_extensions.Literal["designId"], typing_extensions.Literal["rowId"], typing_extensions.Literal["Created"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        albertId: typing.Union[MetaOapg.properties.albertId, str, schemas.Unset] = schemas.unset,
        designId: typing.Union[MetaOapg.properties.designId, str, schemas.Unset] = schemas.unset,
        rowId: typing.Union[MetaOapg.properties.rowId, str, schemas.Unset] = schemas.unset,
        Created: typing.Union[MetaOapg.properties.Created, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'DenormalizedInventory':
        return super().__new__(
            cls,
            *_args,
            albertId=albertId,
            designId=designId,
            rowId=rowId,
            Created=Created,
            _configuration=_configuration,
            **kwargs,
        )
