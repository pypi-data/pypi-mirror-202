# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class PatchInventory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "data",
        }
        
        class properties:
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "newValue",
                                "attribute",
                                "operation",
                            }
                            
                            class properties:
                                
                                
                                class operation(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def UPDATE(cls):
                                        return cls("update")
                                    
                                    @schemas.classproperty
                                    def ADD(cls):
                                        return cls("add")
                                    
                                    @schemas.classproperty
                                    def DELETE(cls):
                                        return cls("delete")
                                
                                
                                class attribute(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def NAME(cls):
                                        return cls("name")
                                    
                                    @schemas.classproperty
                                    def DESCRIPTION(cls):
                                        return cls("description")
                                    
                                    @schemas.classproperty
                                    def COMPANY_ID(cls):
                                        return cls("companyId")
                                    
                                    @schemas.classproperty
                                    def MINIMUM(cls):
                                        return cls("minimum")
                                    
                                    @schemas.classproperty
                                    def UNIT_CATEGORY(cls):
                                        return cls("unitCategory")
                                    
                                    @schemas.classproperty
                                    def LOCATION_ID(cls):
                                        return cls("locationId")
                                
                                
                                class oldValue(
                                    schemas.StrSchema
                                ):
                                    pass
                                
                                
                                class newValue(
                                    schemas.StrSchema
                                ):
                                    pass
                                
                                
                                class locationId(
                                    schemas.StrSchema
                                ):
                                    pass
                                __annotations__ = {
                                    "operation": operation,
                                    "attribute": attribute,
                                    "oldValue": oldValue,
                                    "newValue": newValue,
                                    "locationId": locationId,
                                }
                            additional_properties = schemas.StrSchema
                        
                        newValue: MetaOapg.properties.newValue
                        attribute: MetaOapg.properties.attribute
                        operation: MetaOapg.properties.operation
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["newValue"]) -> MetaOapg.properties.newValue: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["attribute"]) -> MetaOapg.properties.attribute: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["oldValue"]) -> MetaOapg.properties.oldValue: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["locationId"]) -> MetaOapg.properties.locationId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["newValue"], typing_extensions.Literal["attribute"], typing_extensions.Literal["operation"], typing_extensions.Literal["oldValue"], typing_extensions.Literal["locationId"], str, ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["newValue"]) -> MetaOapg.properties.newValue: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["attribute"]) -> MetaOapg.properties.attribute: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["oldValue"]) -> typing.Union[MetaOapg.properties.oldValue, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["locationId"]) -> typing.Union[MetaOapg.properties.locationId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["newValue"], typing_extensions.Literal["attribute"], typing_extensions.Literal["operation"], typing_extensions.Literal["oldValue"], typing_extensions.Literal["locationId"], str, ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            newValue: typing.Union[MetaOapg.properties.newValue, str, ],
                            attribute: typing.Union[MetaOapg.properties.attribute, str, ],
                            operation: typing.Union[MetaOapg.properties.operation, str, ],
                            oldValue: typing.Union[MetaOapg.properties.oldValue, str, schemas.Unset] = schemas.unset,
                            locationId: typing.Union[MetaOapg.properties.locationId, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                newValue=newValue,
                                attribute=attribute,
                                operation=operation,
                                oldValue=oldValue,
                                locationId=locationId,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "data": data,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    data: MetaOapg.properties.data
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PatchInventory':
        return super().__new__(
            cls,
            *_args,
            data=data,
            _configuration=_configuration,
        )
