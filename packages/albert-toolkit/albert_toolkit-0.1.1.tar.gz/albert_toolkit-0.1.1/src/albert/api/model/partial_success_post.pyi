# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class PartialSuccessPost(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class CreatedItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelPrediction']:
                        return ModelPrediction
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ModelPrediction'], typing.List['ModelPrediction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'CreatedItems':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelPrediction':
                    return super().__getitem__(i)
            
            
            class FailedItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class Errors(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    msg = schemas.StrSchema
                                                    __annotations__ = {
                                                        "msg": msg,
                                                    }
                                                additional_properties = schemas.NotAnyTypeSchema
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["msg"]) -> MetaOapg.properties.msg: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["msg"], ]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["msg"]) -> typing.Union[MetaOapg.properties.msg, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["msg"], ]):
                                                return super().get_item_oapg(name)
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                msg: typing.Union[MetaOapg.properties.msg, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    msg=msg,
                                                    _configuration=_configuration,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'Errors':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                modelId = schemas.StrSchema
                                modelVersion = schemas.StrSchema
                                modelClass = schemas.StrSchema
                                modelOrganization = schemas.StrSchema
                                dataColumnId = schemas.StrSchema
                                dataColumnName = schemas.StrSchema
                                datatemplateId = schemas.StrSchema
                                logPrediction = schemas.NumberSchema
                                oneSigmaLower = schemas.NumberSchema
                                oneSigmaUpper = schemas.NumberSchema
                                normalizedPrediction = schemas.NumberSchema
                                normalizedStd = schemas.NumberSchema
                                normalized_std_prediction = schemas.NumberSchema
                                
                                
                                class rawInput(
                                    schemas.DictBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneFrozenDictMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'rawInput':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class modelInput(
                                    schemas.DictBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneFrozenDictMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'modelInput':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class percentFormulaKnown(
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'percentFormulaKnown':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class userAverageDataPoint(
                                    schemas.NumberBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, decimal.Decimal, int, float, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'userAverageDataPoint':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class userStandardDeviation(
                                    schemas.NumberBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, decimal.Decimal, int, float, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'userStandardDeviation':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class flaggingMetadata(
                                    schemas.DictBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneFrozenDictMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'flaggingMetadata':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                entity = schemas.StrSchema
                                id = schemas.StrSchema
                                
                                
                                class workflowId(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'workflowId':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class intervalId(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'intervalId':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                inventoryId = schemas.StrSchema
                                __annotations__ = {
                                    "Errors": Errors,
                                    "modelId": modelId,
                                    "modelVersion": modelVersion,
                                    "modelClass": modelClass,
                                    "modelOrganization": modelOrganization,
                                    "dataColumnId": dataColumnId,
                                    "dataColumnName": dataColumnName,
                                    "datatemplateId": datatemplateId,
                                    "logPrediction": logPrediction,
                                    "oneSigmaLower": oneSigmaLower,
                                    "oneSigmaUpper": oneSigmaUpper,
                                    "normalizedPrediction": normalizedPrediction,
                                    "normalizedStd": normalizedStd,
                                    "normalizedStd/prediction": normalized_std_prediction,
                                    "rawInput": rawInput,
                                    "modelInput": modelInput,
                                    "percentFormulaKnown": percentFormulaKnown,
                                    "userAverageDataPoint": userAverageDataPoint,
                                    "userStandardDeviation": userStandardDeviation,
                                    "flaggingMetadata": flaggingMetadata,
                                    "entity": entity,
                                    "id": id,
                                    "workflowId": workflowId,
                                    "intervalId": intervalId,
                                    "inventoryId": inventoryId,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Errors"]) -> MetaOapg.properties.Errors: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["modelVersion"]) -> MetaOapg.properties.modelVersion: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["modelClass"]) -> MetaOapg.properties.modelClass: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["modelOrganization"]) -> MetaOapg.properties.modelOrganization: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dataColumnId"]) -> MetaOapg.properties.dataColumnId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dataColumnName"]) -> MetaOapg.properties.dataColumnName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["datatemplateId"]) -> MetaOapg.properties.datatemplateId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["logPrediction"]) -> MetaOapg.properties.logPrediction: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["oneSigmaLower"]) -> MetaOapg.properties.oneSigmaLower: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["oneSigmaUpper"]) -> MetaOapg.properties.oneSigmaUpper: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["normalizedPrediction"]) -> MetaOapg.properties.normalizedPrediction: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["normalizedStd"]) -> MetaOapg.properties.normalizedStd: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["normalizedStd/prediction"]) -> MetaOapg.properties.normalized_std_prediction: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rawInput"]) -> MetaOapg.properties.rawInput: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["modelInput"]) -> MetaOapg.properties.modelInput: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["percentFormulaKnown"]) -> MetaOapg.properties.percentFormulaKnown: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["userAverageDataPoint"]) -> MetaOapg.properties.userAverageDataPoint: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["userStandardDeviation"]) -> MetaOapg.properties.userStandardDeviation: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["flaggingMetadata"]) -> MetaOapg.properties.flaggingMetadata: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["workflowId"]) -> MetaOapg.properties.workflowId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["intervalId"]) -> MetaOapg.properties.intervalId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["inventoryId"]) -> MetaOapg.properties.inventoryId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["Errors", "modelId", "modelVersion", "modelClass", "modelOrganization", "dataColumnId", "dataColumnName", "datatemplateId", "logPrediction", "oneSigmaLower", "oneSigmaUpper", "normalizedPrediction", "normalizedStd", "normalizedStd/prediction", "rawInput", "modelInput", "percentFormulaKnown", "userAverageDataPoint", "userStandardDeviation", "flaggingMetadata", "entity", "id", "workflowId", "intervalId", "inventoryId", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Errors"]) -> typing.Union[MetaOapg.properties.Errors, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> typing.Union[MetaOapg.properties.modelId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["modelVersion"]) -> typing.Union[MetaOapg.properties.modelVersion, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["modelClass"]) -> typing.Union[MetaOapg.properties.modelClass, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["modelOrganization"]) -> typing.Union[MetaOapg.properties.modelOrganization, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dataColumnId"]) -> typing.Union[MetaOapg.properties.dataColumnId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dataColumnName"]) -> typing.Union[MetaOapg.properties.dataColumnName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["datatemplateId"]) -> typing.Union[MetaOapg.properties.datatemplateId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["logPrediction"]) -> typing.Union[MetaOapg.properties.logPrediction, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["oneSigmaLower"]) -> typing.Union[MetaOapg.properties.oneSigmaLower, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["oneSigmaUpper"]) -> typing.Union[MetaOapg.properties.oneSigmaUpper, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["normalizedPrediction"]) -> typing.Union[MetaOapg.properties.normalizedPrediction, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["normalizedStd"]) -> typing.Union[MetaOapg.properties.normalizedStd, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["normalizedStd/prediction"]) -> typing.Union[MetaOapg.properties.normalized_std_prediction, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rawInput"]) -> typing.Union[MetaOapg.properties.rawInput, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["modelInput"]) -> typing.Union[MetaOapg.properties.modelInput, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["percentFormulaKnown"]) -> typing.Union[MetaOapg.properties.percentFormulaKnown, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["userAverageDataPoint"]) -> typing.Union[MetaOapg.properties.userAverageDataPoint, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["userStandardDeviation"]) -> typing.Union[MetaOapg.properties.userStandardDeviation, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["flaggingMetadata"]) -> typing.Union[MetaOapg.properties.flaggingMetadata, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["workflowId"]) -> typing.Union[MetaOapg.properties.workflowId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["intervalId"]) -> typing.Union[MetaOapg.properties.intervalId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["inventoryId"]) -> typing.Union[MetaOapg.properties.inventoryId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Errors", "modelId", "modelVersion", "modelClass", "modelOrganization", "dataColumnId", "dataColumnName", "datatemplateId", "logPrediction", "oneSigmaLower", "oneSigmaUpper", "normalizedPrediction", "normalizedStd", "normalizedStd/prediction", "rawInput", "modelInput", "percentFormulaKnown", "userAverageDataPoint", "userStandardDeviation", "flaggingMetadata", "entity", "id", "workflowId", "intervalId", "inventoryId", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            Errors: typing.Union[MetaOapg.properties.Errors, list, tuple, schemas.Unset] = schemas.unset,
                            modelId: typing.Union[MetaOapg.properties.modelId, str, schemas.Unset] = schemas.unset,
                            modelVersion: typing.Union[MetaOapg.properties.modelVersion, str, schemas.Unset] = schemas.unset,
                            modelClass: typing.Union[MetaOapg.properties.modelClass, str, schemas.Unset] = schemas.unset,
                            modelOrganization: typing.Union[MetaOapg.properties.modelOrganization, str, schemas.Unset] = schemas.unset,
                            dataColumnId: typing.Union[MetaOapg.properties.dataColumnId, str, schemas.Unset] = schemas.unset,
                            dataColumnName: typing.Union[MetaOapg.properties.dataColumnName, str, schemas.Unset] = schemas.unset,
                            datatemplateId: typing.Union[MetaOapg.properties.datatemplateId, str, schemas.Unset] = schemas.unset,
                            logPrediction: typing.Union[MetaOapg.properties.logPrediction, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            oneSigmaLower: typing.Union[MetaOapg.properties.oneSigmaLower, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            oneSigmaUpper: typing.Union[MetaOapg.properties.oneSigmaUpper, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            normalizedPrediction: typing.Union[MetaOapg.properties.normalizedPrediction, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            normalizedStd: typing.Union[MetaOapg.properties.normalizedStd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            rawInput: typing.Union[MetaOapg.properties.rawInput, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                            modelInput: typing.Union[MetaOapg.properties.modelInput, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                            percentFormulaKnown: typing.Union[MetaOapg.properties.percentFormulaKnown, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            userAverageDataPoint: typing.Union[MetaOapg.properties.userAverageDataPoint, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            userStandardDeviation: typing.Union[MetaOapg.properties.userStandardDeviation, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            flaggingMetadata: typing.Union[MetaOapg.properties.flaggingMetadata, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                            entity: typing.Union[MetaOapg.properties.entity, str, schemas.Unset] = schemas.unset,
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            workflowId: typing.Union[MetaOapg.properties.workflowId, None, str, schemas.Unset] = schemas.unset,
                            intervalId: typing.Union[MetaOapg.properties.intervalId, None, str, schemas.Unset] = schemas.unset,
                            inventoryId: typing.Union[MetaOapg.properties.inventoryId, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                Errors=Errors,
                                modelId=modelId,
                                modelVersion=modelVersion,
                                modelClass=modelClass,
                                modelOrganization=modelOrganization,
                                dataColumnId=dataColumnId,
                                dataColumnName=dataColumnName,
                                datatemplateId=datatemplateId,
                                logPrediction=logPrediction,
                                oneSigmaLower=oneSigmaLower,
                                oneSigmaUpper=oneSigmaUpper,
                                normalizedPrediction=normalizedPrediction,
                                normalizedStd=normalizedStd,
                                rawInput=rawInput,
                                modelInput=modelInput,
                                percentFormulaKnown=percentFormulaKnown,
                                userAverageDataPoint=userAverageDataPoint,
                                userStandardDeviation=userStandardDeviation,
                                flaggingMetadata=flaggingMetadata,
                                entity=entity,
                                id=id,
                                workflowId=workflowId,
                                intervalId=intervalId,
                                inventoryId=inventoryId,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'FailedItems':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "CreatedItems": CreatedItems,
                "FailedItems": FailedItems,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreatedItems"]) -> MetaOapg.properties.CreatedItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FailedItems"]) -> MetaOapg.properties.FailedItems: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["CreatedItems", "FailedItems", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreatedItems"]) -> typing.Union[MetaOapg.properties.CreatedItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FailedItems"]) -> typing.Union[MetaOapg.properties.FailedItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["CreatedItems", "FailedItems", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        CreatedItems: typing.Union[MetaOapg.properties.CreatedItems, list, tuple, schemas.Unset] = schemas.unset,
        FailedItems: typing.Union[MetaOapg.properties.FailedItems, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PartialSuccessPost':
        return super().__new__(
            cls,
            *_args,
            CreatedItems=CreatedItems,
            FailedItems=FailedItems,
            _configuration=_configuration,
            **kwargs,
        )

from albert.api.model.model_prediction import ModelPrediction
