# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class ProductDesign(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "albertId",
            "Created",
            "status",
        }
        
        class properties:
            albertId = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("inactive")
            
            
            class Created(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        by = schemas.StrSchema
                        byName = schemas.StrSchema
                        at = schemas.StrSchema
                        __annotations__ = {
                            "by": by,
                            "byName": byName,
                            "at": at,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["by"]) -> MetaOapg.properties.by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["byName"]) -> MetaOapg.properties.byName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["by"]) -> typing.Union[MetaOapg.properties.by, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["byName"]) -> typing.Union[MetaOapg.properties.byName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["at"]) -> typing.Union[MetaOapg.properties.at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["by", "byName", "at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    by: typing.Union[MetaOapg.properties.by, str, schemas.Unset] = schemas.unset,
                    byName: typing.Union[MetaOapg.properties.byName, str, schemas.Unset] = schemas.unset,
                    at: typing.Union[MetaOapg.properties.at, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Created':
                    return super().__new__(
                        cls,
                        *_args,
                        by=by,
                        byName=byName,
                        at=at,
                        _configuration=_configuration,
                        **kwargs,
                    )
            parentId = schemas.StrSchema
            projectId = schemas.StrSchema
            
            
            class Rows(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class type(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def INV(cls):
                                        return cls("INV")
                                    
                                    @schemas.classproperty
                                    def APP(cls):
                                        return cls("APP")
                                    
                                    @schemas.classproperty
                                    def BLK(cls):
                                        return cls("BLK")
                                id = schemas.StrSchema
                                rowId = schemas.StrSchema
                                name = schemas.StrSchema
                                __annotations__ = {
                                    "type": type,
                                    "id": id,
                                    "rowId": rowId,
                                    "name": name,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rowId"]) -> MetaOapg.properties.rowId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "id", "rowId", "name", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rowId"]) -> typing.Union[MetaOapg.properties.rowId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "id", "rowId", "name", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            rowId: typing.Union[MetaOapg.properties.rowId, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                type=type,
                                id=id,
                                rowId=rowId,
                                name=name,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Rows':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class Columns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class type(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def INV(cls):
                                        return cls("INV")
                                    
                                    @schemas.classproperty
                                    def BLK(cls):
                                        return cls("BLK")
                                    
                                    @schemas.classproperty
                                    def APP(cls):
                                        return cls("APP")
                                id = schemas.StrSchema
                                colId = schemas.StrSchema
                                name = schemas.StrSchema
                                __annotations__ = {
                                    "type": type,
                                    "id": id,
                                    "colId": colId,
                                    "name": name,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["colId"]) -> MetaOapg.properties.colId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "id", "colId", "name", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["colId"]) -> typing.Union[MetaOapg.properties.colId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "id", "colId", "name", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            colId: typing.Union[MetaOapg.properties.colId, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                type=type,
                                id=id,
                                colId=colId,
                                name=name,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Columns':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "albertId": albertId,
                "status": status,
                "Created": Created,
                "parentId": parentId,
                "projectId": projectId,
                "Rows": Rows,
                "Columns": Columns,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    albertId: MetaOapg.properties.albertId
    Created: MetaOapg.properties.Created
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Created"]) -> MetaOapg.properties.Created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentId"]) -> MetaOapg.properties.parentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Rows"]) -> MetaOapg.properties.Rows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Columns"]) -> MetaOapg.properties.Columns: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["albertId"], typing_extensions.Literal["Created"], typing_extensions.Literal["status"], typing_extensions.Literal["parentId"], typing_extensions.Literal["projectId"], typing_extensions.Literal["Rows"], typing_extensions.Literal["Columns"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Created"]) -> MetaOapg.properties.Created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentId"]) -> typing.Union[MetaOapg.properties.parentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Rows"]) -> typing.Union[MetaOapg.properties.Rows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Columns"]) -> typing.Union[MetaOapg.properties.Columns, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["albertId"], typing_extensions.Literal["Created"], typing_extensions.Literal["status"], typing_extensions.Literal["parentId"], typing_extensions.Literal["projectId"], typing_extensions.Literal["Rows"], typing_extensions.Literal["Columns"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        albertId: typing.Union[MetaOapg.properties.albertId, str, ],
        Created: typing.Union[MetaOapg.properties.Created, dict, frozendict.frozendict, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        parentId: typing.Union[MetaOapg.properties.parentId, str, schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, str, schemas.Unset] = schemas.unset,
        Rows: typing.Union[MetaOapg.properties.Rows, list, tuple, schemas.Unset] = schemas.unset,
        Columns: typing.Union[MetaOapg.properties.Columns, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ProductDesign':
        return super().__new__(
            cls,
            *_args,
            albertId=albertId,
            Created=Created,
            status=status,
            parentId=parentId,
            projectId=projectId,
            Rows=Rows,
            Columns=Columns,
            _configuration=_configuration,
        )
