# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class PredictionModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dataColumnName",
            "graduated",
            "organization",
            "dataColumnId",
            "name",
            "albertId",
            "version",
            "modelEndpoint",
        }
        
        class properties:
            albertId = schemas.StrSchema
            name = schemas.StrSchema
            version = schemas.StrSchema
            
            
            class organization(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ALBERT(cls):
                    return cls("Albert")
                
                @schemas.classproperty
                def MATMERIZE(cls):
                    return cls("Matmerize")
            modelEndpoint = schemas.StrSchema
            dataColumnId = schemas.StrSchema
            dataColumnName = schemas.StrSchema
            graduated = schemas.BoolSchema
            uuid = schemas.StrSchema
            
            
            class modelClass(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def GP(cls):
                    return cls("GP")
                
                @schemas.classproperty
                def LINEAR_REGRESSION(cls):
                    return cls("Linear Regression")
                
                @schemas.classproperty
                def RANDOM_FOREST(cls):
                    return cls("Random Forest")
                
                @schemas.classproperty
                def NEURAL_NETWORK(cls):
                    return cls("Neural Network")
                
                @schemas.classproperty
                def NN(cls):
                    return cls("NN")
            
            
            class DataTemplates(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'DataTemplates':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class versionFormat(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MAJOR(cls):
                    return cls("major")
                
                @schemas.classproperty
                def MINOR(cls):
                    return cls("minor")
            
            
            class rootMeanSquare(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rootMeanSquare':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class _45degree_angle_plot_train(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> '_45degree_angle_plot_train':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class _45degree_angle_plot_test(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> '_45degree_angle_plot_test':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class totalEffectSensitivity(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'totalEffectSensitivity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class mainEffectSensitivity(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'mainEffectSensitivity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class trainedInputs(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'trainedInputs':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class trainedInputsJSON(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trainedInputsJSON':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class thresholds(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thresholds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class hyperParameters(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'hyperParameters':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class totalDatapoints(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'totalDatapoints':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class binlabels(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'binlabels':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class unitDictionary(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'unitDictionary':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class modelMetadata(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modelMetadata':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class logTransform(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logTransform':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "albertId": albertId,
                "name": name,
                "version": version,
                "organization": organization,
                "modelEndpoint": modelEndpoint,
                "dataColumnId": dataColumnId,
                "dataColumnName": dataColumnName,
                "graduated": graduated,
                "uuid": uuid,
                "modelClass": modelClass,
                "DataTemplates": DataTemplates,
                "versionFormat": versionFormat,
                "rootMeanSquare": rootMeanSquare,
                "45degreeAnglePlotTrain": _45degree_angle_plot_train,
                "45degreeAnglePlotTest": _45degree_angle_plot_test,
                "totalEffectSensitivity": totalEffectSensitivity,
                "mainEffectSensitivity": mainEffectSensitivity,
                "trainedInputs": trainedInputs,
                "trainedInputsJSON": trainedInputsJSON,
                "thresholds": thresholds,
                "hyperParameters": hyperParameters,
                "totalDatapoints": totalDatapoints,
                "binlabels": binlabels,
                "unitDictionary": unitDictionary,
                "modelMetadata": modelMetadata,
                "logTransform": logTransform,
            }
    
    dataColumnName: MetaOapg.properties.dataColumnName
    graduated: MetaOapg.properties.graduated
    organization: MetaOapg.properties.organization
    dataColumnId: MetaOapg.properties.dataColumnId
    name: MetaOapg.properties.name
    albertId: MetaOapg.properties.albertId
    version: MetaOapg.properties.version
    modelEndpoint: MetaOapg.properties.modelEndpoint
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelEndpoint"]) -> MetaOapg.properties.modelEndpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataColumnId"]) -> MetaOapg.properties.dataColumnId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataColumnName"]) -> MetaOapg.properties.dataColumnName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["graduated"]) -> MetaOapg.properties.graduated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelClass"]) -> MetaOapg.properties.modelClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DataTemplates"]) -> MetaOapg.properties.DataTemplates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionFormat"]) -> MetaOapg.properties.versionFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootMeanSquare"]) -> MetaOapg.properties.rootMeanSquare: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["45degreeAnglePlotTrain"]) -> MetaOapg.properties._45degree_angle_plot_train: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["45degreeAnglePlotTest"]) -> MetaOapg.properties._45degree_angle_plot_test: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalEffectSensitivity"]) -> MetaOapg.properties.totalEffectSensitivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mainEffectSensitivity"]) -> MetaOapg.properties.mainEffectSensitivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trainedInputs"]) -> MetaOapg.properties.trainedInputs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trainedInputsJSON"]) -> MetaOapg.properties.trainedInputsJSON: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thresholds"]) -> MetaOapg.properties.thresholds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hyperParameters"]) -> MetaOapg.properties.hyperParameters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalDatapoints"]) -> MetaOapg.properties.totalDatapoints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["binlabels"]) -> MetaOapg.properties.binlabels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitDictionary"]) -> MetaOapg.properties.unitDictionary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelMetadata"]) -> MetaOapg.properties.modelMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logTransform"]) -> MetaOapg.properties.logTransform: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["albertId", "name", "version", "organization", "modelEndpoint", "dataColumnId", "dataColumnName", "graduated", "uuid", "modelClass", "DataTemplates", "versionFormat", "rootMeanSquare", "45degreeAnglePlotTrain", "45degreeAnglePlotTest", "totalEffectSensitivity", "mainEffectSensitivity", "trainedInputs", "trainedInputsJSON", "thresholds", "hyperParameters", "totalDatapoints", "binlabels", "unitDictionary", "modelMetadata", "logTransform", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["albertId"]) -> MetaOapg.properties.albertId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelEndpoint"]) -> MetaOapg.properties.modelEndpoint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataColumnId"]) -> MetaOapg.properties.dataColumnId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataColumnName"]) -> MetaOapg.properties.dataColumnName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["graduated"]) -> MetaOapg.properties.graduated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelClass"]) -> typing.Union[MetaOapg.properties.modelClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DataTemplates"]) -> typing.Union[MetaOapg.properties.DataTemplates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionFormat"]) -> typing.Union[MetaOapg.properties.versionFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootMeanSquare"]) -> typing.Union[MetaOapg.properties.rootMeanSquare, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["45degreeAnglePlotTrain"]) -> typing.Union[MetaOapg.properties._45degree_angle_plot_train, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["45degreeAnglePlotTest"]) -> typing.Union[MetaOapg.properties._45degree_angle_plot_test, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalEffectSensitivity"]) -> typing.Union[MetaOapg.properties.totalEffectSensitivity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mainEffectSensitivity"]) -> typing.Union[MetaOapg.properties.mainEffectSensitivity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trainedInputs"]) -> typing.Union[MetaOapg.properties.trainedInputs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trainedInputsJSON"]) -> typing.Union[MetaOapg.properties.trainedInputsJSON, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thresholds"]) -> typing.Union[MetaOapg.properties.thresholds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hyperParameters"]) -> typing.Union[MetaOapg.properties.hyperParameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalDatapoints"]) -> typing.Union[MetaOapg.properties.totalDatapoints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["binlabels"]) -> typing.Union[MetaOapg.properties.binlabels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitDictionary"]) -> typing.Union[MetaOapg.properties.unitDictionary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelMetadata"]) -> typing.Union[MetaOapg.properties.modelMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logTransform"]) -> typing.Union[MetaOapg.properties.logTransform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["albertId", "name", "version", "organization", "modelEndpoint", "dataColumnId", "dataColumnName", "graduated", "uuid", "modelClass", "DataTemplates", "versionFormat", "rootMeanSquare", "45degreeAnglePlotTrain", "45degreeAnglePlotTest", "totalEffectSensitivity", "mainEffectSensitivity", "trainedInputs", "trainedInputsJSON", "thresholds", "hyperParameters", "totalDatapoints", "binlabels", "unitDictionary", "modelMetadata", "logTransform", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dataColumnName: typing.Union[MetaOapg.properties.dataColumnName, str, ],
        graduated: typing.Union[MetaOapg.properties.graduated, bool, ],
        organization: typing.Union[MetaOapg.properties.organization, str, ],
        dataColumnId: typing.Union[MetaOapg.properties.dataColumnId, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        albertId: typing.Union[MetaOapg.properties.albertId, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        modelEndpoint: typing.Union[MetaOapg.properties.modelEndpoint, str, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        modelClass: typing.Union[MetaOapg.properties.modelClass, str, schemas.Unset] = schemas.unset,
        DataTemplates: typing.Union[MetaOapg.properties.DataTemplates, list, tuple, None, schemas.Unset] = schemas.unset,
        versionFormat: typing.Union[MetaOapg.properties.versionFormat, str, schemas.Unset] = schemas.unset,
        rootMeanSquare: typing.Union[MetaOapg.properties.rootMeanSquare, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        totalEffectSensitivity: typing.Union[MetaOapg.properties.totalEffectSensitivity, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        mainEffectSensitivity: typing.Union[MetaOapg.properties.mainEffectSensitivity, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        trainedInputs: typing.Union[MetaOapg.properties.trainedInputs, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        trainedInputsJSON: typing.Union[MetaOapg.properties.trainedInputsJSON, list, tuple, None, schemas.Unset] = schemas.unset,
        thresholds: typing.Union[MetaOapg.properties.thresholds, None, str, schemas.Unset] = schemas.unset,
        hyperParameters: typing.Union[MetaOapg.properties.hyperParameters, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        totalDatapoints: typing.Union[MetaOapg.properties.totalDatapoints, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        binlabels: typing.Union[MetaOapg.properties.binlabels, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        unitDictionary: typing.Union[MetaOapg.properties.unitDictionary, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        modelMetadata: typing.Union[MetaOapg.properties.modelMetadata, None, str, schemas.Unset] = schemas.unset,
        logTransform: typing.Union[MetaOapg.properties.logTransform, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PredictionModel':
        return super().__new__(
            cls,
            *_args,
            dataColumnName=dataColumnName,
            graduated=graduated,
            organization=organization,
            dataColumnId=dataColumnId,
            name=name,
            albertId=albertId,
            version=version,
            modelEndpoint=modelEndpoint,
            uuid=uuid,
            modelClass=modelClass,
            DataTemplates=DataTemplates,
            versionFormat=versionFormat,
            rootMeanSquare=rootMeanSquare,
            totalEffectSensitivity=totalEffectSensitivity,
            mainEffectSensitivity=mainEffectSensitivity,
            trainedInputs=trainedInputs,
            trainedInputsJSON=trainedInputsJSON,
            thresholds=thresholds,
            hyperParameters=hyperParameters,
            totalDatapoints=totalDatapoints,
            binlabels=binlabels,
            unitDictionary=unitDictionary,
            modelMetadata=modelMetadata,
            logTransform=logTransform,
            _configuration=_configuration,
            **kwargs,
        )
