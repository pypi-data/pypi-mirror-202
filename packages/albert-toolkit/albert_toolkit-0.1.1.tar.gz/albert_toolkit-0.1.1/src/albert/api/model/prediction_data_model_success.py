# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class PredictionDataModelSuccess(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class FailedPredictionDataModel(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "output",
                                "modelId",
                                "message",
                                "type",
                            }
                            
                            class properties:
                                message = schemas.StrSchema
                                
                                
                                class modelId(
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        max_length = 255
                                        min_length = 2
                                
                                
                                class type(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        max_length = 255
                                        min_length = 2
                                        enum_value_to_name = {
                                            "Matmerize": "MATMERIZE",
                                            "Albert": "ALBERT",
                                        }
                                    
                                    @schemas.classproperty
                                    def MATMERIZE(cls):
                                        return cls("Matmerize")
                                    
                                    @schemas.classproperty
                                    def ALBERT(cls):
                                        return cls("Albert")
                                
                                
                                class output(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        min_items = 3
                                        
                                        @staticmethod
                                        def items() -> typing.Type['Output']:
                                            return Output
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple['Output'], typing.List['Output']],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'output':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> 'Output':
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "message": message,
                                    "modelId": modelId,
                                    "type": type,
                                    "output": output,
                                }
                            additional_properties = schemas.NotAnyTypeSchema
                        
                        output: MetaOapg.properties.output
                        modelId: MetaOapg.properties.modelId
                        message: MetaOapg.properties.message
                        type: MetaOapg.properties.type
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["output"]) -> MetaOapg.properties.output: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["output"], typing_extensions.Literal["modelId"], typing_extensions.Literal["message"], typing_extensions.Literal["type"], ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["output"]) -> MetaOapg.properties.output: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["output"], typing_extensions.Literal["modelId"], typing_extensions.Literal["message"], typing_extensions.Literal["type"], ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            output: typing.Union[MetaOapg.properties.output, list, tuple, ],
                            modelId: typing.Union[MetaOapg.properties.modelId, str, ],
                            message: typing.Union[MetaOapg.properties.message, str, ],
                            type: typing.Union[MetaOapg.properties.type, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                output=output,
                                modelId=modelId,
                                message=message,
                                type=type,
                                _configuration=_configuration,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'FailedPredictionDataModel':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "FailedPredictionDataModel": FailedPredictionDataModel,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FailedPredictionDataModel"]) -> MetaOapg.properties.FailedPredictionDataModel: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FailedPredictionDataModel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FailedPredictionDataModel"]) -> typing.Union[MetaOapg.properties.FailedPredictionDataModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FailedPredictionDataModel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        FailedPredictionDataModel: typing.Union[MetaOapg.properties.FailedPredictionDataModel, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PredictionDataModelSuccess':
        return super().__new__(
            cls,
            *_args,
            FailedPredictionDataModel=FailedPredictionDataModel,
            _configuration=_configuration,
            **kwargs,
        )

from albert.api.model.output import Output
