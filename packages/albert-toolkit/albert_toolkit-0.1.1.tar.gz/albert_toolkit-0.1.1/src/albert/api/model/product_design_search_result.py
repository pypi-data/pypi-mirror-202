# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class ProductDesignSearchResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            total = schemas.StrSchema
            offset = schemas.StrSchema
            latency = schemas.StrSchema
            maxScore = schemas.NumberSchema
            
            
            class Items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FormulaItem']:
                        return FormulaItem
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['FormulaItem'], typing.List['FormulaItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FormulaItem':
                    return super().__getitem__(i)
            
            
            class Facets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FacetWithValueArray']:
                        return FacetWithValueArray
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['FacetWithValueArray'], typing.List['FacetWithValueArray']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Facets':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FacetWithValueArray':
                    return super().__getitem__(i)
            __annotations__ = {
                "total": total,
                "offset": offset,
                "latency": latency,
                "maxScore": maxScore,
                "Items": Items,
                "Facets": Facets,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offset"]) -> MetaOapg.properties.offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latency"]) -> MetaOapg.properties.latency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxScore"]) -> MetaOapg.properties.maxScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Items"]) -> MetaOapg.properties.Items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Facets"]) -> MetaOapg.properties.Facets: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total", "offset", "latency", "maxScore", "Items", "Facets", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offset"]) -> typing.Union[MetaOapg.properties.offset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latency"]) -> typing.Union[MetaOapg.properties.latency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxScore"]) -> typing.Union[MetaOapg.properties.maxScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Items"]) -> typing.Union[MetaOapg.properties.Items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Facets"]) -> typing.Union[MetaOapg.properties.Facets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total", "offset", "latency", "maxScore", "Items", "Facets", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        total: typing.Union[MetaOapg.properties.total, str, schemas.Unset] = schemas.unset,
        offset: typing.Union[MetaOapg.properties.offset, str, schemas.Unset] = schemas.unset,
        latency: typing.Union[MetaOapg.properties.latency, str, schemas.Unset] = schemas.unset,
        maxScore: typing.Union[MetaOapg.properties.maxScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Items: typing.Union[MetaOapg.properties.Items, list, tuple, schemas.Unset] = schemas.unset,
        Facets: typing.Union[MetaOapg.properties.Facets, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductDesignSearchResult':
        return super().__new__(
            cls,
            *_args,
            total=total,
            offset=offset,
            latency=latency,
            maxScore=maxScore,
            Items=Items,
            Facets=Facets,
            _configuration=_configuration,
            **kwargs,
        )

from albert.api.model.facet_with_value_array import FacetWithValueArray
from albert.api.model.formula_item import FormulaItem
