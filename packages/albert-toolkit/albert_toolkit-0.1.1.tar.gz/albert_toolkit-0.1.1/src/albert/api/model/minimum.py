# coding: utf-8

"""
    api-prediction

    API provides services for prediction module.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developer@albertinvent.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from albert.api import schemas  # noqa: F401


class Minimum(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "locationId",
            "minimum",
        }
        
        class properties:
            
            
            class locationId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 10
                    min_length = 1
            
            
            class minimum(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
            __annotations__ = {
                "locationId": locationId,
                "minimum": minimum,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    locationId: MetaOapg.properties.locationId
    minimum: MetaOapg.properties.minimum
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationId"]) -> MetaOapg.properties.locationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum"]) -> MetaOapg.properties.minimum: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["locationId"], typing_extensions.Literal["minimum"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationId"]) -> MetaOapg.properties.locationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum"]) -> MetaOapg.properties.minimum: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["locationId"], typing_extensions.Literal["minimum"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        locationId: typing.Union[MetaOapg.properties.locationId, str, ],
        minimum: typing.Union[MetaOapg.properties.minimum, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Minimum':
        return super().__new__(
            cls,
            *_args,
            locationId=locationId,
            minimum=minimum,
            _configuration=_configuration,
        )
