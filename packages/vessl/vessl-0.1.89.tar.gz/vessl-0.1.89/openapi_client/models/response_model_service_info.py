# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseModelServiceInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'ResponseUser',
        'created_dt': 'datetime',
        'description': 'str',
        'gateway_config': 'ResponseModelServiceGatewayInfo',
        'id': 'int',
        'kernel_cluster': 'ResponseKernelCluster',
        'kernel_cluster_id': 'int',
        'kernel_cluster_name': 'str',
        'name': 'str',
        'status': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'created_by': 'created_by',
        'created_dt': 'created_dt',
        'description': 'description',
        'gateway_config': 'gateway_config',
        'id': 'id',
        'kernel_cluster': 'kernel_cluster',
        'kernel_cluster_id': 'kernel_cluster_id',
        'kernel_cluster_name': 'kernel_cluster_name',
        'name': 'name',
        'status': 'status',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, created_by=None, created_dt=None, description=None, gateway_config=None, id=None, kernel_cluster=None, kernel_cluster_id=None, kernel_cluster_name=None, name=None, status=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """ResponseModelServiceInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._created_dt = None
        self._description = None
        self._gateway_config = None
        self._id = None
        self._kernel_cluster = None
        self._kernel_cluster_id = None
        self._kernel_cluster_name = None
        self._name = None
        self._status = None
        self._updated_dt = None
        self.discriminator = None

        self.created_by = created_by
        self.created_dt = created_dt
        self.description = description
        if gateway_config is not None:
            self.gateway_config = gateway_config
        self.id = id
        self.kernel_cluster = kernel_cluster
        self.kernel_cluster_id = kernel_cluster_id
        self.kernel_cluster_name = kernel_cluster_name
        self.name = name
        self.status = status
        self.updated_dt = updated_dt

    @property
    def created_by(self):
        """Gets the created_by of this ResponseModelServiceInfo.  # noqa: E501


        :return: The created_by of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResponseModelServiceInfo.


        :param created_by: The created_by of this ResponseModelServiceInfo.  # noqa: E501
        :type created_by: ResponseUser
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseModelServiceInfo.  # noqa: E501


        :return: The created_dt of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseModelServiceInfo.


        :param created_dt: The created_dt of this ResponseModelServiceInfo.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def description(self):
        """Gets the description of this ResponseModelServiceInfo.  # noqa: E501


        :return: The description of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResponseModelServiceInfo.


        :param description: The description of this ResponseModelServiceInfo.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def gateway_config(self):
        """Gets the gateway_config of this ResponseModelServiceInfo.  # noqa: E501


        :return: The gateway_config of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseModelServiceGatewayInfo
        """
        return self._gateway_config

    @gateway_config.setter
    def gateway_config(self, gateway_config):
        """Sets the gateway_config of this ResponseModelServiceInfo.


        :param gateway_config: The gateway_config of this ResponseModelServiceInfo.  # noqa: E501
        :type gateway_config: ResponseModelServiceGatewayInfo
        """

        self._gateway_config = gateway_config

    @property
    def id(self):
        """Gets the id of this ResponseModelServiceInfo.  # noqa: E501


        :return: The id of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseModelServiceInfo.


        :param id: The id of this ResponseModelServiceInfo.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def kernel_cluster(self):
        """Gets the kernel_cluster of this ResponseModelServiceInfo.  # noqa: E501


        :return: The kernel_cluster of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseKernelCluster
        """
        return self._kernel_cluster

    @kernel_cluster.setter
    def kernel_cluster(self, kernel_cluster):
        """Sets the kernel_cluster of this ResponseModelServiceInfo.


        :param kernel_cluster: The kernel_cluster of this ResponseModelServiceInfo.  # noqa: E501
        :type kernel_cluster: ResponseKernelCluster
        """
        if self.local_vars_configuration.client_side_validation and kernel_cluster is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_cluster`, must not be `None`")  # noqa: E501

        self._kernel_cluster = kernel_cluster

    @property
    def kernel_cluster_id(self):
        """Gets the kernel_cluster_id of this ResponseModelServiceInfo.  # noqa: E501


        :return: The kernel_cluster_id of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._kernel_cluster_id

    @kernel_cluster_id.setter
    def kernel_cluster_id(self, kernel_cluster_id):
        """Sets the kernel_cluster_id of this ResponseModelServiceInfo.


        :param kernel_cluster_id: The kernel_cluster_id of this ResponseModelServiceInfo.  # noqa: E501
        :type kernel_cluster_id: int
        """
        if self.local_vars_configuration.client_side_validation and kernel_cluster_id is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_cluster_id`, must not be `None`")  # noqa: E501

        self._kernel_cluster_id = kernel_cluster_id

    @property
    def kernel_cluster_name(self):
        """Gets the kernel_cluster_name of this ResponseModelServiceInfo.  # noqa: E501


        :return: The kernel_cluster_name of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._kernel_cluster_name

    @kernel_cluster_name.setter
    def kernel_cluster_name(self, kernel_cluster_name):
        """Sets the kernel_cluster_name of this ResponseModelServiceInfo.


        :param kernel_cluster_name: The kernel_cluster_name of this ResponseModelServiceInfo.  # noqa: E501
        :type kernel_cluster_name: str
        """
        if self.local_vars_configuration.client_side_validation and kernel_cluster_name is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_cluster_name`, must not be `None`")  # noqa: E501

        self._kernel_cluster_name = kernel_cluster_name

    @property
    def name(self):
        """Gets the name of this ResponseModelServiceInfo.  # noqa: E501


        :return: The name of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseModelServiceInfo.


        :param name: The name of this ResponseModelServiceInfo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this ResponseModelServiceInfo.  # noqa: E501


        :return: The status of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseModelServiceInfo.


        :param status: The status of this ResponseModelServiceInfo.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseModelServiceInfo.  # noqa: E501


        :return: The updated_dt of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseModelServiceInfo.


        :param updated_dt: The updated_dt of this ResponseModelServiceInfo.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseModelServiceInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseModelServiceInfo):
            return True

        return self.to_dict() != other.to_dict()
