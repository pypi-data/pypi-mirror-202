"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import constraint_pb2
import custom_penalty_term_pb2
import expression_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Problem(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Sense:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _SenseEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Problem._Sense.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        MIN: Problem._Sense.ValueType  # 0
        MAX: Problem._Sense.ValueType  # 1

    class Sense(_Sense, metaclass=_SenseEnumTypeWrapper): ...
    MIN: Problem.Sense.ValueType  # 0
    MAX: Problem.Sense.ValueType  # 1

    @typing_extensions.final
    class ConstraintMapEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> constraint_pb2.Constraint: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: constraint_pb2.Constraint | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class CustomPenaltyTermMapEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> custom_penalty_term_pb2.CustomPenaltyTerm: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: custom_penalty_term_pb2.CustomPenaltyTerm | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SENSE_FIELD_NUMBER: builtins.int
    OBJECTIVE_FUNCTION_FIELD_NUMBER: builtins.int
    CONSTRAINT_MAP_FIELD_NUMBER: builtins.int
    CUSTOM_PENALTY_TERM_MAP_FIELD_NUMBER: builtins.int
    id: builtins.str
    name: builtins.str
    sense: global___Problem.Sense.ValueType
    @property
    def objective_function(self) -> expression_pb2.Expression: ...
    @property
    def constraint_map(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, constraint_pb2.Constraint]: ...
    @property
    def custom_penalty_term_map(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, custom_penalty_term_pb2.CustomPenaltyTerm]: ...
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        name: builtins.str = ...,
        sense: global___Problem.Sense.ValueType = ...,
        objective_function: expression_pb2.Expression | None = ...,
        constraint_map: collections.abc.Mapping[builtins.str, constraint_pb2.Constraint] | None = ...,
        custom_penalty_term_map: collections.abc.Mapping[builtins.str, custom_penalty_term_pb2.CustomPenaltyTerm] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["objective_function", b"objective_function"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["constraint_map", b"constraint_map", "custom_penalty_term_map", b"custom_penalty_term_map", "id", b"id", "name", b"name", "objective_function", b"objective_function", "sense", b"sense"]) -> None: ...

global___Problem = Problem
