"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class BinaryOp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Kind:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _KindEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[BinaryOp._Kind.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: BinaryOp._Kind.ValueType  # 0
        POW: BinaryOp._Kind.ValueType  # 1
        MOD: BinaryOp._Kind.ValueType  # 2
        EQ: BinaryOp._Kind.ValueType  # 3
        NOT_EQ: BinaryOp._Kind.ValueType  # 4
        LESS_THAN: BinaryOp._Kind.ValueType  # 5
        LESS_THAN_EQ: BinaryOp._Kind.ValueType  # 6
        GREATER_THAN: BinaryOp._Kind.ValueType  # 7
        GREATER_THAN_EQ: BinaryOp._Kind.ValueType  # 8

    class Kind(_Kind, metaclass=_KindEnumTypeWrapper): ...
    UNKNOWN: BinaryOp.Kind.ValueType  # 0
    POW: BinaryOp.Kind.ValueType  # 1
    MOD: BinaryOp.Kind.ValueType  # 2
    EQ: BinaryOp.Kind.ValueType  # 3
    NOT_EQ: BinaryOp.Kind.ValueType  # 4
    LESS_THAN: BinaryOp.Kind.ValueType  # 5
    LESS_THAN_EQ: BinaryOp.Kind.ValueType  # 6
    GREATER_THAN: BinaryOp.Kind.ValueType  # 7
    GREATER_THAN_EQ: BinaryOp.Kind.ValueType  # 8

    KIND_FIELD_NUMBER: builtins.int
    LEFT_ID_FIELD_NUMBER: builtins.int
    RIGHT_ID_FIELD_NUMBER: builtins.int
    kind: global___BinaryOp.Kind.ValueType
    left_id: builtins.str
    right_id: builtins.str
    def __init__(
        self,
        *,
        kind: global___BinaryOp.Kind.ValueType = ...,
        left_id: builtins.str = ...,
        right_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["kind", b"kind", "left_id", b"left_id", "right_id", b"right_id"]) -> None: ...

global___BinaryOp = BinaryOp
