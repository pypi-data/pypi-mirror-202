"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Element(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Bound(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        BOUND_ID_FIELD_NUMBER: builtins.int
        bound_id: builtins.str
        def __init__(
            self,
            *,
            bound_id: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["bound_id", b"bound_id"]) -> None: ...

    @typing_extensions.final
    class Range(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        START_ID_FIELD_NUMBER: builtins.int
        END_ID_FIELD_NUMBER: builtins.int
        start_id: builtins.str
        end_id: builtins.str
        def __init__(
            self,
            *,
            start_id: builtins.str = ...,
            end_id: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["end_id", b"end_id", "start_id", b"start_id"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    NDIM_FIELD_NUMBER: builtins.int
    BOUND_FIELD_NUMBER: builtins.int
    RANGE_FIELD_NUMBER: builtins.int
    name: builtins.str
    ndim: builtins.int
    @property
    def bound(self) -> global___Element.Bound: ...
    @property
    def range(self) -> global___Element.Range: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        ndim: builtins.int = ...,
        bound: global___Element.Bound | None = ...,
        range: global___Element.Range | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["belong_to", b"belong_to", "bound", b"bound", "range", b"range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["belong_to", b"belong_to", "bound", b"bound", "name", b"name", "ndim", b"ndim", "range", b"range"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["belong_to", b"belong_to"]) -> typing_extensions.Literal["bound", "range"] | None: ...

global___Element = Element
