"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import element_pb2
import expression_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Forall(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class IndexDomainNodeMapEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> expression_pb2.ExpressionKind: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: expression_pb2.ExpressionKind | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    INDEX_FIELD_NUMBER: builtins.int
    INDEX_DOMAIN_NODE_MAP_FIELD_NUMBER: builtins.int
    CONDITION_FIELD_NUMBER: builtins.int
    @property
    def index(self) -> element_pb2.Element: ...
    @property
    def index_domain_node_map(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, expression_pb2.ExpressionKind]: ...
    @property
    def condition(self) -> expression_pb2.Expression: ...
    def __init__(
        self,
        *,
        index: element_pb2.Element | None = ...,
        index_domain_node_map: collections.abc.Mapping[builtins.str, expression_pb2.ExpressionKind] | None = ...,
        condition: expression_pb2.Expression | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["condition", b"condition", "index", b"index"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["condition", b"condition", "index", b"index", "index_domain_node_map", b"index_domain_node_map"]) -> None: ...

global___Forall = Forall
