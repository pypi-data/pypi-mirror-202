"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import expression_pb2
import forall_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Constraint(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Equality:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _EqualityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Constraint._Equality.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        EQUAL: Constraint._Equality.ValueType  # 0
        LESS_THAN_EQUAL: Constraint._Equality.ValueType  # 1

    class Equality(_Equality, metaclass=_EqualityEnumTypeWrapper): ...
    EQUAL: Constraint.Equality.ValueType  # 0
    LESS_THAN_EQUAL: Constraint.Equality.ValueType  # 1

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    EQUALITY_FIELD_NUMBER: builtins.int
    LEFT_FIELD_NUMBER: builtins.int
    RIGHT_FIELD_NUMBER: builtins.int
    FORALL_LIST_FIELD_NUMBER: builtins.int
    id: builtins.str
    name: builtins.str
    equality: global___Constraint.Equality.ValueType
    @property
    def left(self) -> expression_pb2.Expression: ...
    @property
    def right(self) -> expression_pb2.Expression: ...
    @property
    def forall_list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[forall_pb2.Forall]: ...
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        name: builtins.str = ...,
        equality: global___Constraint.Equality.ValueType = ...,
        left: expression_pb2.Expression | None = ...,
        right: expression_pb2.Expression | None = ...,
        forall_list: collections.abc.Iterable[forall_pb2.Forall] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["left", b"left", "right", b"right"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["equality", b"equality", "forall_list", b"forall_list", "id", b"id", "left", b"left", "name", b"name", "right", b"right"]) -> None: ...

global___Constraint = Constraint
