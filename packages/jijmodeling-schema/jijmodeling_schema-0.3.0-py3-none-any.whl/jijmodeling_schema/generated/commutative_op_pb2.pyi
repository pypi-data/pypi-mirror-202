"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class CommutativeOp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Kind:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _KindEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CommutativeOp._Kind.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: CommutativeOp._Kind.ValueType  # 0
        ADD: CommutativeOp._Kind.ValueType  # 1
        MUL: CommutativeOp._Kind.ValueType  # 2
        MIN: CommutativeOp._Kind.ValueType  # 3
        MAX: CommutativeOp._Kind.ValueType  # 4
        AND: CommutativeOp._Kind.ValueType  # 5
        OR: CommutativeOp._Kind.ValueType  # 6
        XOR: CommutativeOp._Kind.ValueType  # 7

    class Kind(_Kind, metaclass=_KindEnumTypeWrapper): ...
    UNKNOWN: CommutativeOp.Kind.ValueType  # 0
    ADD: CommutativeOp.Kind.ValueType  # 1
    MUL: CommutativeOp.Kind.ValueType  # 2
    MIN: CommutativeOp.Kind.ValueType  # 3
    MAX: CommutativeOp.Kind.ValueType  # 4
    AND: CommutativeOp.Kind.ValueType  # 5
    OR: CommutativeOp.Kind.ValueType  # 6
    XOR: CommutativeOp.Kind.ValueType  # 7

    KIND_FIELD_NUMBER: builtins.int
    TERM_IDS_FIELD_NUMBER: builtins.int
    kind: global___CommutativeOp.Kind.ValueType
    @property
    def term_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        kind: global___CommutativeOp.Kind.ValueType = ...,
        term_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["kind", b"kind", "term_ids", b"term_ids"]) -> None: ...

global___CommutativeOp = CommutativeOp
