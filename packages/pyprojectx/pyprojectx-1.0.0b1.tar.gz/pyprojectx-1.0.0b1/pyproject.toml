[tool.poetry]
name = "pyprojectx"
version = "1.0.0b1"
description = "Execute scripts from pyproject.toml, installing tools on-the-fly"
license = "MIT"
authors = ["Houbie <ivo@houbrechts-it.be>"]
readme = "README.md"
homepage = "https://github.com/pyprojectx/pyprojectx"
documentation = "https://pyprojectx.github.io"
keywords = ["build", "dependency", "pyprojectx"]
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

[tool.poetry.scripts]
pyprojectx = "pyprojectx.cli:main"

[tool.poetry.dependencies]
python = ">=3.7"
tomli = ">=2.0"
virtualenv = ">=20.21"
userpath = ">=1.8"

[tool.poetry.dev-dependencies]
pytest = ">=7.3"
pytest-mock = ">=3.10"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[tool.pylint.format]
max-line-length = 120
variable-rgx = '^[a-z_][a-z0-9_]*$'
[tool.pylint.similarities]
ignore-imports= true
[tool.pylint.master]
init-hook = """
import sys
sys.path.append(f".venv/lib/python{sys.version_info.major}.{sys.version_info.minor}/site-packages")
sys.path.append(f".venv/Lib/site-packages")
"""
[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "unspecified-encoding"
]

[tool.pyprojectx]
poetry = { requirements = "poetry==1.4.2", post-install = "pw@pre-commit install" }
black = "black==23.3.0"
isort = "isort==5.12.0"
pylint = "pylint==2.17.2"
pre-commit = "pre-commit"
mkdocs = ["mkdocs ~=1.2", "mkdocs-material ~=8.2", "mkdocstrings[python] ~=0.18", "markdown-include ~=0.6", ]

[tool.pyprojectx.aliases]
install = "poetry install"
run = "poetry run pyprojectx -t pyproject.toml "
outdated = "poetry show --outdated"
clean = "rm -r .venv .pytest_cache dist"
clean-all = """\
pw@clean
rm -r .pyprojectx"""
black = "black src tests"
isort = "isort src tests"
unit-test = "poetry run pytest tests/unit"
integration-test = "poetry run pytest tests/integration"
test = "pw@unit-test && pw@integration-test"
check-pylint = "pylint src tests"
check-black = "black src tests --check"
check = "pw@check-black && pw@check-pylint && pw@test"
build = "pw@install && pw@check && pw@poetry build"

# used in github actions:
publish = "poetry publish --username __token__"
prep-release = """\
# cleanup
rm -f wrappers.zip .changelog.md
# extract version from tag
RELEASE_VERSION="${GITHUB_REF##*/v}"
pw@poetry version $RELEASE_VERSION
# replace __version__ in wrapper
sed -i -e "s/__version__/${RELEASE_VERSION}/g" src/pyprojectx/wrapper/pw.py
# cleanup sed backup
rm -r src/pyprojectx/wrapper/pw.py?*
mkdir -p dist-zip
cp src/pyprojectx/wrapper/pw.py dist-zip/pw
cp src/pyprojectx/wrapper/pw.bat dist-zip/pw.bat
zip -j wrappers.zip dist-zip/pw*
awk '/-{3,}/{flag=1;next}/Release/{if (flag==1)exit}flag' CHANGELOG.md > .changelog.md
"""

generate-usage = "pw@ --help > docs/docs/usage.txt"
serve-docs = "@mkdocs: cd docs && mkdocs serve"
generate-docs = "@mkdocs: pw@generate-usage && cd docs && mkdocs build"
deploy-docs = "@mkdocs: cd docs && mkdocs gh-deploy"

[tool.pyprojectx.os.win.aliases]
clean = "rmdir /s/q .venv .pytest_cache dist"
clean-all = """\
pw@clean
rmdir /s/q .pyprojectx"""
