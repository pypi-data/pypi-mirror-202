
================
OmicScope Object
================

After importing the data into OmicScope, the user can access the input parameters and the results generated by the library.

.. code-block:: python

   import omicscope as omics

   df = omics.OmicScope(PATH_TO_FILE, Method = 'Progenesis', ControlGroup = 'WT')

.. code-block::

   OmicScope v 1.0.1 For help: Insert
   If you use  in published research, please cite: 'lallalala'
   Reis-de-Oliveira G, Martins-de-Souza D. OmicScope: an Comprehensive Python library for Systems Biology Visualization.

   User already performed statistical analysis



Conditions
----------

To access conditions that were evaluated during proteomics experiments, users can run the following code:

.. code-block:: python

   df.Conditions

.. code-block::

   ['WT', 'KO']




In this study, two groups were identified: WT and KO. Since we defined ControlGroup as 'WT' in the OmicScope function, we can check for the Control Group's value by using the following command:

.. code-block:: python

   df.ControlGroup

   # If the user does not specify a control group, OmicScope 
   # will sort the groups alphabetically and store them in the same object.

.. code-block::

   'WT'




Differential Expression Analysis
--------------------------------

Data generated by differential expression analysis performed at OmicScope are stored in **quant_data** object, presenting all information about proteins that were quantified, such as their p-value, p-Adjusted, abundance in each sample, mean of abundance in each group, and fold-change. 

.. code-block:: python

   df.quant_data.head()


.. raw:: html

   <div>
   <style scoped>
       .dataframe tbody tr th:only-of-type {
           vertical-align: middle;
       }

       .dataframe tbody tr th {
           vertical-align: top;
       }

       .dataframe thead th {
           text-align: right;
       }
   </style>
   <table border="1" class="dataframe">
     <thead>
       <tr style="text-align: right;">
         <th></th>
         <th>Accession</th>
         <th>Peptide count</th>
         <th>Unique peptides</th>
         <th>Confidence score</th>
         <th>pvalue</th>
         <th>pAdjusted</th>
         <th>Max fold change</th>
         <th>Power</th>
         <th>Highest mean condition</th>
         <th>Lowest mean condition</th>
         <th>...</th>
         <th>VCC_WT_4_VIN.WT</th>
         <th>VCC_WT_4_VIN_2.WT</th>
         <th>VCC_WT_4_VIN_29102021.WT</th>
         <th>VCC_WT_4_VIN_29102021_2.WT</th>
         <th>TotalMean</th>
         <th>mean WT</th>
         <th>mean KO</th>
         <th>fc</th>
         <th>log2(fc)</th>
         <th>-log10(pAdjusted)</th>
       </tr>
     </thead>
     <tbody>
       <tr>
         <th>0</th>
         <td>Q61823</td>
         <td>8</td>
         <td>1</td>
         <td>44.7130</td>
         <td>7.188909e-09</td>
         <td>0.000007</td>
         <td>1.439696</td>
         <td>1.000000</td>
         <td>WT</td>
         <td>KO</td>
         <td>...</td>
         <td>83303.856481</td>
         <td>87632.085234</td>
         <td>78080.558618</td>
         <td>81497.447186</td>
         <td>72194.027402</td>
         <td>85205.257816</td>
         <td>59182.796989</td>
         <td>0.694591</td>
         <td>-0.525765</td>
         <td>5.174557</td>
       </tr>
       <tr>
         <th>1</th>
         <td>Q91V61</td>
         <td>6</td>
         <td>0</td>
         <td>30.6978</td>
         <td>2.045379e-08</td>
         <td>0.000010</td>
         <td>1.309501</td>
         <td>1.000000</td>
         <td>WT</td>
         <td>KO</td>
         <td>...</td>
         <td>67214.986877</td>
         <td>68608.124964</td>
         <td>65715.209981</td>
         <td>75314.101558</td>
         <td>61166.473469</td>
         <td>69363.517608</td>
         <td>52969.429329</td>
         <td>0.763650</td>
         <td>-0.389017</td>
         <td>5.021476</td>
       </tr>
       <tr>
         <th>2</th>
         <td>Q3TMQ6</td>
         <td>1</td>
         <td>0</td>
         <td>12.8896</td>
         <td>5.705353e-08</td>
         <td>0.000018</td>
         <td>2.049949</td>
         <td>1.000000</td>
         <td>WT</td>
         <td>KO</td>
         <td>...</td>
         <td>20016.681999</td>
         <td>18983.880260</td>
         <td>19210.197630</td>
         <td>16118.917424</td>
         <td>12143.756369</td>
         <td>16324.261707</td>
         <td>7963.251031</td>
         <td>0.487817</td>
         <td>-1.035588</td>
         <td>4.752059</td>
       </tr>
       <tr>
         <th>3</th>
         <td>Q8JZQ2</td>
         <td>4</td>
         <td>1</td>
         <td>27.5190</td>
         <td>1.740757e-07</td>
         <td>0.000041</td>
         <td>2.126119</td>
         <td>0.999997</td>
         <td>WT</td>
         <td>KO</td>
         <td>...</td>
         <td>438354.668416</td>
         <td>419538.761093</td>
         <td>487150.346242</td>
         <td>328164.625834</td>
         <td>388185.765595</td>
         <td>528021.574598</td>
         <td>248349.956593</td>
         <td>0.470341</td>
         <td>-1.088222</td>
         <td>4.392542</td>
       </tr>
       <tr>
         <th>4</th>
         <td>O89053</td>
         <td>7</td>
         <td>3</td>
         <td>47.6594</td>
         <td>3.175910e-07</td>
         <td>0.000044</td>
         <td>1.459878</td>
         <td>0.999993</td>
         <td>WT</td>
         <td>KO</td>
         <td>...</td>
         <td>131777.765141</td>
         <td>129648.706863</td>
         <td>112132.161616</td>
         <td>91798.715011</td>
         <td>96198.874599</td>
         <td>114183.391010</td>
         <td>78214.358187</td>
         <td>0.684989</td>
         <td>-0.545847</td>
         <td>4.354189</td>
       </tr>
     </tbody>
   </table>
   <p>5 rows Ã— 50 columns</p>
   </div>


.. code-block:: python

   df.quant_data.columns

.. code-block::

   Index(['Accession', 'Peptide count', 'Unique peptides', 'Confidence score',
          'pvalue', 'pAdjusted', 'Max fold change', 'Power',
          'Highest mean condition', 'Lowest mean condition', 'Description',
          'gene_name', 'VCC_KO_1_VINO.KO', 'VCC_KO_1_VINO_2.KO',
          'VCC_KO_1_VINO_29102021.KO', 'VCC_KO_1_VINO_29102021_3.KO',
          'VCC_KO_2_VINO.KO', 'VCC_KO_2_VINO_2.KO', 'VCC_KO_2_VINO_29102021.KO',
          'VCC_KO_2_VINO_29102021_3.KO', 'VCC_KO_3_VINO.KO', 'VCC_KO_3_VINO_2.KO',
          'VCC_KO_3_VINO_29102021.KO', 'VCC_KO_3_VINO_29102021_3.KO',
          'VCC_KO_4_VINO.KO', 'VCC_KO_4_VINO_2.KO', 'VCC_KO_4_VINO_29102021.KO',
          'VCC_KO_4_VINO_29102021_3.KO', 'VCC_WT_1_VIN.WT', 'VCC_WT_1_VIN_2.WT',
          'VCC_WT_1_VIN_29102021.WT', 'VCC_WT_1_VIN_29102021_2.WT',
          'VCC_WT_2_VIN.WT', 'VCC_WT_2_VIN_2.WT', 'VCC_WT_2_VIN_29102021.WT',
          'VCC_WT_2_VIN_29102021_2.WT', 'VCC_WT_3_VIN.WT', 'VCC_WT_3_VIN_2.WT',
          'VCC_WT_3_VIN_29102021.WT', 'VCC_WT_3_VIN_29102021_2.WT',
          'VCC_WT_4_VIN.WT', 'VCC_WT_4_VIN_2.WT', 'VCC_WT_4_VIN_29102021.WT',
          'VCC_WT_4_VIN_29102021_2.WT', 'TotalMean', 'mean WT', 'mean KO', 'fc',
          'log2(fc)', '-log10(pAdjusted)'],
         dtype='object', name=0)




A resumed dataset containing only differentially expressed proteins and comparative results, can be found on **deps** .

.. code-block:: python

   df.deps


.. raw:: html

   <div>
   <style scoped>
       .dataframe tbody tr th:only-of-type {
           vertical-align: middle;
       }

       .dataframe tbody tr th {
           vertical-align: top;
       }

       .dataframe thead th {
           text-align: right;
       }
   </style>
   <table border="1" class="dataframe">
     <thead>
       <tr style="text-align: right;">
         <th></th>
         <th>gene_name</th>
         <th>Accession</th>
         <th>pAdjusted</th>
         <th>-log10(pAdjusted)</th>
         <th>log2(fc)</th>
       </tr>
     </thead>
     <tbody>
       <tr>
         <th>0</th>
         <td>Pdcd4</td>
         <td>Q61823</td>
         <td>0.000007</td>
         <td>5.174557</td>
         <td>-0.525765</td>
       </tr>
       <tr>
         <th>1</th>
         <td>Sfxn3</td>
         <td>Q91V61</td>
         <td>0.000010</td>
         <td>5.021476</td>
         <td>-0.389017</td>
       </tr>
       <tr>
         <th>2</th>
         <td>Ang4</td>
         <td>Q3TMQ6</td>
         <td>0.000018</td>
         <td>4.752059</td>
         <td>-1.035588</td>
       </tr>
       <tr>
         <th>3</th>
         <td>Afg3l2</td>
         <td>Q8JZQ2</td>
         <td>0.000041</td>
         <td>4.392542</td>
         <td>-1.088222</td>
       </tr>
       <tr>
         <th>4</th>
         <td>Coro1a</td>
         <td>O89053</td>
         <td>0.000044</td>
         <td>4.354189</td>
         <td>-0.545847</td>
       </tr>
       <tr>
         <th>...</th>
         <td>...</td>
         <td>...</td>
         <td>...</td>
         <td>...</td>
         <td>...</td>
       </tr>
       <tr>
         <th>246</th>
         <td>Idh3a</td>
         <td>Q9D6R2</td>
         <td>0.047198</td>
         <td>1.326077</td>
         <td>-0.213381</td>
       </tr>
       <tr>
         <th>247</th>
         <td>Qars1</td>
         <td>Q8BML9</td>
         <td>0.048521</td>
         <td>1.314071</td>
         <td>-0.203200</td>
       </tr>
       <tr>
         <th>248</th>
         <td>Tmem167a</td>
         <td>Q9CR64</td>
         <td>0.049258</td>
         <td>1.307527</td>
         <td>0.361565</td>
       </tr>
       <tr>
         <th>249</th>
         <td>Pebp1</td>
         <td>P70296;Q8VIN1</td>
         <td>0.049258</td>
         <td>1.307527</td>
         <td>-0.246683</td>
       </tr>
       <tr>
         <th>250</th>
         <td>Prdx3</td>
         <td>P20108</td>
         <td>0.049258</td>
         <td>1.307527</td>
         <td>-0.182364</td>
       </tr>
     </tbody>
   </table>
   <p>245 rows Ã— 5 columns</p>
   </div>


Plots and Figures
-----------------

Plots and figures are a pivotal axis in the OmicScope workflow, allowing the users to generate ready-to-publish figures and provide insights into proteomics datasets.

All the functions below can be saved (save=PATH_TO_SAVE_FIGURE) as a vector (.svg extension - vector=True) or static  (.png extension - vector=False). By default, the resolution is set to 300 dpi (dpi=300).

Still, major functions allow the users to highlight or select proteins of interest to be plotted. For that, just write the protein gene_name at the beginning of the function. Finally, OmicScope also provides options for color palettes following suggestions of `Matplotlib package <https://matplotlib.org/stable/tutorials/colors/colormaps.htmlhttps://matplotlib.org/stable/tutorials/colors/colormaps.html>`_.

General Figures
^^^^^^^^^^^^^^^

Indentification Barplot - *object.bar_ident()*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this plot, the users can visualize the number of proteins that were quantified and the ones that were differentially regulated in the experiment. Since the number of proteins differentially regulated is intrinsically smaller than the proteins that were evaluated in the study, by default, the **bar_ident** function performs a log-transformation of the y-axis to improve the visualization of the differentially regulated bars.

.. code-block:: python

   df.bar_ident(logscale=True, dpi = 90)


.. image:: omicscope_files/omicscope_15_0.png
   :target: omicscope_files/omicscope_15_0.png
   :alt: png


.. code-block::

   <AxesSubplot: title={'left': 'WT vs KO'}, ylabel='#Proteins'>




Dynamic range plot - *object.DynamicRange()*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dynamic range plot is a classical plot in proteomics studies. This plot ranks proteins according to their abundance and highlights the proteome coverage in the study. Depending on the quantitative proteomics methods applied, the Dynamic Range plot also suggests a ratio between proteins quantified in the study. In the function below, it is possible to annotate proteins of interest in the plot by adding their **gene_name** as *args*.

.. code-block:: python

   df.DynamicRange('Pdcd4', 'Sfxn3',dpi = 90)


.. image:: omicscope_files/omicscope_17_0.png
   :target: omicscope_files/omicscope_17_0.png
   :alt: png


Volcano Plot - *object.volcano()*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Volcano plot visualizes the distribution of proteins according to their p-values and fold-changes. In addition to highlighting proteins differentially regulated as individual entities,  a proxy for quality control of normalization methods, since data presents a normal distribution on the x-axis and a positively skewed distribution on the y-axis.

.. code-block:: python

   df.volcano('Pdcd4', 'Sfxn3',dpi = 90)


.. image:: omicscope_files/omicscope_19_0.png
   :target: omicscope_files/omicscope_19_0.png
   :alt: png


MA plot - *object.MAplot()*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The MA-plot is another plot that evaluates data normalization, comparing the abundance levels of individual proteins in relation to their fold-changes.
A standard assumption is that few proteins should exhibit a change in expression, meaning that elevated deviations from zero on the y-axis suggest that the data should be further normalized.

.. code-block:: python

   df.MAplot('Pdcd4', 'Sfxn3', dpi = 90)


.. image:: omicscope_files/omicscope_21_0.png
   :target: omicscope_files/omicscope_21_0.png
   :alt: png


Evaluate abundance of subset of proteins:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

OmicScope has two options to visualize proteins individually: barplot and boxplot. Basically, both functions work similarly, users call the function by writing all target proteins and then a unique figure for all proteins (with their respective conditions) is plotted. By default, protein abundance is log-transformed.

Bar plot of proteins - *object.bar_protein(args)*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   df.bar_protein('Pdcd4', 'Sfxn3', logscale=True, palette = 'viridis', dpi = 90)


.. image:: omicscope_files/omicscope_23_0.png
   :target: omicscope_files/omicscope_23_0.png
   :alt: png


Boxplot plot of proteins - *object.bar_protein(args)*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   df.boxplot_protein('Pdcd4', 'Sfxn3', palette = 'viridis', dpi = 90)


.. image:: omicscope_files/omicscope_25_0.png
   :target: omicscope_files/omicscope_25_0.png
   :alt: png


Clustering Analysis
^^^^^^^^^^^^^^^^^^^

OmicScope also performs clustering analysis using three algorithms: hierarchical clustering, principal component analysis (PCA), and k-means. 

Heatmap - *object.heatmap()*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Heatmap function performs **hierarchical clustering** for both samples and proteins. Optionally, user can ignore the sample clustering (c_cluster=False) and choice specific proteins to plot the heatmap.

.. code-block:: python

   df.heatmap(dpi = 90, line=0)


.. image:: omicscope_files/omicscope_28_0.png
   :target: omicscope_files/omicscope_28_0.png
   :alt: png


Pearson's Correlation - *object.correlation()*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Correlation function performs pair-wise Pearson's correlation between samples, followed by hierarchical clustering for that matrix. This plot can be used to check outliers, technical variations, normalization issues, and even the size effect of differentially regulated proteins on the whole proteome. By default, the p-value threshold is defined as 1.0 when evaluating the entire proteome.

.. code-block:: python

   df.correlation()


.. image:: omicscope_files/omicscope_30_0.png
   :target: omicscope_files/omicscope_30_0.png
   :alt: png


Principal Component Analysis - *object.pca()*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Principal Component Analysis (PCA) is performed via OmicScope as an alternative method to perform sample clustering. By default, OmicScope selects all proteins quantified (pvalue=1.0) to perform sample clustering, however lower values can be chosen for other purposes.

.. code-block:: python

   df.pca(pvalue = 0.05, dpi = 90)


.. image:: omicscope_files/omicscope_32_0.png
   :target: omicscope_files/omicscope_32_0.png
   :alt: png


K-Means - *object.bigtrend()*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Mainly designed for longitudinal analysis (such as TimeCourse experiments), bigtrend function groups samples based on protein abundance using the k-means algorithm, identifying co-expressed proteins. By default, OmicScope suggests a k-number of clusters that can explain the data, however, the users can choose the number of clusters (e.g. k_cluster=2, for up- and down-regulations) that better explain the data. Following the plot, the function returns a table (DataFrame) containing the respective cluster (or **trend**\ ) for each protein.

.. code-block:: python

   df.bigtrend()

.. code-block::

   4






.. image:: omicscope_files/omicscope_34_1.png
   :target: omicscope_files/omicscope_34_1.png
   :alt: png



.. raw:: html

   <div>
   <style scoped>
       .dataframe tbody tr th:only-of-type {
           vertical-align: middle;
       }

       .dataframe tbody tr th {
           vertical-align: top;
       }

       .dataframe thead th {
           text-align: right;
       }
   </style>
   <table border="1" class="dataframe">
     <thead>
       <tr style="text-align: right;">
         <th></th>
         <th>Accession</th>
         <th>cluster</th>
         <th>sample</th>
         <th>value</th>
         <th>Condition</th>
         <th>gene_name</th>
       </tr>
     </thead>
     <tbody>
       <tr>
         <th>0</th>
         <td>Q61823</td>
         <td>0</td>
         <td>KO-1</td>
         <td>-0.651943</td>
         <td>KO</td>
         <td>Pdcd4</td>
       </tr>
       <tr>
         <th>1</th>
         <td>Q91V61</td>
         <td>2</td>
         <td>KO-1</td>
         <td>-1.343446</td>
         <td>KO</td>
         <td>Sfxn3</td>
       </tr>
       <tr>
         <th>2</th>
         <td>Q3TMQ6</td>
         <td>3</td>
         <td>KO-1</td>
         <td>-0.692659</td>
         <td>KO</td>
         <td>Ang4</td>
       </tr>
       <tr>
         <th>3</th>
         <td>Q8JZQ2</td>
         <td>3</td>
         <td>KO-1</td>
         <td>-0.440837</td>
         <td>KO</td>
         <td>Afg3l2</td>
       </tr>
       <tr>
         <th>4</th>
         <td>O89053</td>
         <td>0</td>
         <td>KO-1</td>
         <td>-0.266416</td>
         <td>KO</td>
         <td>Coro1a</td>
       </tr>
       <tr>
         <th>...</th>
         <td>...</td>
         <td>...</td>
         <td>...</td>
         <td>...</td>
         <td>...</td>
         <td>...</td>
       </tr>
       <tr>
         <th>7835</th>
         <td>Q9D6R2</td>
         <td>3</td>
         <td>WT-16</td>
         <td>-0.204624</td>
         <td>WT</td>
         <td>Idh3a</td>
       </tr>
       <tr>
         <th>7836</th>
         <td>Q8BML9</td>
         <td>3</td>
         <td>WT-16</td>
         <td>-0.145000</td>
         <td>WT</td>
         <td>Qars1</td>
       </tr>
       <tr>
         <th>7837</th>
         <td>Q9CR64</td>
         <td>1</td>
         <td>WT-16</td>
         <td>-0.581567</td>
         <td>WT</td>
         <td>Tmem167a</td>
       </tr>
       <tr>
         <th>7838</th>
         <td>P70296;Q8VIN1</td>
         <td>3</td>
         <td>WT-16</td>
         <td>0.407851</td>
         <td>WT</td>
         <td>Pebp1</td>
       </tr>
       <tr>
         <th>7839</th>
         <td>P20108</td>
         <td>3</td>
         <td>WT-16</td>
         <td>-0.219085</td>
         <td>WT</td>
         <td>Prdx3</td>
       </tr>
     </tbody>
   </table>
   <p>7840 rows Ã— 6 columns</p>
   </div>

