{"version":3,"file":"lib_index_js.27d411391aa6ec626289.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACqD;AACC;AACmB;AAChC;AACc;;AAEvD,+BAA+B,mDAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,KAAK,QAAQ;AACb;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,kBAAkB,eAAe;AACjC;AACA;;AAEA,kBAAkB,eAAe;AACjC;AACA;;AAEA,kBAAkB,eAAe;AACjC,oBAAoB,eAAe;AACnC;AACA;AACA,QAAQ;AACR;AACA;AACA,iEAAiE;AACjE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,kBAAkB,gDAAgD;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA,MAAM;AACN,mFAAmF;AACnF;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN,iFAAiF;AACjF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C,0CAA0C,IAAI,EAAE,MAAM,IAAI;AAC1D;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,yCAAyC,kDAAkD;AAC3F;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,iEAAe,EAAE,+DAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAsB;AAC9B;AACA;AACA;AACA,MAAM,kFAAgC;AACtC,gBAAgB,iCAAiC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI,eAAe;AAC1B;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://roboweb-extension/./lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module roboweb-extension\n */\nimport { IThemeManager } from '@jupyterlab/apputils';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { NotebookActions, INotebookTracker } from '@jupyterlab/notebook';\nimport { Widget } from '@lumino/widgets';\nimport { ICommandPalette } from '@jupyterlab/apputils';\n\nclass AssistantSidebar extends Widget {\n  constructor() {\n    super();\n    this.id = 'assistant-panel';\n    this.addClass('assistant-panel');\n    this.title.caption = 'Assistant';\n    this.title.iconClass = 'fa fa-robot';\n  }\n}\n\nfunction waitForNonNullVariable(reader, callback) {\n  var variable = reader(); \n  if (variable !== null) {\n    callback(variable);\n  } else {\n    setTimeout(function() {\n      waitForNonNullVariable(reader, callback);\n    }, 100); // Wait 1 second before checking again\n  }\n}\n\nfunction levenshteinDistance(a, b) {\n  const matrix = [];\n\n  if (a.length === 0) return b.length;\n  if (b.length === 0) return a.length;\n\n  for (let i = 0; i <= b.length; i++) {\n    matrix[i] = [i];\n  }\n\n  for (let j = 0; j <= a.length; j++) {\n    matrix[0][j] = j;\n  }\n\n  for (let i = 1; i <= b.length; i++) {\n    for (let j = 1; j <= a.length; j++) {\n      if (b.charAt(i - 1) === a.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution\n                                Math.min(matrix[i][j - 1] + 1, // insertion\n                                         matrix[i - 1][j] + 1)); // deletion\n      }\n    }\n  }\n\n  return matrix[b.length][a.length];\n}\n\nfunction similarity(a, b) {\n  const distance = levenshteinDistance(a, b);\n  const maxLength = Math.max(a.length, b.length);\n  return (maxLength - distance) / maxLength;\n}\n\nfunction replaceCurrentCell(tracker, code) {\n  const currentNotebook = tracker.currentWidget;\n  if (!currentNotebook) {\n    return;\n  }\n  code = code.trim();\n\n  //iterate over all cells and find the one with the highest similarity\n  var maxSimilarity = 0;\n  var maxIndex = -1;\n  var lastEmptyCell = -1; \n  var lastCellWithExclamationMark = -1;\n  //remove lines with python comments from code\n  const codeMinusComments = code.split(\"\\n\").filter(function(line) {\n    return !line.startsWith(\"#\");\n  }).join(\"\\n\");\n\n  for (var i = 0; i < currentNotebook.content.model.cells.length; i++) {\n    const cell = currentNotebook.content.model.cells.get(i);\n    const cellContent = cell.value.text;\n    if (cellContent.includes(codeMinusComments)) {\n      return; \n    }\n    if (cellContent.trim().length == 0) {\n      lastEmptyCell = i;\n    }\n    const similarityValue = similarity(cellContent, code);\n    if (similarityValue > maxSimilarity) {\n      maxSimilarity = similarityValue;\n      maxIndex = i;\n    }\n    if (cellContent.startsWith(\"!\")) {\n      lastCellWithExclamationMark = i;\n    }\n  }\n  if (maxSimilarity > 0.8) {\n    const cell = currentNotebook.content.model.cells.get(maxIndex);\n    cell.value.text = code;\n  } else {\n    //find the index of the last cell that starts with ! and add the cell after it\n    if (code.startsWith(\"!\")) {\n      //add cell at the beginning of the notebook\n      const cell = currentNotebook.content.model.contentFactory.createCodeCell({});\n      cell.value.text = code;\n      currentNotebook.content.model.cells.insert(0, cell);\n    } else if (code.startsWith(\"%\") && !code.startsWith(\"%%\")) {\n        const cell = currentNotebook.content.model.contentFactory.createCodeCell({});\n        cell.value.text = code;\n        currentNotebook.content.model.cells.insert(lastCellWithExclamationMark + 1, cell);\n    } else if (lastEmptyCell != -1) {\n      const cell = currentNotebook.content.model.cells.get(lastEmptyCell);\n      cell.value.text = code; \n    } else {\n      const cell = currentNotebook.content.model.contentFactory.createCodeCell({});\n      cell.value.text = code;\n      currentNotebook.content.model.cells.push(cell);\n    }\n  }\n};\n\nfunction removeAnsiCodes(str) {\n  return str.replace(/\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])/g, '');\n}\n\nfunction getCellContent(cell) {\n  var outputText = \"\";\n  const outputJSON = cell.outputArea.model.toJSON();\n  if (outputJSON.length > 0) {\n    const traceback = outputJSON[0].traceback;\n    if (traceback != null) {\n      for (var i = 0; i < traceback.length; i++) {\n        const escapeRegex = /\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]/g;\n        const plainTextString = traceback[i].replace(escapeRegex, '');\n        outputText += plainTextString + \"\\n\";\n      }\n    } else {\n      outputText = outputJSON[0].text;\n    }\n  }\n\n  return {\n    \"text\": cell.model.value.text,\n    \"output\": removeAnsiCodes(outputText)\n  }\n}\nfunction getCurrentCellContent(tracker, app) {\n  const currentNotebook = tracker.currentWidget;\n  if (!currentNotebook) {\n    return;\n  }\n  //get index of currently selected cell\n  const index = currentNotebook.content.activeCellIndex;\n  if (index === -1) {\n    return \"\";\n  } else {\n    //retrieve cell text including its kernel output\n    const current = app.shell.currentWidget.content.activeCell; \n    return getCellContent(current); \n  }\n}\n\nfunction loadFlutterApp() {\n  window.isJupyter = true;\n  window.serviceWorkerVersion = \"124778936\";\n  const flutter_script = document.createElement('script');\n  flutter_script.src = '/roboweb-server-extension/flutter.js';\n  document.head.appendChild(flutter_script);\n  \n  flutter_script.onload = function() {\n    console.log('Downloading main.dart.js');\n    _flutter.loader.loadEntrypoint({\n      serviceWorker: {\n        serviceWorkerVersion: serviceWorkerVersion,\n      }\n    }).then(function(engineInitializer) {\n      console.log('Initializing engine');\n      waitForNonNullVariable(function() {return document.getElementById(\"assistant-panel\")}, function (target) {\n        engineInitializer.initializeEngine({\n          hostElement: target,\n        }).then(function(appRunner) {\n          return appRunner.runApp();\n        })\n      }); \n      //if target is null sleep for 100 ms \n    });\n  };\n}\nconst plugin = {\n    id: 'roboweb-extension',\n    requires: [INotebookTracker, ICommandPalette, IThemeManager],\n    activate: (app, tracker, palette, manager) => {\n      console.log(\n        'Roboweb extension activated v0.1'\n      );\n      const widget = new AssistantSidebar();\n      widget.node.style.minWidth = \"450px\";\n      app.shell.add(widget, 'right', { rank: 0 });\n      \n      window.enableThemeSync = true;\n\n      manager.themeChanged.connect((_, args) => {\n        if (window.enableThemeSync) {\n          window.changeThemeFlutter(args.newValue);\n        } else {\n          window.enableThemeSync = true;\n        }\n      });\n      window.getCurrentJupyterTheme = function() {\n        return manager.theme;\n      }\n      window.changeThemeJupyter = function(theme) {\n        manager.setTheme(theme);\n        window.enableThemeSync = false;\n      }\n      //register function to retrieve current cell text\n      window.currentCellText = function () {\n        return getCurrentCellContent(tracker, app);\n      }\n\n      //register function to edit current cell text\n      window.replaceCodeCurrentCell = function(code) {\n        replaceCurrentCell(tracker, code);\n      }\n      window.runAll = function() {\n        const currentNotebook = tracker.currentWidget;\n        if (!currentNotebook) {\n          return;\n        }\n        NotebookActions.runAll(currentNotebook.content, currentNotebook.sessionContext);\n      }\n  \n      //track and log executions \n      NotebookActions.executed.connect(async (_, args) => {\n        const { cell, notebook, success, error } = args;\n        var cellContent = getCellContent(cell); \n        const input = cellContent.text;\n        const output = cellContent.output;\n        console.log(\"Output: \" + output);\n        window.logCellExecution(cellContent.text, cellContent.output);\n        if (error) {\n          window.autoPrompt(cellContent.text, cellContent.output);\n        } \n      });\n\n      app.commands.addCommand('fix-cell-extension:fixCell', {\n        label: 'Fix',\n        execute: () => {\n          const currentNotebook = tracker.currentWidget;\n          if (!currentNotebook) {\n            return;\n          }\n          const currentCell = window.currentCellText();\n          const errorPrompt = \"My code has an error. \\n\\nCode: \\n\\n\" + currentCell.text + \"\\n\\nError: \\n\\n\" + currentCell.output;\n          window.pastePrompt(errorPrompt); \n        }\n      });\n    \n      app.contextMenu.addItem({\n        command: 'fix-cell-extension:fixCell',\n        selector: '.jp-Notebook',\n        rank: 0\n      });  \n\n      window.addEventListener('click', function(event) {\n        const assistantPanelDiv = document.querySelector('#assistant-panel');\n        if (!assistantPanelDiv.contains(event.target)) {\n          removeFocus();\n        }\n      \n      }, { passive: true });\n            \n\n      //embed flutter app \n      loadFlutterApp();\n    },\n    autoStart: true\n};\nexport default plugin;\n\n\n\n"],"names":[],"sourceRoot":""}