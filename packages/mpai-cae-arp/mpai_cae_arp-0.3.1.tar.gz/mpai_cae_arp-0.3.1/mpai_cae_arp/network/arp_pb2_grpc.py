# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import arp_pb2 as arp__pb2


class AudioAnalyserStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAimInfo = channel.unary_unary(
                '/arp.AudioAnalyser/getAimInfo',
                request_serializer=arp__pb2.InfoRequest.SerializeToString,
                response_deserializer=arp__pb2.Info.FromString,
                )
        self.analyse = channel.unary_stream(
                '/arp.AudioAnalyser/analyse',
                request_serializer=arp__pb2.ComputationRequest.SerializeToString,
                response_deserializer=arp__pb2.ComputationResult.FromString,
                )


class AudioAnalyserServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAimInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def analyse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AudioAnalyserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAimInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getAimInfo,
                    request_deserializer=arp__pb2.InfoRequest.FromString,
                    response_serializer=arp__pb2.Info.SerializeToString,
            ),
            'analyse': grpc.unary_stream_rpc_method_handler(
                    servicer.analyse,
                    request_deserializer=arp__pb2.ComputationRequest.FromString,
                    response_serializer=arp__pb2.ComputationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arp.AudioAnalyser', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AudioAnalyser(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAimInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arp.AudioAnalyser/getAimInfo',
            arp__pb2.InfoRequest.SerializeToString,
            arp__pb2.Info.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def analyse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/arp.AudioAnalyser/analyse',
            arp__pb2.ComputationRequest.SerializeToString,
            arp__pb2.ComputationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VideoAnalyserStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAimInfo = channel.unary_unary(
                '/arp.VideoAnalyser/getAimInfo',
                request_serializer=arp__pb2.InfoRequest.SerializeToString,
                response_deserializer=arp__pb2.Info.FromString,
                )
        self.analyse = channel.unary_stream(
                '/arp.VideoAnalyser/analyse',
                request_serializer=arp__pb2.ComputationRequest.SerializeToString,
                response_deserializer=arp__pb2.ComputationResult.FromString,
                )


class VideoAnalyserServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAimInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def analyse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VideoAnalyserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAimInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getAimInfo,
                    request_deserializer=arp__pb2.InfoRequest.FromString,
                    response_serializer=arp__pb2.Info.SerializeToString,
            ),
            'analyse': grpc.unary_stream_rpc_method_handler(
                    servicer.analyse,
                    request_deserializer=arp__pb2.ComputationRequest.FromString,
                    response_serializer=arp__pb2.ComputationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arp.VideoAnalyser', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VideoAnalyser(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAimInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arp.VideoAnalyser/getAimInfo',
            arp__pb2.InfoRequest.SerializeToString,
            arp__pb2.Info.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def analyse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/arp.VideoAnalyser/analyse',
            arp__pb2.ComputationRequest.SerializeToString,
            arp__pb2.ComputationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TapeIrregularityClassifierStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAimInfo = channel.unary_unary(
                '/arp.TapeIrregularityClassifier/getAimInfo',
                request_serializer=arp__pb2.InfoRequest.SerializeToString,
                response_deserializer=arp__pb2.Info.FromString,
                )
        self.classify = channel.unary_stream(
                '/arp.TapeIrregularityClassifier/classify',
                request_serializer=arp__pb2.ComputationRequest.SerializeToString,
                response_deserializer=arp__pb2.ComputationResult.FromString,
                )


class TapeIrregularityClassifierServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAimInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def classify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TapeIrregularityClassifierServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAimInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getAimInfo,
                    request_deserializer=arp__pb2.InfoRequest.FromString,
                    response_serializer=arp__pb2.Info.SerializeToString,
            ),
            'classify': grpc.unary_stream_rpc_method_handler(
                    servicer.classify,
                    request_deserializer=arp__pb2.ComputationRequest.FromString,
                    response_serializer=arp__pb2.ComputationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arp.TapeIrregularityClassifier', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TapeIrregularityClassifier(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAimInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arp.TapeIrregularityClassifier/getAimInfo',
            arp__pb2.InfoRequest.SerializeToString,
            arp__pb2.Info.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def classify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/arp.TapeIrregularityClassifier/classify',
            arp__pb2.ComputationRequest.SerializeToString,
            arp__pb2.ComputationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TapeAudioRestorationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAimInfo = channel.unary_unary(
                '/arp.TapeAudioRestoration/getAimInfo',
                request_serializer=arp__pb2.InfoRequest.SerializeToString,
                response_deserializer=arp__pb2.Info.FromString,
                )
        self.restore = channel.unary_stream(
                '/arp.TapeAudioRestoration/restore',
                request_serializer=arp__pb2.ComputationRequest.SerializeToString,
                response_deserializer=arp__pb2.ComputationResult.FromString,
                )


class TapeAudioRestorationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAimInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TapeAudioRestorationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAimInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getAimInfo,
                    request_deserializer=arp__pb2.InfoRequest.FromString,
                    response_serializer=arp__pb2.Info.SerializeToString,
            ),
            'restore': grpc.unary_stream_rpc_method_handler(
                    servicer.restore,
                    request_deserializer=arp__pb2.ComputationRequest.FromString,
                    response_serializer=arp__pb2.ComputationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arp.TapeAudioRestoration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TapeAudioRestoration(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAimInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arp.TapeAudioRestoration/getAimInfo',
            arp__pb2.InfoRequest.SerializeToString,
            arp__pb2.Info.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def restore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/arp.TapeAudioRestoration/restore',
            arp__pb2.ComputationRequest.SerializeToString,
            arp__pb2.ComputationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PackagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAimInfo = channel.unary_unary(
                '/arp.Packager/getAimInfo',
                request_serializer=arp__pb2.InfoRequest.SerializeToString,
                response_deserializer=arp__pb2.Info.FromString,
                )
        self.package = channel.unary_stream(
                '/arp.Packager/package',
                request_serializer=arp__pb2.ComputationRequest.SerializeToString,
                response_deserializer=arp__pb2.ComputationResult.FromString,
                )


class PackagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAimInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def package(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PackagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAimInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getAimInfo,
                    request_deserializer=arp__pb2.InfoRequest.FromString,
                    response_serializer=arp__pb2.Info.SerializeToString,
            ),
            'package': grpc.unary_stream_rpc_method_handler(
                    servicer.package,
                    request_deserializer=arp__pb2.ComputationRequest.FromString,
                    response_serializer=arp__pb2.ComputationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arp.Packager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Packager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAimInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arp.Packager/getAimInfo',
            arp__pb2.InfoRequest.SerializeToString,
            arp__pb2.Info.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def package(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/arp.Packager/package',
            arp__pb2.ComputationRequest.SerializeToString,
            arp__pb2.ComputationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
