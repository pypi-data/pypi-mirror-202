# generated by datamodel-codegen:
#   filename:  package_show.json
#   timestamp: 2023-04-14T08:17:30+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Extra


class Resource(BaseModel):
    class Config:
        extra = Extra.allow

    cache_last_updated: Optional[Any] = None
    coverage_start: Optional[str] = None
    documentation_url: Optional[str] = None
    package_id: Optional[str] = None
    update_frequency: Optional[str] = None
    datastore_active: Optional[bool] = None
    id: Optional[str] = None
    size: Optional[Any] = None
    realtime: Optional[bool] = None
    state: Optional[str] = None
    hash: Optional[str] = None
    description: Optional[str] = None
    format: Optional[str] = None
    last_modified: Optional[Any] = None
    url_type: Optional[Any] = None
    mimetype: Optional[Any] = None
    cache_url: Optional[Any] = None
    name: Optional[str] = None
    created: Optional[str] = None
    url: Optional[str] = None
    mimetype_inner: Optional[Any] = None
    position: Optional[int] = None
    revision_id: Optional[str] = None
    resource_type: Optional[Any] = None


class Tag(BaseModel):
    class Config:
        extra = Extra.allow

    vocabulary_id: Optional[Any] = None
    state: Optional[str] = None
    display_name: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None


class Group(BaseModel):
    class Config:
        extra = Extra.allow

    display_name: Optional[str] = None
    description: Optional[str] = None
    image_display_url: Optional[str] = None
    title: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None


class Organization(BaseModel):
    class Config:
        extra = Extra.allow

    description: Optional[str] = None
    created: Optional[str] = None
    title: Optional[str] = None
    name: Optional[str] = None
    is_organization: Optional[bool] = None
    state: Optional[str] = None
    image_url: Optional[str] = None
    revision_id: Optional[str] = None
    type: Optional[str] = None
    id: Optional[str] = None
    approval_status: Optional[str] = None


class Result(BaseModel):
    class Config:
        extra = Extra.allow

    license_title: Optional[Any] = None
    maintainer: Optional[Any] = None
    sysadmin_edit_only: Optional[str] = None
    relationships_as_object: Optional[List] = None
    topics: Optional[List[str]] = None
    private: Optional[bool] = None
    maintainer_email: Optional[Any] = None
    num_tags: Optional[int] = None
    sources: Optional[List[str]] = None
    frequency: Optional[str] = None
    id: Optional[str] = None
    metadata_modified: Optional[str] = None
    author: Optional[Any] = None
    author_email: Optional[Any] = None
    state: Optional[str] = None
    version: Optional[Any] = None
    metadata_created: Optional[str] = None
    coverage_start: Optional[str] = None
    creator_user_id: Optional[str] = None
    type: Optional[str] = None
    resources: Optional[List[Resource]] = None
    num_resources: Optional[int] = None
    description: Optional[str] = None
    tags: Optional[List[Tag]] = None
    groups: Optional[List[Group]] = None
    license_id: Optional[Any] = None
    relationships_as_subject: Optional[List] = None
    organization: Optional[Organization] = None
    name: Optional[str] = None
    isopen: Optional[bool] = None
    url: Optional[str] = None
    notes: Optional[str] = None
    owner_org: Optional[str] = None
    title: Optional[str] = None
    revision_id: Optional[str] = None
    source_ids: Optional[List[str]] = None


class PackageShowModel(BaseModel):
    class Config:
        extra = Extra.allow

    help: Optional[str] = None
    success: Optional[bool] = None
    result: Optional[Result] = None
