import django
import os
import pytest
from model_bakery import baker

os.environ.setdefault('DJANGO_SETTINGS_MODULE', '{{ settings_module }}')
os.environ.setdefault('ENV_PATH', '../envs/.env.test')
django.setup()

from django.shortcuts import reverse
from rest_framework import status
from rest_framework.test import APITestCase, APIClient


@pytest.fixture(autouse=True)
def init_identifiers():
    """ initialize identifiers for lims entities """
    from id_bank.management.commands.init_id_bank import Command
    c = Command()
    c.handle(**{'limit': 1, 'create_entities': True, 'entity': None, 'include_disabled': None, 'count': 1})


def create_custom_client(group_name):
    """ create a client user in a specified group and return a client for object for that user """
    user = baker.make('auth.User', username=f'{group_name}_user')
    group = baker.make('auth.Group', name=group_name)
    user.groups.add(group)
    token = baker.make('authtoken.Token', user=user)
    client = APIClient()
    client.credentials(**dict(HTTP_AUTHORIZATION=f'Token {token.key}'))
    return client


class UserSetupMixin:
    def setUp(self):
        self.user = baker.make('auth.User', username='tester_basic')
        self.token = baker.make('authtoken.Token', user=self.user)
        self.client = APIClient()
        self.client.credentials(**dict(HTTP_AUTHORIZATION=f'Token {self.token.key}'))

{% for view, route_list in data.items() %}
class {{ view.model.__name__ }}Tests(UserSetupMixin, APITestCase):
    """ test that expandable fields provided by the {{ view.__name__ }} viewset can be successfully expanded """
    def setUp(self):
        super({{ view.model.__name__}}Tests, self).setUp()
        self.row = baker.make('{{ view.model._meta.app_label }}.{{ view.model.__name__}}')
    {% for route in route_list %}
    {% if '-list' in route.name %}
    {% include 'viewset/list_expanded.jinja' %}
    {% elif '-detail' in route.name %}
    {% include 'viewset/retrieve_expanded.jinja' %}
    {% endif %}
    {% endfor %}
{% endfor %}