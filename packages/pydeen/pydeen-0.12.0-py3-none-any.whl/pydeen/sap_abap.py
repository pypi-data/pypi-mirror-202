"""
    SAP NetWeaver ABAP Stack features without addons 
"""


from pydeen.core import PyDEEN
from pydeen.types import Backend, Connector, Auth, DataHub, Result, Factory
from pydeen.http import HTTPConnector, HTTPBackend, HTTPRequest
from pydeen.menu import MenuSelection, MenuAction, UserInput
from pydeen.odata import ODataMetadata, ODataMetaEntity, ODataResult, ODataResultSingle
from pydeen.pandas import PandasResultDataframe
from pydeen.exits import MenuExitCallback
from datetime import datetime, timedelta, timezone

import pandas as pd
import re


class SAPAbapODataMetaEntity(ODataMetaEntity):

    def __init__(self, metadata_util, entity: str) -> None:
        super().__init__(metadata_util, entity)
        self.type = "pydeen.SAPAbapODataMetaEntity"

    """
        convert datetime information given by '/Date(<ticks>)' to datetime
        copied from https://stackoverflow.com/questions/28482616/convert-weird-python-date-format-to-readable-date
    """

    def get_datetime_from_slash_date(self, timestring) -> datetime:
        hours = 0
        minutes = 0
        epoch = datetime(1970, 1, 1, tzinfo=timezone.utc)
        ticks, offset = re.match(
            r'/Date\((\d+)([+-]\d{4})?\)/$', timestring).groups()
        utc_dt = epoch + timedelta(milliseconds=int(ticks))
        if offset:
            offset = int(offset)
            hours, minutes = divmod(abs(offset), 100)
            if offset < 0:
                hours, minutes = -hours, -minutes

        dt = utc_dt.astimezone(
            timezone(timedelta(hours=hours, minutes=minutes)))
        return dt


class SAPAbapODataMetadata(ODataMetadata):

    def __init__(self) -> None:
        super().__init__()
        self.type = "pydeen.SAPAbapODataMetadata"


class SAPAbapHttpBackend(HTTPBackend):

    HTTP_PARAM_SAPCLIENT = "sap-client"

    def __init__(self, name: str, url: str, client: str, auth: Auth = None) -> None:
        super().__init__(name, url, auth)
        self.set_property(Backend.BACKEND_PROP_TENANT, client)
        self.type = "pydeen.SAPAbapHttpBackend"

    def get_client(self):
        return self.get_property(Backend.BACKEND_PROP_TENANT)

    def get_url(self) -> str:
        client = self.get_client()
        url = HTTPBackend.get_url(self)
        if client is None:
            return url
        else:
            return f"{url}?sap-client={client}"

    def get_sap_column_name(self, name: str) -> str:
        return name

    def generate_table_template_for_pandas_df(self, df: pd.DataFrame, tablename: str, title: str = None, readonly: bool = True, use_int8: bool = True, with_timestamp: bool = False) -> str:
        # check pandas
        try:
            cols = df.columns.values.tolist()
        except Exception as exc:
            self.error(f"errors occured: {type(exc)} - {exc}")
            return None

        if cols == None or len(cols) == 0:
            self.error("invalid pandas dataframe object")
            return None

        # build result header
        result = ""

        if title == None:
            result += f"@EndUserText.label : 'Generated by pydeen - {tablename}'\n"
        else:
            result += f"@EndUserText.label : '{title}'\n"

        result += "@AbapCatalog.enhancementCategory : #NOT_EXTENSIBLE\n"
        result += "@AbapCatalog.tableCategory : #TRANSPARENT\n"
        result += "@AbapCatalog.deliveryClass : #A\n"

        if readonly == True:
            result += "@AbapCatalog.dataMaintenance : #DISPLAY\n"
        else:
            result += "@AbapCatalog.dataMaintenance : #ALLOWED\n"

        result += f"define table {tablename} " + "{\n"

        # loop cols
        index = 0
        for col in cols:
            sap_type = None
            datatype = df.dtypes[col]
            df_col = df[col]
            df_col_len = df_col.map(len).max()
            print("max len of ", col, df_col_len)
            if datatype == "object":
                sap_type = "abap.string(0)"
            elif datatype == "bool":
                sap_type = "flag"
            elif datatype == "float":
                sap_type = "abap.fltp"
            elif datatype == "int64":
                if use_int8 == True:
                    sap_type = "abap.int8"
                else:
                    sap_type = "abap.int4"
            elif datatype == "datetime64[ns, UTC]":
                sap_type = "timestampl"
            else:
                sap_type = "abap.string(0)"
                self.error(
                    f"unknown col type mapping: {col} {datatype} - use string")

            # prepare line
            line = "  "
            if index == 0:
                result += "  key client : abap.clnt not null;\n"
                line += "key "
            line += self.get_sap_column_name(col) + " : " + sap_type
            if index == 0:
                line += " not null;\n"
            else:
                line += ";\n"
            result += line

            # add timestamp line
            if index == 0 and with_timestamp == True:
                result += "  timestamp : timestampl not null;\n"

            index += 1

        result += "}"
        return result


class SAPAbapODataConnector(HTTPConnector, MenuExitCallback):

    # static constants
    #ODATA_SERVICE_NAME      = "ID"
    ODATA_SERVICE_NAME = "TechnicalServiceName"
    ODATA_SERVICE_DESC = "Description"

    ODATA_PARAM_TOP = "$top"
    ODATA_PARAM_FORMAT = "$format"
    ODATA_PARAM_FILTER = "$filter"
    ODATA_PARAM_SAPCLIENT = "sap-client"

    def __init__(self, backend: Backend = None, url_or_endpoint: str = ""):
        super().__init__(backend, url_or_endpoint)
        self.type = "pydeen.SAPAbapODataConnector"
        self.endpoints = None
        self.endpoint = None
        self.metadata_util: SAPAbapODataMetadata = None
        self.menu_title = "SAP NetWeaver ABAP OData Connector - Menu"
        
        self.menu_entity:str = None
        self.menu_result:ODataResult = None
        self.menu_result_single:ODataResultSingle = None
        self.menu_request:SAPAbapODataRequest = None
        self.menu_pandas_df:PandasResultDataframe = None
        self.menu_request_params = {}

    def menu_action_reset(self):
        self.endpoint = None
        self.metadata_util = None
        self.menu_request = None
        super().menu_action_reset()

    def menu_action_select_entity(self, key: str = None):
        self.menu_result = None
        if self.endpoint != None and self.menu_entity != None and self.menu_request != None:
            self.menu_request.reset_last_error()
            self.menu_result = self.menu_request.select(
                add_params=self.menu_request_params, entity_key=key)
            last_error = self.menu_request.get_last_error()

            if self.menu_result != None:
                print("Entity Columns:", self.menu_result.get_columns())
                count = self.menu_result.get_count()
                print(
                    f"Endpoint {self.endpoint} entity {self.menu_entity} selected - {count} records")
                if count == 0:
                    self.menu_result == None
            else:
                print(f"No or wrong result - {last_error}")
        else:
            print("Wrong context to select entity")

    def menu_open_association(self, uri:str, assoc_name:str) -> bool:
        request = SAPAbapODataRequest(self, self.menu_request.entity, self.menu_request.endpoint)
        result = request.select(use_url=uri, add_params=self.menu_request_params)
        if result == None or result.get_count() == 0:
            print(f"OData navigation {assoc_name}: call error or no results")
            return False
        else:
            lines = result.get_count()
            print(f"OData navigation {assoc_name} with {lines} lines selected.")
            result.set_description(assoc_name)
            result.menu(menu_exit=self)    
            return True

    def menu_configure_request(self):
        print("Configure Request Params")
        # max rows
        if SAPAbapODataConnector.ODATA_PARAM_TOP in self.menu_request_params:
            max_rows_str = str(
                self.menu_request_params[SAPAbapODataConnector.ODATA_PARAM_TOP])
        else:
            max_rows_str = "1000"

        max_rows = UserInput("Change parameter max_rows",
                             max_rows_str).get_input_int(min=1)
        self.menu_request_params[SAPAbapODataConnector.ODATA_PARAM_TOP] = str(
            max_rows)
        print("Parameter max_rows set to", max_rows)

        # odata filter
        if SAPAbapODataConnector.ODATA_PARAM_FILTER in self.menu_request_params:
            odata_filter = str(
                self.menu_request_params[SAPAbapODataConnector.ODATA_PARAM_FILTER])
        else:
            odata_filter = None

        odata_filter_new = UserInput(
            "Change parameter OData Filter", odata_filter).get_input(empty_allowed=True)
        if odata_filter_new != None and odata_filter_new != "":
            self.menu_request_params[SAPAbapODataConnector.ODATA_PARAM_FILTER] = odata_filter_new
            print("Parameter OData filter set to", odata_filter_new)

    def menu_find_entities(self):
        if self.endpoint == None:
            print("Missing endpoint")
        else:
            entities = self.get_entities(self.endpoint)
            if entities == None or len(entities) == 0:
                print("No entities found for endpoint", self.endpoint)
            else:
                entries = {}
                for key in entities:
                    entries[key] = key

                # show menu
                valid = True
                while valid == True:
                    action = MenuSelection(
                        "Select Entity", entries, False, True).show_menu()
                    if action.is_cancel_entered() == True:
                        valid = False
                    elif action.is_selected() == True:
                        self.menu_result = None
                        self.menu_pandas_df = None
                        self.menu_entity = action.get_selection()
                        self.menu_request = SAPAbapODataRequest(
                            self, self.menu_entity, self.endpoint)
                        if self.menu_request.set_metainfo(self.metadata_util) == True:
                            print(
                                f"Entity {self.menu_entity} prepared for request")
                            valid = False
                        else:
                            self.menu_request = None
                            print("Errors occured")

    def menu_find_endpoints(self):
        endpoints = self.find_endpoints()
        if endpoints == None or len(endpoints) == 0:
            print("No endpoints found or errors occured")
        else:
            # build entries
            entries = {}
            for key in endpoints:
                entries[key] = f"{key} - {endpoints[key]}"

            # show menu
            valid = True
            while valid == True:
                menu = MenuSelection(
                    "Select OData Endpoint", entries, False, True)
                action = menu.show_menu()
                if action.is_cancel_entered() == True:
                    valid = False
                elif action.is_selected() == True:
                    self.menu_action_reset()
                    self.reset_last_error()
                    selected_endpoint = action.get_selection()
                    last_error = self.get_last_error()

                    if self.set_endpoint(selected_endpoint) == True:
                        print(f"Endpoint selected: ", self.endpoint)
                        valid = False
                    else:
                        print(
                            f"Errors occured while selecting endpoint {selected_endpoint}\n{last_error}")
                        menu.confirm(f"Wrong endpoint {selected_endpoint}")
    
    def exit_menu_get_entries_top(self, exit, owner) -> dict:
        return super().exit_menu_get_entries_top(exit, owner)

    def exit_menu_get_entries_bottom(self, exit, owner) -> dict:
        result = {}   
        if isinstance(owner, ODataResultSingle):
            if self.menu_result_single != None and self.menu_result_single.get_navigation_properties() != None:
                result[SAPAbapODataConnector.MENU_FOLLOW_ASSOC] = "Follow OData navigation"
            return result
        elif isinstance(owner, ODataResult):
            result[SAPAbapODataConnector.MENU_RESULT_PANDAS] = "Open as pandas dataframe result"
            return result
        else:
            return super().exit_menu_get_entries_bottom(exit, owner)

    def exit_menu_process_selection(self, exit, owner, selected: str, text: str = None) -> bool:
        if isinstance(owner, ODataResultSingle):
            if selected == SAPAbapODataConnector.MENU_FOLLOW_ASSOC:
                assoc = self.menu_result_single.get_navigation_properties()
                action = MenuSelection("Select navigation property", MenuSelection.dict_keys_as_entries(assoc)).show_menu()
                if not action.is_cancel_entered():
                    selected_assoc = action.get_selection()
                    assoc_uri = assoc.get(selected_assoc)
                    self.menu_open_association(uri=assoc_uri, assoc_name=selected_assoc)
                return True
            return False
        elif isinstance(owner, SAPAbapODataResult):
            if selected == SAPAbapODataConnector.MENU_RESULT_PANDAS:
                try:
                    df = owner.get_result_as_pandas_df(ignore_tech_cols=True)
                    print("DATAFRAME", df)
                    name = owner.get_name()
                    result_df = PandasResultDataframe(name, df)
                    result_df.menu(menu_exit=self)
                except Exception as exc:
                    self.error(f"Error while transforming result to pandas in SAPAbapODataConnector exit for {owner}: {exc} - {type(exc)}")
                return True
            return False
        else:        
            return super().exit_menu_process_selection(exit, owner, selected, text)

    def menu_get_entries(self, prefilled: dict = None) -> dict:
        entries = {}
        entries[SAPAbapODataConnector.MENU_FIND_ENDPOINTS] = "Search OData endpoints in ABAP backend"

        # endpoint options
        if self.endpoint != None:
            if self.metadata_util != None and self.endpoint != None:
                entries[
                    SAPAbapODataConnector.MENU_METADATA_INFO] = f"Display metainfo for endpoint {self.endpoint}"

            entries[
                SAPAbapODataConnector.MENU_FIND_ENTITIES] = f"Choose entity in OData endpoint {self.endpoint}"

            if self.menu_request != None:
                entries[
                    SAPAbapODataConnector.MENU_REQUEST_CONFIGURE] = f"Configure data extraction request (entity {self.menu_entity}, endpoint {self.endpoint})"
                entries[SAPAbapODataConnector.MENU_ENTITY_SELECT] = f"Extract dataset (entity {self.menu_entity}, endpoint {self.endpoint})"
                if self.menu_result == None:
                    entries[
                        SAPAbapODataConnector.MENU_ENTITY_BY_KEY] = f"Extract single record by entity key (entity {self.menu_entity}, endpoint {self.endpoint})"

        # result options
        if self.menu_result != None:
            result_count = self.menu_result.get_count()
            entries[
                SAPAbapODataConnector.MENU_RESULT_MENU] = f"Enter current result menu (entity {self.menu_entity}, endpoint {self.endpoint}, records {result_count})"
            if result_count > 0:
                #entries[
                #    SAPAbapODataConnector.MENU_RESULT_RAW] = f"Display current as raw data (entity {self.menu_entity}, endpoint {self.endpoint})"
                entries[
                    SAPAbapODataConnector.MENU_RESULT_SINGLE_CHOOSE] = f"Choose single record from current result (entity {self.menu_entity}, endpoint {self.endpoint})"
                # single result support
                if self.menu_result_single != None:
                    entries[
                        SAPAbapODataConnector.MENU_RESULT_SINGLE_MENU] = f"Enter single record menu (record {self.menu_result_single.get_description()})"
                
                # pandas transformation                    
                if self.menu_pandas_df == None:
                    entries[
                        SAPAbapODataConnector.MENU_RESULT_PANDAS] = f"Get current result as pandas dataframe (entity {self.menu_entity}, endpoint {self.endpoint})"

        # pandas support
        #if self.menu_pandas_df != None:
        #    entries[
        #        SAPAbapODataConnector.MENU_PANDAS_MENU] = f"Open menu for current pandas dataframe {self.menu_pandas_df.get_name()}"

        
        # final own features
        #if Factory.get_datahub().get_count() > 0:
        #    entries[SAPAbapODataConnector.MENU_DATAHUB] = "Open Datahub menu"

        #entries[SAPAbapODataConnector.MENU_RESET] = "Reset menu context"
        
        entries.update(super().menu_get_entries())
        return entries



    def menu_process_selection(self, selected: str, text: str = None):
        try:
            if selected == SAPAbapODataConnector.MENU_FIND_ENDPOINTS:
                self.menu_find_endpoints()
            elif selected == SAPAbapODataConnector.MENU_FIND_ENTITIES:
                self.menu_find_entities()
            elif selected == SAPAbapODataConnector.MENU_METADATA_INFO:
                print(self.metadata_util)
                self.metadata_util.menu()
            elif selected == SAPAbapODataConnector.MENU_REQUEST_CONFIGURE:
                self.menu_configure_request()
            elif selected == SAPAbapODataConnector.MENU_ENTITY_BY_KEY:
                key = UserInput("Enter Entity Key").get_input(
                    empty_allowed=True)
                if key != None and len(key) > 0:
                    self.menu_action_select_entity(key)
            elif selected == SAPAbapODataConnector.MENU_ENTITY_SELECT:
                self.menu_action_select_entity()
            elif selected == SAPAbapODataConnector.MENU_RESULT_SINGLE_CHOOSE:
                result_single = self.menu_result.menu_get_result_single() 
                if result_single == None:
                    print("No single record selected")
                else:
                    odata_result = ODataResultSingle(result_single.result, name=result_single.result_name) 
                    odata_result.set_from_raw_result_single(result_single)
                    self.menu_result_single = odata_result
                    nav_props = self.menu_result_single.get_navigation_properties()
                    if nav_props != None:
                        print(f"OData navigation properties found: {len(nav_props)}")
            elif selected == SAPAbapODataConnector.MENU_RESULT_SINGLE_MENU:
                self.menu_result_single.menu(menu_exit=self)
            elif selected == SAPAbapODataConnector.MENU_RESULT_RAW:
                print(self.menu_result.get_result_raw())
            elif selected == SAPAbapODataConnector.MENU_RESULT_PANDAS:
                df = self.menu_result.get_result_as_pandas_df()
                self.menu_pandas_df = PandasResultDataframe(
                    name=self.menu_result.result_name, df=df)
                print(df)
                self.menu_pandas_df.menu(menu_exit=self)
            elif selected == SAPAbapODataConnector.MENU_RESULT_MENU:
                self.menu_result.menu()
            elif selected == SAPAbapODataConnector.MENU_PANDAS_MENU:
                self.menu_pandas_df.menu()
            elif selected == SAPAbapODataConnector.MENU_DATAHUB:
                Factory.get_datahub().menu()
            elif selected == SAPAbapODataConnector.MENU_RESET:
                self.menu_action_reset()
            else:
                super().menu_process_selection(selected, text)
        except Exception as exc:
            print(f"Errors occured while processing SAP OData Connector command {selected}:", type(exc), exc)

    def get_endpoints(self, max_results: int = 10000):
        # check cached
        if self.endpoints != None:
            return self.endpoints

        # build a new request
        self.reset_last_error()
        request = self.create_request()
        if request == None:
            self.trace("wrong request")
            return None

        url = "/sap/opu/odata/IWFND/CATALOGSERVICE;v=2/ServiceCollection"

        # prepare params
        params = {}
        params[SAPAbapODataConnector.ODATA_PARAM_TOP] = str(max_results)
        params[SAPAbapODataConnector.ODATA_PARAM_FORMAT] = "json"

        client = None
        try:
            client = self.backend.get_client()
        except Exception as exc:
            self.trace("Backend has no client access. Ignore.")
        if client != None:
            params[SAPAbapODataConnector.ODATA_PARAM_SAPCLIENT] = client


        # call sap service api
        self.trace("Call sap for OData Endpoints")
        http_code = request.get(url, params)
        text = request.get_response_text()

        # check for errors
        if http_code < 200 or http_code > 299:
            self.trace(f"invalid answer - return code {http_code}")
            if text != None:
                self.trace(text)
            return None

        json = request.get_response_json()
        if json == None:
            self.trace("invalid answer - no json")
            return None

        records = json["d"]["results"]
        if records == None:
            self.trace("invalid answer - no results")
            return None
        else:
            self.endpoints = records
            return records

    def find_endpoints(self, searchFor: str = None, max_results: int = 10000) -> dict:
        result = {}
        records = self.get_endpoints(max_results)
        if records != None:
            for record in records:
                name = record[SAPAbapODataConnector.ODATA_SERVICE_NAME]
                desc = record[SAPAbapODataConnector.ODATA_SERVICE_DESC]

                serviceURL = record['ServiceUrl']
                if serviceURL != None and serviceURL.find('/sap/opu/odata') > 0 and serviceURL.find(name) < 0:
                    serviceURLParts = serviceURL.split("/sap/opu/odata")
                    name = serviceURLParts[1]

                if searchFor == None or name.find(searchFor) >= 0 or desc.find(searchFor) >= 0:
                    result[name] = desc

        return result

    def get_entities(self, endpoint):
        # build a new request
        self.reset_last_error()
        request = self.create_request()

        params = {}
        params[SAPAbapODataConnector.ODATA_PARAM_FORMAT] = "json"

        client = self.backend.get_client()
        if client != None:
            params[SAPAbapODataConnector.ODATA_PARAM_SAPCLIENT] = client

        self.trace("Call sap for OData Endpoint Entities")

        url = f"/sap/opu/odata/sap/{endpoint}/"
        if endpoint.find("/") == 0:
            url = f"/sap/opu/odata{endpoint}/"

        http_code = request.get(url, params)
        text = request.get_response_text()
        
        # check for errors
        if http_code < 200 or http_code > 299:
            self.error(f"invalid answer - return code {http_code}\n{text}")
            return None
    
        # process results
        json = request.get_response_json()
        if json == None:
            self.error(f"invalid answer - no json - {text}")
            return None

        records = json["d"]["EntitySets"]
        if records == None:
            self.error(f"invalid answer - no results - {text}")
            return None
        else:
            return records

    def get_metadata_xml(self, endpoint, add_params: dict = None) -> str:
        # prepare params
        if add_params != None:
            params = add_params
        else:
            params = {}

        # main params for sap request
        client = self.backend.get_client()
        if client != None:
            params[SAPAbapODataConnector.ODATA_PARAM_SAPCLIENT] = client

        # prepare url prefix
        url_prefix = "/sap/opu/odata/sap/"
        if endpoint != None and endpoint.find("/") == 0:
            url_prefix = "/sap/opu/odata"

        # prepare request and execute
        url = f"{url_prefix}{endpoint}/$metadata"

        request = self.create_request()
        http_code = request.get(url, params)
        text = request.get_response_text()
        if http_code < 200 or http_code > 299:
            self.error(f"invalid answer - return code {http_code}\n{text}")
            return None

        # process result
        if text == None:
            self.error(f"invalid answer - no xml answer\n{text}")
            return None

        # result
        return text

    def set_endpoint(self, endpoint: str) -> bool:
        # reset
        self.endpoint = None
        self.metadata_util = None

        # get metadata
        metadata_xml = self.get_metadata_xml(endpoint)
        if metadata_xml == None:
            self.error(f"no metadata available for endpoint {endpoint}")
            return False

        # create new util and parse xml
        metadata_util = SAPAbapODataMetadata()
        if metadata_util.parse_metadata_xml(metadata_xml, name=endpoint) == False:
            self.error(f"parsing metadata xml failed for endpoint {endpoint}")
            return False

        # cache it and return
        self.metadata_util = metadata_util
        self.endpoint = endpoint
        return True

    def get_entity_metainfo(self, entity: str) -> SAPAbapODataMetaEntity:
        if entity != None and self.metadata_util != None:
            return SAPAbapODataMetaEntity(self.metadata_util, entity)
        else:
            self.error(f"metadata info not available for entity {entity}")
            return None

    def get_current_result(self) -> Result:
        return self.menu_result

    def get_current_result_as_pandas_df(self) -> Result:
        try:
            return self.menu_result.get_result_as_pandas_df()
        except:
            return None


class SAPAbapODataRequest(HTTPRequest):
    def __init__(self, connector: Connector, entity: str, endpoint: str = None) -> None:
        super().__init__(connector)
        self.type = "pydeen.SAPAbapODataRequest"
        self.connector: SAPAbapODataConnector = connector
        self.endpoint = endpoint
        self.entity = entity
        self.odata_metadata = None
        self.odata_metadata_xml = None
        self.odata_metadata_util: ODataMetadata = None

    def set_metainfo(self, metadata_util: ODataMetadata) -> bool:
        self.odata_metadata_xml = metadata_util.get_metadata_xml()
        if self.odata_metadata_xml == None:
            return False
        else:
            self.odata_metadata_util = metadata_util
            return True

    def parse_record(self, record: dict, detected_type=None) -> dict:
        try:
            # use the record to filter
            result_util = Result([])
            result_rec = result_util.parse_json_result_record(record=record, follow_sub_objects=True)
            
            #result_rec = {}
            odata_type = detected_type
            for attr_name in record.keys():
                if attr_name == "__metadata":
                    if odata_type == None:
                        odata_type = record["__metadata"]["type"]
                    if self.odata_metadata == None:
                        self.odata_metadata = record["__metadata"]
                #else:
                #    attr_value = record[attr_name]
                #    result_rec[attr_name] = attr_value

            return result_rec, odata_type
        except Exception as exc:
            self.error(
                f"parsing OData result failed: {type(exc)} - {exc}\n{record}")
            return None

    def select(self, max_rows: int = 1000, odataFilter: str = None, entity_key: str = None, add_params: dict = None, use_url:str=None) -> Result:
        
        # given URL
        if use_url != None:
            url = use_url
        else:
            # prepare url prefix
            url_prefix = "/sap/opu/odata/sap/"
            if self.endpoint != None and self.endpoint.find("/") == 0:
                url_prefix = "/sap/opu/odata"

            # prepare request and execute
            if self.endpoint == None or self.endpoint == "":
                url = f"{url_prefix}{self.entity}"
            else:
                url = f"{url_prefix}{self.endpoint}/{self.entity}"

            # entity key?
            if entity_key != None:
                key = entity_key
                if key.find("'") < 0 and key.find('guid') != 0:
                    key = f"'{key}'"
                url = f"{url}({key})"
                self.trace(f"use odata url with key {key}")

        # prepare params
        if add_params != None:
            params = add_params
        else:
            params = {}

        # main params for sap request
        params[SAPAbapODataConnector.ODATA_PARAM_FORMAT] = "json"
        client = self.connector.backend.get_client()
        if client != None:
            params[SAPAbapODataConnector.ODATA_PARAM_SAPCLIENT] = client

        # additional odata params
        if entity_key == None:
            if not SAPAbapODataConnector.ODATA_PARAM_TOP in params and max_rows > 0:
                params[SAPAbapODataConnector.ODATA_PARAM_TOP] = str(max_rows)

            if not SAPAbapODataConnector.ODATA_PARAM_FILTER in params and odataFilter != None:
                params[SAPAbapODataConnector.ODATA_PARAM_FILTER] = odataFilter
        else:
            if len(params) > 0:
                if SAPAbapODataConnector.ODATA_PARAM_TOP in params.keys():
                    del params[SAPAbapODataConnector.ODATA_PARAM_TOP]
                if SAPAbapODataConnector.ODATA_PARAM_FILTER in params.keys():
                    del params[SAPAbapODataConnector.ODATA_PARAM_FILTER]

        # execute request
        request = self.connector.create_request()
        http_code = request.get(url, params)
        
        last_error = request.get_last_error()
        if last_error != None:
            self.last_error = last_error

        # check success
        text = request.get_response_text()
        if http_code < 200 or http_code > 299:
            self.error(f"invalid answer - return code {http_code}\n{text}")
            return None

        # process result
        try:
            json = request.get_response_json()
            if json == None:
                self.error(f"invalid answer - no json - {text}")
                return None
            if not "d" in json.keys():
                self.error(
                    f"invalid answer - no valid odata result json - {text}")
                return None
            json_data = json["d"]
            if "results" in json_data.keys():
                json_result = json_data["results"]
            else:
                json_result = json_data
        except Exception as exc:
            self.error(
                f"invalid answer - errors occured - {type(exc)} - {exc}\n{text}")
            return None

        if json_result == None:
            self.error(f"invalid answer - no results\n{json}")
            return None
        else:
            odata_type = None
            self.odata_metadata = None
            result = []

            if type(json_result) != list:
                # record mode
                self.trace("odata single record mode detected")
                result_rec, odata_type = self.parse_record(json_result)
                if result_rec != None:
                    result.append(result_rec)
            else:
                # list mode
                for record in json_result:
                    result_rec, odata_type = self.parse_record(
                        record, odata_type)
                    if result_rec != None:
                        result.append(result_rec)
                    else:
                        self.error("odata result list contains errors")
                        return None

            # prepare result
            result_name = f"{self.endpoint}/{self.entity}"
            abap_result = SAPAbapODataResult(
                self, result, odata_type, name=result_name)
            entity_meta = self.get_entity_metainfo()
                        
            if entity_meta != None:
                abap_result.set_entity_metainfo(entity_meta)

            return abap_result

    def get_metadata_xml(self, add_params: dict = None) -> str:
        if self.odata_metadata_xml != None:
            return self.odata_metadata_xml

        if self.endpoint == None:
            return None

        # prepare params
        if add_params != None:
            params = add_params
        else:
            params = {}

        # main params for sap request
        client = self.connector.backend.get_client()
        if client != None:
            params[SAPAbapODataConnector.ODATA_PARAM_SAPCLIENT] = client

        # prepare url prefix
        url_prefix = "/sap/opu/odata/sap/"
        if self.endpoint != None and self.endpoint.find("/") == 0:
            url_prefix = "/sap/opu/odata"

        # prepare request and execute
        url = f"{url_prefix}{self.endpoint}/$metadata"

        request = self.connector.create_request()
        http_code = request.get(url, params)
        text = request.get_response_text()
        if http_code < 200 or http_code > 299:
            self.error(f"invalid answer - return code {http_code}\n{text}")
            return None

        # process result
        if text == None:
            self.error(f"invalid answer - no xml answer\n{text}")
            return None

        # result
        self.odata_metadata_xml = text
        return text

    def is_metadata_available(self) -> bool:
        if self.odata_metadata_xml != None:
            return True
        else:
            return False

    def get_metadata_util(self) -> ODataMetadata:
        # check cache
        if self.odata_metadata_util != None:
            return self.odata_metadata_util

        # check xml is loaded
        if self.is_metadata_available() == False:
            return None

        # create new util and parse xml
        metadata_util = SAPAbapODataMetadata()
        if metadata_util.parse_metadata_xml(self.odata_metadata_xml) == False:
            self.error("parsing metadata xml failed")
            return None

        # cache it and return
        self.odata_metadata_util = metadata_util
        return metadata_util

    def get_entity_metainfo(self) -> SAPAbapODataMetaEntity:
        if self.entity != None:
            return SAPAbapODataMetaEntity(self.get_metadata_util(), self.entity)
        else:
            return None


class SAPAbapODataResult(ODataResult):

    def __init__(self, request, result, odata_type: str, name: str = None) -> None:
        super().__init__(result, name=name)
        self.type = "pydeen.SAPAbapODataResult"
        self.request: SAPAbapODataRequest = request
        self.odata_type = odata_type

    def convert_raw_value(self, column, value):
        # check: value and context is available
        if value == None:
            return value

        if self.entityMetaInfo == None:
            self.trace(f"no entity metainfo available - column {column}")
            return super().convert_raw_value(column, value)

        # check for data types
        ent_type = None
        try:
            ent_meta: SAPAbapODataMetaEntity = self.entityMetaInfo
            ent_type = ent_meta.get_column_type(column)

            if type(value) == str and value.find("/Date") >= 0:
                dt = ent_meta.get_datetime_from_slash_date(value)
                return dt
#            elif ent_type != None and ent_type.find("Edm.Date") >= 0:
#                print("found date type", column, ent_type, value)
            else:
                super().convert_raw_value(column, value)
        except Exception as exc:
            self.error(f"exception in SAPODataResult convert_raw_value {column} = {value} ({ent_type}): {type(exc)} - {exc}")
            return super().convert_raw_value(column, value)
