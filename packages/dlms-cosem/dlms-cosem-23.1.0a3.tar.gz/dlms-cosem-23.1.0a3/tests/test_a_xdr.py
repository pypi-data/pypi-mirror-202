import pprint
from functools import partial

from dlms_cosem import enumerations as enums
from dlms_cosem.a_xdr import (
    Attribute,
    AXdrDecoder,
    Choice,
    EncodingConf,
    Sequence,
    get_axdr_length,
)
from dlms_cosem.connection import XDlmsApduFactory
from dlms_cosem.dlms_data import DataStructure, DlmsDataParser
from dlms_cosem.protocol.xdlms.get import GetResponseWithBlock
from dlms_cosem.utils import parse_as_dlms_data
from dlms_cosem.time import datetime_from_bytes

get_data_access_result_from_bytes = partial(
    enums.DataAccessResult.from_bytes, byteorder="big"
)


class TestAxdrDecoder:
    def test_decode_array_and_structure(self):
        # Data from a get response on a load profile request. preped C40100 to get whole
        # APDU.

        # Contains 24 hourly reading with 3 values inside it (datetime, status, value)
        # An array of 24 structures of 3 elements.

        data = bytes.fromhex(
            "0001180203090C07E2020C0500000000800000110006000186A00203090C07E2020C050"
            "1000000800000110006000188400203090C07E2020C0502000000800000110006000189E00203"
            "090C07E2020C050300000080000011000600018B800203090C07E2020C0504000000800000110"
            "00600018D200203090C07E2020C050500000080000011000600018EC00203090C07E2020C0506"
            "000000800000110006000190600203090C07E2020C05070000008000001100060001920002030"
            "90C07E2020C0508000000800000110006000193A00203090C07E2020C05090000008000001100"
            "06000195400203090C07E2020C050A000000800000110006000196E00203090C07E2020C050B0"
            "00000800000110006000198800203090C07E2020C050C00000080000011000600019A20020309"
            "0C07E2020C050D00000080000011000600019BC00203090C07E2020C050E00000080000011000"
            "600019D600203090C07E2020C050F00000080000011000600019F000203090C07E2020C051000"
            "00008000001100060001A0A00203090C07E2020C05110000008000001100060001A2400203090"
            "C07E2020C05120000008000001100060001A3E00203090C07E2020C0513000000800000110006"
            "0001A5800203090C07E2020C05140000008000001100060001A7200203090C07E2020C0515000"
            "0008000001100060001A8C00203090C07E2020C05160000008000001100060001AA600203090C"
            "07E2020C05170000008000001100060001AC00"
        )
        assert len(data) == 555

        encoding_conf = EncodingConf(
            attributes=[
                Choice(
                    {
                        b"\x00": Sequence(attribute_name="result"),
                        b"\x01": Attribute(
                            attribute_name="result",
                            create_instance=get_data_access_result_from_bytes,
                            length=1,
                        ),
                    }
                )
            ]
        )

        decoder = AXdrDecoder(encoding_conf)

        result = decoder.decode(data)["result"]
        assert len(result) == 24
        assert len(result[0]) == 3
        assert isinstance(result[0][0], bytearray)
        assert isinstance(result[0][1], int)
        assert isinstance(result[0][2], int)


class TestDlmsDataDecoder:
    def test_decode_array_and_structure(self):
        # Data from a get response on a load profile request. preped C40100 to get whole
        # APDU.

        # Contains 24 hourly reading with 3 values inside it (datetime, status, value)
        # An array of 24 structures of 3 elements.

        data = bytes.fromhex(
            "01180203090C07E2020C0500000000800000110006000186A00203090C07E2020C050"
            "1000000800000110006000188400203090C07E2020C0502000000800000110006000189E00203"
            "090C07E2020C050300000080000011000600018B800203090C07E2020C0504000000800000110"
            "00600018D200203090C07E2020C050500000080000011000600018EC00203090C07E2020C0506"
            "000000800000110006000190600203090C07E2020C05070000008000001100060001920002030"
            "90C07E2020C0508000000800000110006000193A00203090C07E2020C05090000008000001100"
            "06000195400203090C07E2020C050A000000800000110006000196E00203090C07E2020C050B0"
            "00000800000110006000198800203090C07E2020C050C00000080000011000600019A20020309"
            "0C07E2020C050D00000080000011000600019BC00203090C07E2020C050E00000080000011000"
            "600019D600203090C07E2020C050F00000080000011000600019F000203090C07E2020C051000"
            "00008000001100060001A0A00203090C07E2020C05110000008000001100060001A2400203090"
            "C07E2020C05120000008000001100060001A3E00203090C07E2020C0513000000800000110006"
            "0001A5800203090C07E2020C05140000008000001100060001A7200203090C07E2020C0515000"
            "0008000001100060001A8C00203090C07E2020C05160000008000001100060001AA600203090C"
            "07E2020C05170000008000001100060001AC00"
        )
        # assert len(data) == 555

        parser = DlmsDataParser()

        result = parser.parse(data)

        pprint.pprint(result)
        assert len(result) == 1
        assert len(result[0].value) == 24
        assert len(result[0].value[0].value) == 3

    def test_decode_array_and_structure_with_limit(self):
        data = b"\x02\x07\x06\x01\x90V\x0b\x12\x03&\x11\x0f\x11\x04\x12\x00\xf0\x12\x00\x01\x12\x00\x00\x00\x02\x05\x12\x02\xd0\x12\x0c\xa8\x11\x11\x11\x1e\x0f\xc0"
        result = DlmsDataParser().parse(data, limit=1)

        assert len(result) == 1
        assert isinstance(result[0], DataStructure)
        assert len(result[0].value) == 7
        assert result[0].value[0].value == 26236427


def test_lte_monitoring_quality_of_service():
    """
    LTE Monitoring v0, attr 2.
    {
    T3402:   long-unsigned
    T3412:   long-unsigned
    RSRQ:   unsigned int
    RSRP:   unsigned int
    qRxlevMin: integer
    }
    """
    data = b"\x02\x05\x12\x02\xd0\x12\x0c\xa8\x11\x12\x11\x1e\x0f\xc0"
    result = parse_as_dlms_data(data)
    assert 5 == len(result)


def test_gsm_diagnistics_cell_info():
    """
    GSM Diagnoistivs v1, attr 6

    {
     cell_ID: double-long-unsigned,
     location_ID: long-unsigned,
     signal_quality: unsigned,
     ber: unsigned,
     mcc: long-unsigned,
     mnc: long-unsigned,
    }
    """
    data = b"\x02\x07\x06\x00\x00\x00\x00\x12\x00\x00\x11\x00\x11\x00\x12\x00\x00\x12\x00\x00\x12\x00\x00"
    result = parse_as_dlms_data(data)

    assert 7 == len(result)
    assert result[0] == 0
    assert result[1] == 0


def test_get_axdr_length():

    data = bytearray(b"\x82\x0f\x0f")

    assert get_axdr_length(data) == int.from_bytes(b"\x0f\x0f", "big")
    assert len(data) == 0
    data = bytearray(b"\x09")
    assert get_axdr_length(data) == 9
    assert len(data) == 0


def test_decode_long():
    data = b"\xc4\x02\xc1\x00\x00\x00\x00\x01\x00\x82\x04\x9e\x01\x82\x05\xa0\x02\x04\t\x0c\x07\xe3\x0c\x10\x01\x08\x00\x00\x00\xff\xc4\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x86\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed\x06\x00\x00\x06T\x02\x04\x00\x11\x06\x06\x00\x00\x05\xed"

    apdu = XDlmsApduFactory.apdu_from_bytes(data)
    assert isinstance(apdu, GetResponseWithBlock)
    assert apdu.block_number == 1


def test_decode_sl700_array_data():
    data = (
        b"\x01"  # array
        b"0"  # 30 entries
            b"\x02"  # structure
            b"\x08"  # 8 elements
                b"\x02"  # structure
                b"\x02"  # 2 elements
                    b"\t\x0c"  # octect string of length 12
                    b"\x07\xe7\x03\x01\xff\xff\xff\xff\xff\x80\x00\xff"
        
                    b"\x04\x06\x00\x00\x00\x00\x10\x00"
        b"\x88\x10\x00\x00\x10\x00\x02\x10"
        b"\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x8b\x10\x00\x00\x10\x00"
        b"\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x8a\x10\x00\x00"
        b"\x10\x00\x02\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x89\x10"
        b"\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00"
        b"\x87\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00"
        b"\x10\x00\x8c\x10\x00\x00\x10\x00\x02\x10\x00\x00\x02\x08\x00\x00"
        b"\x00\x00\x10\x00\x86\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08"
        b"\x00\x00\x00\x00\x10\x00\x88\x10\x00\x00\x10\x00\x02\x10\x00\x00"
        b"\x02\x08\x00\x00\x00\x00\x10\x00\x88\x10\x00\x00\x10\x00\x03\x10"
        b"\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x8c\x10\x00\x00\x10\x00"
        b"\x02\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x8b\x10\x00\x00"
        b"\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x8f\x10"
        b"\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00"
        b"\x94\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00"
        b"\x10\x00\x93\x10\x00\x00\x10\x00\x02\x10\x00\x00\x02\x08\x00\x00"
        b"\x00\x00\x10\x00\x95\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08"
        b"\x00\x00\x00\x00\x10\x00\x97\x10\x00\x00\x10\x00\x03\x10\x00\x00"
        b"\x02\x08\x00\x00\x00\x00\x10\x00\x94\x10\x00\x00\x10\x00\x03\x10"
        b"\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x96\x10\x00\x00\x10\x00"
        b"\x02\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x97\x10\x00\x00"
        b"\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x94\x10"
        b"\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00"
        b"\x96\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00"
        b"\x10\x00\x97\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00"
        b"\x00\x00\x10\x00\x97\x10\x00\x00\x10\x00\x02\x10\x00\x00\x02\x08"
        b"\x00\x00\x00\x00\x10\x00\xa3\x10\x00\x00\x10\x00\x04\x10\x00\x00"
        b"\x02\x08\x00\x00\x00\x00\x10\x00\xba\x10\x00\x00\x10\x00\x03\x10"
        b"\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\xac\x10\x00\x00\x10\x00"
        b"\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\xaf\x10\x00\x00"
        b"\x10\x00\x04\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\xac\x10"
        b"\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00"
        b"\xac\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00"
        b"\x10\x00\xaa\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00"
        b"\x00\x00\x10\x00\xad\x10\x00\x00\x10\x00\x04\x10\x00\x00\x02\x08"
        b"\x00\x00\x00\x00\x10\x00\xaa\x10\x00\x00\x10\x00\x03\x10\x00\x00"
        b"\x02\x08\x00\x00\x00\x00\x10\x00\xaa\x10\x00\x00\x10\x00\x03\x10"
        b"\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\xad\x10\x00\x00\x10\x00"
        b"\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\xa5\x10\x00\x00"
        b"\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\xaa\x10"
        b"\x00\x00\x10\x00\x04\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00"
        b"\x9d\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00"
        b"\x10\x00\xa6\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00"
        b"\x00\x00\x10\x00\x9d\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08"
        b"\x00\x00\x00\x00\x10\x00\x9c\x10\x00\x00\x10\x00\x03\x10\x00\x00"
        b"\x02\x08\x00\x00\x00\x00\x10\x00\x9b\x10\x00\x00\x10\x00\x02\x10"
        b"\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x9c\x10\x00\x00\x10\x00"
        b"\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x9a\x10\x00\x00"
        b"\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00\x9a\x10"
        b"\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00\x10\x00"
        b"\x98\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00\x00\x00"
        b"\x10\x00\x99\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08\x00\x00"
        b"\x00\x00\x10\x00\x9b\x10\x00\x00\x10\x00\x03\x10\x00\x00\x02\x08"
        b"\x00\x00\x00\x00\x10\x00\x99\x10\x00\x00\x10\x00\x02\x10\x00\x00"
    )

    result = parse_as_dlms_data(data)
    # pprint.pprint(datetime_from_bytes(result[0][0][0]))

